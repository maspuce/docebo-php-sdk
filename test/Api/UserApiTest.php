<?php
/**
 * UserApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Swagger\Client;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * UserApiTest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {

    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }

    /**
     * Test case for userManagev1managersmanagerIdusers
     *
     * Assigns subordinates to an User.
     *
     */
    public function testUserManagev1managersmanagerIdusers()
    {

    }

    /**
     * Test case for userManagev1user
     *
     * Returns list of Users.
     *
     */
    public function testUserManagev1user()
    {

    }

    /**
     * Test case for userManagev1user_0
     *
     * Create user.
     *
     */
    public function testUserManagev1user0()
    {

    }

    /**
     * Test case for userManagev1useraddToBranch
     *
     * Adds users to branches.
     *
     */
    public function testUserManagev1useraddToBranch()
    {

    }

    /**
     * Test case for userManagev1userapprove
     *
     * Approve temporary users.
     *
     */
    public function testUserManagev1userapprove()
    {

    }

    /**
     * Test case for userManagev1userbatch
     *
     * Batch import users.
     *
     */
    public function testUserManagev1userbatch()
    {

    }

    /**
     * Test case for userManagev1userchangeStatus
     *
     * Updates an user status.
     *
     */
    public function testUserManagev1userchangeStatus()
    {

    }

    /**
     * Test case for userManagev1usercheckUsernameuserid
     *
     * Check if given username is free.
     *
     */
    public function testUserManagev1usercheckUsernameuserid()
    {

    }

    /**
     * Test case for userManagev1userconfirmEmail
     *
     * Registration confirmation email.
     *
     */
    public function testUserManagev1userconfirmEmail()
    {

    }

    /**
     * Test case for userManagev1userdelete
     *
     * Deletes an user.
     *
     */
    public function testUserManagev1userdelete()
    {

    }

    /**
     * Test case for userManagev1userexport
     *
     * Export users.
     *
     */
    public function testUserManagev1userexport()
    {

    }

    /**
     * Test case for userManagev1userid
     *
     * Updates an existing user with the provided account information.
     *
     */
    public function testUserManagev1userid()
    {

    }

    /**
     * Test case for userManagev1useridUsersettings
     *
     * Get setting information about specific user..
     *
     */
    public function testUserManagev1useridUsersettings()
    {

    }

    /**
     * Test case for userManagev1useridUsersettings_0
     *
     * Set setting information about specific user..
     *
     */
    public function testUserManagev1useridUsersettings0()
    {

    }

    /**
     * Test case for userManagev1useridresend
     *
     * Resend registration email to a pending user.
     *
     */
    public function testUserManagev1useridresend()
    {

    }

    /**
     * Test case for userManagev1userimporterFields
     *
     * Returns list of mappable fields for the data importer.
     *
     */
    public function testUserManagev1userimporterFields()
    {

    }

    /**
     * Test case for userManagev1userkeepAlive
     *
     * Keep user session alive.
     *
     */
    public function testUserManagev1userkeepAlive()
    {

    }

    /**
     * Test case for userManagev1userlogin
     *
     * Generate access token for user, by provided username and password.
     *
     */
    public function testUserManagev1userlogin()
    {

    }

    /**
     * Test case for userManagev1userlogout
     *
     * User logout.
     *
     */
    public function testUserManagev1userlogout()
    {

    }

    /**
     * Test case for userManagev1usermanagerIdsubordinates
     *
     * Retrieves all the subordinates of a Manager.
     *
     */
    public function testUserManagev1usermanagerIdsubordinates()
    {

    }

    /**
     * Test case for userManagev1usermassEdit
     *
     * Updates an existing users with the provided account information.
     *
     */
    public function testUserManagev1usermassEdit()
    {

    }

    /**
     * Test case for userManagev1usermoveToBranch
     *
     * Move users from given branches to an other ones.
     *
     */
    public function testUserManagev1usermoveToBranch()
    {

    }

    /**
     * Test case for userManagev1userregister
     *
     * User registration.
     *
     */
    public function testUserManagev1userregister()
    {

    }

    /**
     * Test case for userManagev1userreject
     *
     * Reject temporary user.
     *
     */
    public function testUserManagev1userreject()
    {

    }

    /**
     * Test case for userManagev1userremoveFromBranch
     *
     * Adds users to branches.
     *
     */
    public function testUserManagev1userremoveFromBranch()
    {

    }

    /**
     * Test case for userManagev1usersession
     *
     * Get specific information about currently logged user..
     *
     */
    public function testUserManagev1usersession()
    {

    }

    /**
     * Test case for userManagev1usersuserIdmanagers
     *
     * Returns the manager of an employee.
     *
     */
    public function testUserManagev1usersuserIdmanagers()
    {

    }

    /**
     * Test case for userManagev1usertempDetailsidUser
     *
     * Get information from temporary user..
     *
     */
    public function testUserManagev1usertempDetailsidUser()
    {

    }

    /**
     * Test case for userManagev1useruserId
     *
     * View an User info.
     *
     */
    public function testUserManagev1useruserId()
    {

    }

    /**
     * Test case for userManagev1useruserIdmergeuserId2
     *
     * Retrieve merge users detailed information included first chunk of enrollments, subscriptions, badges, transactions.
     *
     */
    public function testUserManagev1useruserIdmergeuserId2()
    {

    }

    /**
     * Test case for userManagev1useruserIdmergeuserId2_0
     *
     * Merge the data from one user to another.
     *
     */
    public function testUserManagev1useruserIdmergeuserId20()
    {

    }

    /**
     * Test case for userManagev1useruserIdmergeuserId2badges
     *
     * List merge users badges.
     *
     */
    public function testUserManagev1useruserIdmergeuserId2badges()
    {

    }

    /**
     * Test case for userManagev1useruserIdmergeuserId2enrollments
     *
     * Retrieve all course enrollments for users to merge.
     *
     */
    public function testUserManagev1useruserIdmergeuserId2enrollments()
    {

    }

    /**
     * Test case for userManagev1useruserIdmergeuserId2subscriptions
     *
     * Retrieve all subscriptions for users to merge.
     *
     */
    public function testUserManagev1useruserIdmergeuserId2subscriptions()
    {

    }

    /**
     * Test case for userManagev1useruserIdmergeuserId2transactions
     *
     * List merge users transactions.
     *
     */
    public function testUserManagev1useruserIdmergeuserId2transactions()
    {

    }

    /**
     * Test case for userManagev1useruseridpassword
     *
     * Change user password.
     *
     */
    public function testUserManagev1useruseridpassword()
    {

    }

}
