<?php
/**
 * CourseApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Swagger\Client;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * CourseApiTest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CourseApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {

    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }

    /**
     * Test case for courseLearnv1coursecommentsthreadthreadId
     *
     * PUT | DELETE discussions (thread) - course.
     *
     */
    public function testCourseLearnv1coursecommentsthreadthreadId()
    {

    }

    /**
     * Test case for courseLearnv1coursecommentsthreadthreadIdmessage
     *
     * PUT REPLY discussions (thread) - course.
     *
     */
    public function testCourseLearnv1coursecommentsthreadthreadIdmessage()
    {

    }

    /**
     * Test case for courseLearnv1courseimportCourses
     *
     * Batch import courses.
     *
     */
    public function testCourseLearnv1courseimportCourses()
    {

    }

    /**
     * Test case for courseLearnv1courses
     *
     * Returns all courses..
     *
     */
    public function testCourseLearnv1courses()
    {

    }

    /**
     * Test case for courseLearnv1courses_0
     *
     * Create a new Course.
     *
     */
    public function testCourseLearnv1courses0()
    {

    }

    /**
     * Test case for courseLearnv1courseschart
     *
     * Get all learning objects by id of course.
     *
     */
    public function testCourseLearnv1courseschart()
    {

    }

    /**
     * Test case for courseLearnv1coursescompactList
     *
     * Return a more compact information about list of courses (filtering possible or just ALL courses), taking into account a given user.
     *
     */
    public function testCourseLearnv1coursescompactList()
    {

    }

    /**
     * Test case for courseLearnv1coursescourseId
     *
     * View a Course.
     *
     */
    public function testCourseLearnv1coursescourseId()
    {

    }

    /**
     * Test case for courseLearnv1coursescourseIdbyCategory
     *
     * Returns all courses of the same category..
     *
     */
    public function testCourseLearnv1coursescourseIdbyCategory()
    {

    }

    /**
     * Test case for courseLearnv1coursescourseIddeeplink
     *
     * Deeplinking is enabled in the advanced settings of a course and it allows to share a course with anybody using a signed link.
     *
     */
    public function testCourseLearnv1coursescourseIddeeplink()
    {

    }

    /**
     * Test case for courseLearnv1coursescourseIdlos
     *
     * Get all learning objects by id of course.
     *
     */
    public function testCourseLearnv1coursescourseIdlos()
    {

    }

    /**
     * Test case for courseLearnv1coursescourseIdrating
     *
     * View course rating.
     *
     */
    public function testCourseLearnv1coursescourseIdrating()
    {

    }

    /**
     * Test case for courseLearnv1coursescourseIdsessionidSessiondateyyyyMmDd
     *
     * Joining or starting a webinar session's date.
     *
     */
    public function testCourseLearnv1coursescourseIdsessionidSessiondateyyyyMmDd()
    {

    }

    /**
     * Test case for courseLearnv1coursesenrollmentPdf
     *
     * Returns all courses..
     *
     */
    public function testCourseLearnv1coursesenrollmentPdf()
    {

    }

    /**
     * Test case for courseLearnv1coursesid
     *
     * Update specific Course.
     *
     */
    public function testCourseLearnv1coursesid()
    {

    }

    /**
     * Test case for courseLearnv1coursesid_0
     *
     * Delete specific Learning course by given ID.
     *
     */
    public function testCourseLearnv1coursesid0()
    {

    }

    /**
     * Test case for courseLearnv1coursesidcomments
     *
     * Get discussions/posts of a course.
     *
     */
    public function testCourseLearnv1coursesidcomments()
    {

    }

    /**
     * Test case for courseLearnv1coursesidrating
     *
     * Update course rating.
     *
     */
    public function testCourseLearnv1coursesidrating()
    {

    }

    /**
     * Test case for courseLearnv1coursesidsessions
     *
     * Get all session that the user is enrolled in or all available if not enrolled by id of course.
     *
     */
    public function testCourseLearnv1coursesidsessions()
    {

    }

    /**
     * Test case for courseLearnv1coursesidwidgets
     *
     * Get all the widgets that have been set for the specific course.
     *
     */
    public function testCourseLearnv1coursesidwidgets()
    {

    }

    /**
     * Test case for courseLearnv1coursesreport
     *
     * Get all learning objects by id of course.
     *
     */
    public function testCourseLearnv1coursesreport()
    {

    }

    /**
     * Test case for courseLearnv1coursessessionidSessiondateyyyyMmDd
     *
     * Get training materials of session.
     *
     */
    public function testCourseLearnv1coursessessionidSessiondateyyyyMmDd()
    {

    }

}
