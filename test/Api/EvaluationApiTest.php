<?php
/**
 * EvaluationApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Swagger\Client;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * EvaluationApiTest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EvaluationApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {

    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }

    /**
     * Test case for evaluationSkillv1evaluationsmanager
     *
     * Get the summary list of roles and skills per each role for the manager evaluation.
     *
     */
    public function testEvaluationSkillv1evaluationsmanager()
    {

    }

    /**
     * Test case for evaluationSkillv1evaluationsrequestid
     *
     * Exclude users from further role evaluation by type.
     *
     */
    public function testEvaluationSkillv1evaluationsrequestid()
    {

    }

    /**
     * Test case for evaluationSkillv1evaluationsrequestsrequestIdskillsskillId
     *
     * Get the list of users to be evaluated for the manager by skill.
     *
     */
    public function testEvaluationSkillv1evaluationsrequestsrequestIdskillsskillId()
    {

    }

    /**
     * Test case for evaluationSkillv1evaluationsrequestsrequestIduser
     *
     * Get the list of skill to be evaluated by the user.
     *
     */
    public function testEvaluationSkillv1evaluationsrequestsrequestIduser()
    {

    }

    /**
     * Test case for evaluationSkillv1evaluationsstatistics
     *
     * Retrieves the list of Evaluation Statistics, filtered on input parameters.
     *
     */
    public function testEvaluationSkillv1evaluationsstatistics()
    {

    }

    /**
     * Test case for evaluationSkillv1evaluationssubordinates
     *
     * Retrieves all requested subordinates of a manager whose requests are completed.
     *
     */
    public function testEvaluationSkillv1evaluationssubordinates()
    {

    }

    /**
     * Test case for evaluationSkillv1evaluationsuserrequestid
     *
     * Retrieves the User Evaluation Details.
     *
     */
    public function testEvaluationSkillv1evaluationsuserrequestid()
    {

    }

    /**
     * Test case for evaluationSkillv1usersevaluation
     *
     * Saves Skill Evaluation for users.
     *
     */
    public function testEvaluationSkillv1usersevaluation()
    {

    }

    /**
     * Test case for evaluationSkillv1usersevaluation_0
     *
     * Deletes Evaluation(s).
     *
     */
    public function testEvaluationSkillv1usersevaluation0()
    {

    }

    /**
     * Test case for evaluationSkillv1usersevaluationrequestId
     *
     * View summary of the user last completed and calibrated assessment.
     *
     */
    public function testEvaluationSkillv1usersevaluationrequestId()
    {

    }

    /**
     * Test case for evaluationSkillv1usersidcontent
     *
     * Enroll user to formal content(courses and learning plans).
     *
     */
    public function testEvaluationSkillv1usersidcontent()
    {

    }

    /**
     * Test case for evaluationSkillv1usersidgapcontent
     *
     * List suggested formal content(courses and learning plans) for user with gap to be enrolled in according to the skills with gaps.
     *
     */
    public function testEvaluationSkillv1usersidgapcontent()
    {

    }

    /**
     * Test case for evaluationSkillv1usersrequests
     *
     * Retrieves all user requests and their status by role.
     *
     */
    public function testEvaluationSkillv1usersrequests()
    {

    }

    /**
     * Test case for evaluationSkillv1usersrequests_0
     *
     * Creates Evaluation Requests and assign users to the request.
     *
     */
    public function testEvaluationSkillv1usersrequests0()
    {

    }

    /**
     * Test case for evaluationSkillv1usersrequests_1
     *
     * Delete Evaluation Requests.
     *
     */
    public function testEvaluationSkillv1usersrequests1()
    {

    }

    /**
     * Test case for evaluationSkillv1usersroleroleIdexcludetype
     *
     * Exclude users from further role evaluation by type.
     *
     */
    public function testEvaluationSkillv1usersroleroleIdexcludetype()
    {

    }

    /**
     * Test case for evaluationSkillv1userssuggestcontent
     *
     * Returns suggested assets content for current employee/user logged.
     *
     */
    public function testEvaluationSkillv1userssuggestcontent()
    {

    }

    /**
     * Test case for evaluationSkillv1usersuserIdevaluation
     *
     * Retrieves the latest Self and Manager Evaluation received by the User.
     *
     */
    public function testEvaluationSkillv1usersuserIdevaluation()
    {

    }

    /**
     * Test case for evaluationSkillv1usersuserIdevaluation_0
     *
     * Creates a new Skill Evaluation for an user.
     *
     */
    public function testEvaluationSkillv1usersuserIdevaluation0()
    {

    }

    /**
     * Test case for evaluationSkillv1usersuserIdevaluationdraft
     *
     * Retrieves the draft Evaluation for an User.
     *
     */
    public function testEvaluationSkillv1usersuserIdevaluationdraft()
    {

    }

    /**
     * Test case for evaluationSkillv1usersuserIdevaluationskillId
     *
     * Retrieves the history of Evaluations for one Skill of one User.
     *
     */
    public function testEvaluationSkillv1usersuserIdevaluationskillId()
    {

    }

    /**
     * Test case for evaluationSkillv1usersuserIdmanagers
     *
     * Returns the manager of an employee.
     *
     */
    public function testEvaluationSkillv1usersuserIdmanagers()
    {

    }

    /**
     * Test case for evaluationSkillv1usersuserIdrequestrequestIdreopen
     *
     * Reopens a new Skill Evaluation for an user.
     *
     */
    public function testEvaluationSkillv1usersuserIdrequestrequestIdreopen()
    {

    }

    /**
     * Test case for evaluationSkillv1usersuserIdrequests
     *
     * Retrieves user evaluations.
     *
     */
    public function testEvaluationSkillv1usersuserIdrequests()
    {

    }

    /**
     * Test case for evaluationSkillv1usersuserIdrequests_0
     *
     * Creates Evaluation Requests and assign users to the request.
     *
     */
    public function testEvaluationSkillv1usersuserIdrequests0()
    {

    }

    /**
     * Test case for evaluationSkillv1usersuserIdrequests_1
     *
     * Delete User Evaluation Requests.
     *
     */
    public function testEvaluationSkillv1usersuserIdrequests1()
    {

    }

    /**
     * Test case for evaluationSkillv1usersuserIdrequestsskills
     *
     * Get the list of evaluation to perform grouped by skills.
     *
     */
    public function testEvaluationSkillv1usersuserIdrequestsskills()
    {

    }

    /**
     * Test case for evaluationSkillv1usersuserIdroleroleIdexcludetype
     *
     * Exclude an user from further role evaluation by type.
     *
     */
    public function testEvaluationSkillv1usersuserIdroleroleIdexcludetype()
    {

    }

    /**
     * Test case for evaluationSkillv1usersuserIdroles
     *
     * Returns the role of a user.
     *
     */
    public function testEvaluationSkillv1usersuserIdroles()
    {

    }

}
