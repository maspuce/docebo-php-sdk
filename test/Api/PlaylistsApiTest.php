<?php
/**
 * PlaylistsApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Swagger\Client;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * PlaylistsApiTest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlaylistsApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {

    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }

    /**
     * Test case for playlistsSharev1assetsidPlaylistasset
     *
     * Assign asset to playlist.
     *
     */
    public function testPlaylistsSharev1assetsidPlaylistasset()
    {

    }

    /**
     * Test case for playlistsSharev1assetsidPlaylistasset_0
     *
     * Remove asset from playlist.
     *
     */
    public function testPlaylistsSharev1assetsidPlaylistasset0()
    {

    }

    /**
     * Test case for playlistsSharev1playlists
     *
     * Retrieves all playlists for user, filtered on input parameters.
     *
     */
    public function testPlaylistsSharev1playlists()
    {

    }

    /**
     * Test case for playlistsSharev1playlists_0
     *
     * Creates a new playlist.
     *
     */
    public function testPlaylistsSharev1playlists0()
    {

    }

    /**
     * Test case for playlistsSharev1playlistsidPlaylist
     *
     * Update playlist.
     *
     */
    public function testPlaylistsSharev1playlistsidPlaylist()
    {

    }

    /**
     * Test case for playlistsSharev1playlistsidPlaylist_0
     *
     * Deletes one playlist.
     *
     */
    public function testPlaylistsSharev1playlistsidPlaylist0()
    {

    }

    /**
     * Test case for playlistsSharev1playlistsidPlaylistassets
     *
     * Retrieves all assets for playlist.
     *
     */
    public function testPlaylistsSharev1playlistsidPlaylistassets()
    {

    }

    /**
     * Test case for playlistsSharev1playlistsidPlaylistorder
     *
     * Order assets in playlist.
     *
     */
    public function testPlaylistsSharev1playlistsidPlaylistorder()
    {

    }

    /**
     * Test case for playlistsSkillv1playlistsplaylistIdprograms
     *
     * Assign programs to a playlist..
     *
     */
    public function testPlaylistsSkillv1playlistsplaylistIdprograms()
    {

    }

    /**
     * Test case for playlistsSkillv1playlistsplaylistIdprograms_0
     *
     * Unassigns an playlist from a Program.
     *
     */
    public function testPlaylistsSkillv1playlistsplaylistIdprograms0()
    {

    }

    /**
     * Test case for playlistsSkillv1playlistsplaylistIdskills
     *
     * Retrieves the list of Skills, that are assigned to given playlist.
     *
     */
    public function testPlaylistsSkillv1playlistsplaylistIdskills()
    {

    }

    /**
     * Test case for playlistsSkillv1playlistsplaylistIdskills_0
     *
     * Assign skill to a Playlist..
     *
     */
    public function testPlaylistsSkillv1playlistsplaylistIdskills0()
    {

    }

    /**
     * Test case for playlistsSkillv1playlistsplaylistIdskills_1
     *
     * De-assigns an existing skill(s) from given playlist.
     *
     */
    public function testPlaylistsSkillv1playlistsplaylistIdskills1()
    {

    }

}
