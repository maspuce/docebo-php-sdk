<?php
/**
 * LearningPlansApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * LearningPlansApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LearningPlansApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return LearningPlansApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation learningPlansSkillv1plansPlanIdprograms
     *
     * Unassigns a plan from a Program
     *
     * @param int $plan_id plan id (required)
     * @param \Swagger\Client\Model\SkillLearningplansUnassignProgramsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillLearningplansUnassignProgramsResponse
     */
    public function learningPlansSkillv1plansPlanIdprograms($plan_id, $body = null)
    {
        list($response) = $this->learningPlansSkillv1plansPlanIdprogramsWithHttpInfo($plan_id, $body);
        return $response;
    }

    /**
     * Operation learningPlansSkillv1plansPlanIdprogramsWithHttpInfo
     *
     * Unassigns a plan from a Program
     *
     * @param int $plan_id plan id (required)
     * @param \Swagger\Client\Model\SkillLearningplansUnassignProgramsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillLearningplansUnassignProgramsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function learningPlansSkillv1plansPlanIdprogramsWithHttpInfo($plan_id, $body = null)
    {
        // verify the required parameter 'plan_id' is set
        if ($plan_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $plan_id when calling learningPlansSkillv1plansPlanIdprograms');
        }
        // parse inputs
        $resourcePath = "/skill/v1/plans/[plan_id]/programs";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($plan_id !== null) {
            $resourcePath = str_replace(
                "{" . "plan_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($plan_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillLearningplansUnassignProgramsResponse',
                '/skill/v1/plans/[plan_id]/programs'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillLearningplansUnassignProgramsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillLearningplansUnassignProgramsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation learningPlansSkillv1plansplanIdprograms
     *
     * Assign programs to a learning plan.
     *
     * @param int $plan_id learning plan id (required)
     * @param \Swagger\Client\Model\SkillLearningplansAssignProgramsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillLearningplansAssignProgramsResponse
     */
    public function learningPlansSkillv1plansplanIdprograms($plan_id, $body = null)
    {
        list($response) = $this->learningPlansSkillv1plansplanIdprogramsWithHttpInfo($plan_id, $body);
        return $response;
    }

    /**
     * Operation learningPlansSkillv1plansplanIdprogramsWithHttpInfo
     *
     * Assign programs to a learning plan.
     *
     * @param int $plan_id learning plan id (required)
     * @param \Swagger\Client\Model\SkillLearningplansAssignProgramsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillLearningplansAssignProgramsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function learningPlansSkillv1plansplanIdprogramsWithHttpInfo($plan_id, $body = null)
    {
        // verify the required parameter 'plan_id' is set
        if ($plan_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $plan_id when calling learningPlansSkillv1plansplanIdprograms');
        }
        // parse inputs
        $resourcePath = "/skill/v1/plans/{plan_id}/programs";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($plan_id !== null) {
            $resourcePath = str_replace(
                "{" . "plan_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($plan_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillLearningplansAssignProgramsResponse',
                '/skill/v1/plans/{plan_id}/programs'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillLearningplansAssignProgramsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillLearningplansAssignProgramsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation learningPlansSkillv1plansplanIdskills
     *
     * Retrieves the list of Skills, that are assigned to given plan
     *
     * @param int $plan_id plan id (required)
     * @param string $sort_attr Sort by this field, default value - title. Options: title, id, description (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillLearningplansListSkillsResponse
     */
    public function learningPlansSkillv1plansplanIdskills($plan_id, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null)
    {
        list($response) = $this->learningPlansSkillv1plansplanIdskillsWithHttpInfo($plan_id, $sort_attr, $sort_dir, $page, $page_size, $lang, $get_total_count);
        return $response;
    }

    /**
     * Operation learningPlansSkillv1plansplanIdskillsWithHttpInfo
     *
     * Retrieves the list of Skills, that are assigned to given plan
     *
     * @param int $plan_id plan id (required)
     * @param string $sort_attr Sort by this field, default value - title. Options: title, id, description (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillLearningplansListSkillsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function learningPlansSkillv1plansplanIdskillsWithHttpInfo($plan_id, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null)
    {
        // verify the required parameter 'plan_id' is set
        if ($plan_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $plan_id when calling learningPlansSkillv1plansplanIdskills');
        }
        // parse inputs
        $resourcePath = "/skill/v1/plans/{plan_id}/skills";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // path params
        if ($plan_id !== null) {
            $resourcePath = str_replace(
                "{" . "plan_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($plan_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillLearningplansListSkillsResponse',
                '/skill/v1/plans/{plan_id}/skills'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillLearningplansListSkillsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillLearningplansListSkillsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation learningPlansSkillv1plansplanIdskills_0
     *
     * Assign skill to a Learning Plan.
     *
     * @param int $plan_id Learning plan id (required)
     * @param \Swagger\Client\Model\SkillLearningplansCreateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillLearningplansCreateResponse
     */
    public function learningPlansSkillv1plansplanIdskills_0($plan_id, $body = null)
    {
        list($response) = $this->learningPlansSkillv1plansplanIdskills_0WithHttpInfo($plan_id, $body);
        return $response;
    }

    /**
     * Operation learningPlansSkillv1plansplanIdskills_0WithHttpInfo
     *
     * Assign skill to a Learning Plan.
     *
     * @param int $plan_id Learning plan id (required)
     * @param \Swagger\Client\Model\SkillLearningplansCreateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillLearningplansCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function learningPlansSkillv1plansplanIdskills_0WithHttpInfo($plan_id, $body = null)
    {
        // verify the required parameter 'plan_id' is set
        if ($plan_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $plan_id when calling learningPlansSkillv1plansplanIdskills_0');
        }
        // parse inputs
        $resourcePath = "/skill/v1/plans/{plan_id}/skills";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($plan_id !== null) {
            $resourcePath = str_replace(
                "{" . "plan_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($plan_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillLearningplansCreateResponse',
                '/skill/v1/plans/{plan_id}/skills'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillLearningplansCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillLearningplansCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation learningPlansSkillv1plansplanIdskills_1
     *
     * De-assigns an existing skill(s) from given plan
     *
     * @param int $plan_id ID of a learning plan to delete (required)
     * @param \Swagger\Client\Model\SkillLearningplansDeleteSkillsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillLearningplansDeleteSkillsResponse
     */
    public function learningPlansSkillv1plansplanIdskills_1($plan_id, $body = null)
    {
        list($response) = $this->learningPlansSkillv1plansplanIdskills_1WithHttpInfo($plan_id, $body);
        return $response;
    }

    /**
     * Operation learningPlansSkillv1plansplanIdskills_1WithHttpInfo
     *
     * De-assigns an existing skill(s) from given plan
     *
     * @param int $plan_id ID of a learning plan to delete (required)
     * @param \Swagger\Client\Model\SkillLearningplansDeleteSkillsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillLearningplansDeleteSkillsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function learningPlansSkillv1plansplanIdskills_1WithHttpInfo($plan_id, $body = null)
    {
        // verify the required parameter 'plan_id' is set
        if ($plan_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $plan_id when calling learningPlansSkillv1plansplanIdskills_1');
        }
        // parse inputs
        $resourcePath = "/skill/v1/plans/{plan_id}/skills";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($plan_id !== null) {
            $resourcePath = str_replace(
                "{" . "plan_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($plan_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillLearningplansDeleteSkillsResponse',
                '/skill/v1/plans/{plan_id}/skills'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillLearningplansDeleteSkillsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillLearningplansDeleteSkillsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
