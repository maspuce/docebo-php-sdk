<?php
/**
 * DevobjectApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * DevobjectApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DevobjectApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return DevobjectApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation devobjectSkillv1devobjects
     *
     * Retrieves the list of Development Objects, filtered on input parameters
     *
     * @param string $name Search text in the development object name. Default empty (optional)
     * @param string $description Search text in the development object description. Default empty (optional)
     * @param string $sort_attr Sort by this field, default value - title. Options: title, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param int $rec_user User id of the user receiving the development activity (optional)
     * @param int $act_user user id of the user performing the development activity (mandatory is the name of the coach, the mentor or temporary manager in case of job rotation) (optional)
     * @param int[] $role_id Filter by role_id (optional)
     * @param string $type Filter returned by type - Mentoring(M), Coaching(C) or Job Rotatio(J) (optional)
     * @param string $start_date Start date of the development object (optional)
     * @param string $end_date End date of the development object (optional)
     * @param int $completed Filter returned by completed status. By default it is ignored (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillDevobjectListResponse
     */
    public function devobjectSkillv1devobjects($name = null, $description = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null, $rec_user = null, $act_user = null, $role_id = null, $type = null, $start_date = null, $end_date = null, $completed = null)
    {
        list($response) = $this->devobjectSkillv1devobjectsWithHttpInfo($name, $description, $sort_attr, $sort_dir, $page, $page_size, $lang, $get_total_count, $rec_user, $act_user, $role_id, $type, $start_date, $end_date, $completed);
        return $response;
    }

    /**
     * Operation devobjectSkillv1devobjectsWithHttpInfo
     *
     * Retrieves the list of Development Objects, filtered on input parameters
     *
     * @param string $name Search text in the development object name. Default empty (optional)
     * @param string $description Search text in the development object description. Default empty (optional)
     * @param string $sort_attr Sort by this field, default value - title. Options: title, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param int $rec_user User id of the user receiving the development activity (optional)
     * @param int $act_user user id of the user performing the development activity (mandatory is the name of the coach, the mentor or temporary manager in case of job rotation) (optional)
     * @param int[] $role_id Filter by role_id (optional)
     * @param string $type Filter returned by type - Mentoring(M), Coaching(C) or Job Rotatio(J) (optional)
     * @param string $start_date Start date of the development object (optional)
     * @param string $end_date End date of the development object (optional)
     * @param int $completed Filter returned by completed status. By default it is ignored (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillDevobjectListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function devobjectSkillv1devobjectsWithHttpInfo($name = null, $description = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null, $rec_user = null, $act_user = null, $role_id = null, $type = null, $start_date = null, $end_date = null, $completed = null)
    {
        // parse inputs
        $resourcePath = "/skill/v1/devobjects";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($description !== null) {
            $queryParams['description'] = $this->apiClient->getSerializer()->toQueryValue($description);
        }
        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // query params
        if ($rec_user !== null) {
            $queryParams['rec_user'] = $this->apiClient->getSerializer()->toQueryValue($rec_user);
        }
        // query params
        if ($act_user !== null) {
            $queryParams['act_user'] = $this->apiClient->getSerializer()->toQueryValue($act_user);
        }
        // query params
        if (is_array($role_id)) {
            $role_id = $this->apiClient->getSerializer()->serializeCollection($role_id, 'brackets', true);
        }
        if ($role_id !== null) {
            $queryParams['role_id'] = $this->apiClient->getSerializer()->toQueryValue($role_id);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = $this->apiClient->getSerializer()->toQueryValue($type);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = $this->apiClient->getSerializer()->toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = $this->apiClient->getSerializer()->toQueryValue($end_date);
        }
        // query params
        if ($completed !== null) {
            $queryParams['completed'] = $this->apiClient->getSerializer()->toQueryValue($completed);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillDevobjectListResponse',
                '/skill/v1/devobjects'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillDevobjectListResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillDevobjectListResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation devobjectSkillv1devobjects_0
     *
     * Creates a new Development Object
     *
     * @param \Swagger\Client\Model\SkillDevobjectCreateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillDevobjectCreateResponse
     */
    public function devobjectSkillv1devobjects_0($body = null)
    {
        list($response) = $this->devobjectSkillv1devobjects_0WithHttpInfo($body);
        return $response;
    }

    /**
     * Operation devobjectSkillv1devobjects_0WithHttpInfo
     *
     * Creates a new Development Object
     *
     * @param \Swagger\Client\Model\SkillDevobjectCreateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillDevobjectCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function devobjectSkillv1devobjects_0WithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/skill/v1/devobjects";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillDevobjectCreateResponse',
                '/skill/v1/devobjects'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillDevobjectCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillDevobjectCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation devobjectSkillv1devobjects_1
     *
     * Deletes one or many Development Objects
     *
     * @param \Swagger\Client\Model\SkillDevobjectDeleteMultipleSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillDevobjectDeleteMultipleResponse
     */
    public function devobjectSkillv1devobjects_1($body = null)
    {
        list($response) = $this->devobjectSkillv1devobjects_1WithHttpInfo($body);
        return $response;
    }

    /**
     * Operation devobjectSkillv1devobjects_1WithHttpInfo
     *
     * Deletes one or many Development Objects
     *
     * @param \Swagger\Client\Model\SkillDevobjectDeleteMultipleSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillDevobjectDeleteMultipleResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function devobjectSkillv1devobjects_1WithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/skill/v1/devobjects";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillDevobjectDeleteMultipleResponse',
                '/skill/v1/devobjects'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillDevobjectDeleteMultipleResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillDevobjectDeleteMultipleResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation devobjectSkillv1devobjectsobjectId
     *
     * Returns the details of a Development Object
     *
     * @param int $object_id ID of the development object (required)
     * @param string $lang Language code. Language used to process input parameters and provide the output. Default - Platform default language (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillDevobjectViewResponse
     */
    public function devobjectSkillv1devobjectsobjectId($object_id, $lang = null)
    {
        list($response) = $this->devobjectSkillv1devobjectsobjectIdWithHttpInfo($object_id, $lang);
        return $response;
    }

    /**
     * Operation devobjectSkillv1devobjectsobjectIdWithHttpInfo
     *
     * Returns the details of a Development Object
     *
     * @param int $object_id ID of the development object (required)
     * @param string $lang Language code. Language used to process input parameters and provide the output. Default - Platform default language (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillDevobjectViewResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function devobjectSkillv1devobjectsobjectIdWithHttpInfo($object_id, $lang = null)
    {
        // verify the required parameter 'object_id' is set
        if ($object_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $object_id when calling devobjectSkillv1devobjectsobjectId');
        }
        // parse inputs
        $resourcePath = "/skill/v1/devobjects/{object_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // path params
        if ($object_id !== null) {
            $resourcePath = str_replace(
                "{" . "object_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($object_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillDevobjectViewResponse',
                '/skill/v1/devobjects/{object_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillDevobjectViewResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillDevobjectViewResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation devobjectSkillv1devobjectsobjectId_0
     *
     * Updates a Development Object
     *
     * @param int $object_id ID of the development object (required)
     * @param \Swagger\Client\Model\SkillDevobjectUpdateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillDevobjectUpdateResponse
     */
    public function devobjectSkillv1devobjectsobjectId_0($object_id, $body = null)
    {
        list($response) = $this->devobjectSkillv1devobjectsobjectId_0WithHttpInfo($object_id, $body);
        return $response;
    }

    /**
     * Operation devobjectSkillv1devobjectsobjectId_0WithHttpInfo
     *
     * Updates a Development Object
     *
     * @param int $object_id ID of the development object (required)
     * @param \Swagger\Client\Model\SkillDevobjectUpdateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillDevobjectUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function devobjectSkillv1devobjectsobjectId_0WithHttpInfo($object_id, $body = null)
    {
        // verify the required parameter 'object_id' is set
        if ($object_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $object_id when calling devobjectSkillv1devobjectsobjectId_0');
        }
        // parse inputs
        $resourcePath = "/skill/v1/devobjects/{object_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($object_id !== null) {
            $resourcePath = str_replace(
                "{" . "object_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($object_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillDevobjectUpdateResponse',
                '/skill/v1/devobjects/{object_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillDevobjectUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillDevobjectUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation devobjectSkillv1devobjectsobjectId_1
     *
     * Deletes one or many Development Objects
     *
     * @param int $object_id ID of the development object to be deleted (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillDevobjectDeleteResponse
     */
    public function devobjectSkillv1devobjectsobjectId_1($object_id)
    {
        list($response) = $this->devobjectSkillv1devobjectsobjectId_1WithHttpInfo($object_id);
        return $response;
    }

    /**
     * Operation devobjectSkillv1devobjectsobjectId_1WithHttpInfo
     *
     * Deletes one or many Development Objects
     *
     * @param int $object_id ID of the development object to be deleted (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillDevobjectDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function devobjectSkillv1devobjectsobjectId_1WithHttpInfo($object_id)
    {
        // verify the required parameter 'object_id' is set
        if ($object_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $object_id when calling devobjectSkillv1devobjectsobjectId_1');
        }
        // parse inputs
        $resourcePath = "/skill/v1/devobjects/{object_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($object_id !== null) {
            $resourcePath = str_replace(
                "{" . "object_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($object_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillDevobjectDeleteResponse',
                '/skill/v1/devobjects/{object_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillDevobjectDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillDevobjectDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation devobjectSkillv1devobjectsobjectIdskills
     *
     * Retrieves the list of Skills that are assigned to a Development Object
     *
     * @param int $object_id Development object id (required)
     * @param string $sort_attr Sort by this field, default value - title. Options: title, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillDevobjectListSkillsResponse
     */
    public function devobjectSkillv1devobjectsobjectIdskills($object_id, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null)
    {
        list($response) = $this->devobjectSkillv1devobjectsobjectIdskillsWithHttpInfo($object_id, $sort_attr, $sort_dir, $page, $page_size, $lang, $get_total_count);
        return $response;
    }

    /**
     * Operation devobjectSkillv1devobjectsobjectIdskillsWithHttpInfo
     *
     * Retrieves the list of Skills that are assigned to a Development Object
     *
     * @param int $object_id Development object id (required)
     * @param string $sort_attr Sort by this field, default value - title. Options: title, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillDevobjectListSkillsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function devobjectSkillv1devobjectsobjectIdskillsWithHttpInfo($object_id, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null)
    {
        // verify the required parameter 'object_id' is set
        if ($object_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $object_id when calling devobjectSkillv1devobjectsobjectIdskills');
        }
        // parse inputs
        $resourcePath = "/skill/v1/devobjects/{object_id}/skills";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // path params
        if ($object_id !== null) {
            $resourcePath = str_replace(
                "{" . "object_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($object_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillDevobjectListSkillsResponse',
                '/skill/v1/devobjects/{object_id}/skills'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillDevobjectListSkillsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillDevobjectListSkillsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation devobjectSkillv1devobjectsobjectIdskills_0
     *
     * Assigns Skill(s) to a Development Pbject
     *
     * @param int $object_id Development object id (required)
     * @param \Swagger\Client\Model\SkillDevobjectAssignSkillsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillDevobjectAssignSkillsResponse
     */
    public function devobjectSkillv1devobjectsobjectIdskills_0($object_id, $body = null)
    {
        list($response) = $this->devobjectSkillv1devobjectsobjectIdskills_0WithHttpInfo($object_id, $body);
        return $response;
    }

    /**
     * Operation devobjectSkillv1devobjectsobjectIdskills_0WithHttpInfo
     *
     * Assigns Skill(s) to a Development Pbject
     *
     * @param int $object_id Development object id (required)
     * @param \Swagger\Client\Model\SkillDevobjectAssignSkillsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillDevobjectAssignSkillsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function devobjectSkillv1devobjectsobjectIdskills_0WithHttpInfo($object_id, $body = null)
    {
        // verify the required parameter 'object_id' is set
        if ($object_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $object_id when calling devobjectSkillv1devobjectsobjectIdskills_0');
        }
        // parse inputs
        $resourcePath = "/skill/v1/devobjects/{object_id}/skills";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($object_id !== null) {
            $resourcePath = str_replace(
                "{" . "object_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($object_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillDevobjectAssignSkillsResponse',
                '/skill/v1/devobjects/{object_id}/skills'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillDevobjectAssignSkillsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillDevobjectAssignSkillsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation devobjectSkillv1devobjectsobjectIdskills_1
     *
     * Unassigns a skill(s) from a Development Object
     *
     * @param int $object_id ID of a development object to unassign (required)
     * @param \Swagger\Client\Model\SkillDevobjectUnassignSkillsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillDevobjectUnassignSkillsResponse
     */
    public function devobjectSkillv1devobjectsobjectIdskills_1($object_id, $body = null)
    {
        list($response) = $this->devobjectSkillv1devobjectsobjectIdskills_1WithHttpInfo($object_id, $body);
        return $response;
    }

    /**
     * Operation devobjectSkillv1devobjectsobjectIdskills_1WithHttpInfo
     *
     * Unassigns a skill(s) from a Development Object
     *
     * @param int $object_id ID of a development object to unassign (required)
     * @param \Swagger\Client\Model\SkillDevobjectUnassignSkillsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillDevobjectUnassignSkillsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function devobjectSkillv1devobjectsobjectIdskills_1WithHttpInfo($object_id, $body = null)
    {
        // verify the required parameter 'object_id' is set
        if ($object_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $object_id when calling devobjectSkillv1devobjectsobjectIdskills_1');
        }
        // parse inputs
        $resourcePath = "/skill/v1/devobjects/{object_id}/skills";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($object_id !== null) {
            $resourcePath = str_replace(
                "{" . "object_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($object_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillDevobjectUnassignSkillsResponse',
                '/skill/v1/devobjects/{object_id}/skills'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillDevobjectUnassignSkillsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillDevobjectUnassignSkillsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
