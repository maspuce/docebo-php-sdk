<?php
/**
 * ProgramApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * ProgramApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProgramApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return ProgramApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation programSkillv1programdevelopmentProgramId
     *
     * Returns the details of a development program
     *
     * @param int $development_program_id ID of the program (required)
     * @param string $lang Language code. Language used to process input parameters and provide the output. Default - Platform default language (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillProgramViewResponse
     */
    public function programSkillv1programdevelopmentProgramId($development_program_id, $lang = null)
    {
        list($response) = $this->programSkillv1programdevelopmentProgramIdWithHttpInfo($development_program_id, $lang);
        return $response;
    }

    /**
     * Operation programSkillv1programdevelopmentProgramIdWithHttpInfo
     *
     * Returns the details of a development program
     *
     * @param int $development_program_id ID of the program (required)
     * @param string $lang Language code. Language used to process input parameters and provide the output. Default - Platform default language (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillProgramViewResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function programSkillv1programdevelopmentProgramIdWithHttpInfo($development_program_id, $lang = null)
    {
        // verify the required parameter 'development_program_id' is set
        if ($development_program_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $development_program_id when calling programSkillv1programdevelopmentProgramId');
        }
        // parse inputs
        $resourcePath = "/skill/v1/program/{development_program_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // path params
        if ($development_program_id !== null) {
            $resourcePath = str_replace(
                "{" . "development_program_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($development_program_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillProgramViewResponse',
                '/skill/v1/program/{development_program_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillProgramViewResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillProgramViewResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation programSkillv1programdevelopmentProgramIditem
     *
     * Returns the assigned items to a development program
     *
     * @param int $development_program_id ID of the program (required)
     * @param string $item Type of the item. Possible values courses|plans|assets|plans|playlists|channels|los (required)
     * @param string $lang Language code. Language used to process input parameters and provide the output. Default - Platform default language (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillProgramViewItemsResponse
     */
    public function programSkillv1programdevelopmentProgramIditem($development_program_id, $item, $lang = null, $page = null, $page_size = null, $get_total_count = null)
    {
        list($response) = $this->programSkillv1programdevelopmentProgramIditemWithHttpInfo($development_program_id, $item, $lang, $page, $page_size, $get_total_count);
        return $response;
    }

    /**
     * Operation programSkillv1programdevelopmentProgramIditemWithHttpInfo
     *
     * Returns the assigned items to a development program
     *
     * @param int $development_program_id ID of the program (required)
     * @param string $item Type of the item. Possible values courses|plans|assets|plans|playlists|channels|los (required)
     * @param string $lang Language code. Language used to process input parameters and provide the output. Default - Platform default language (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillProgramViewItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function programSkillv1programdevelopmentProgramIditemWithHttpInfo($development_program_id, $item, $lang = null, $page = null, $page_size = null, $get_total_count = null)
    {
        // verify the required parameter 'development_program_id' is set
        if ($development_program_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $development_program_id when calling programSkillv1programdevelopmentProgramIditem');
        }
        // verify the required parameter 'item' is set
        if ($item === null) {
            throw new \InvalidArgumentException('Missing the required parameter $item when calling programSkillv1programdevelopmentProgramIditem');
        }
        // parse inputs
        $resourcePath = "/skill/v1/program/{development_program_id}/{item}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // path params
        if ($development_program_id !== null) {
            $resourcePath = str_replace(
                "{" . "development_program_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($development_program_id),
                $resourcePath
            );
        }
        // path params
        if ($item !== null) {
            $resourcePath = str_replace(
                "{" . "item" . "}",
                $this->apiClient->getSerializer()->toPathValue($item),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillProgramViewItemsResponse',
                '/skill/v1/program/{development_program_id}/{item}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillProgramViewItemsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillProgramViewItemsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation programSkillv1programdevelopmentProgramIdroles
     *
     * Returns the assigned roles to a development program
     *
     * @param int $development_program_id ID of the program (required)
     * @param string $lang Language code. Language used to process input parameters and provide the output. Default - Platform default language (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillProgramViewRolesResponse
     */
    public function programSkillv1programdevelopmentProgramIdroles($development_program_id, $lang = null, $page = null, $page_size = null, $get_total_count = null)
    {
        list($response) = $this->programSkillv1programdevelopmentProgramIdrolesWithHttpInfo($development_program_id, $lang, $page, $page_size, $get_total_count);
        return $response;
    }

    /**
     * Operation programSkillv1programdevelopmentProgramIdrolesWithHttpInfo
     *
     * Returns the assigned roles to a development program
     *
     * @param int $development_program_id ID of the program (required)
     * @param string $lang Language code. Language used to process input parameters and provide the output. Default - Platform default language (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillProgramViewRolesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function programSkillv1programdevelopmentProgramIdrolesWithHttpInfo($development_program_id, $lang = null, $page = null, $page_size = null, $get_total_count = null)
    {
        // verify the required parameter 'development_program_id' is set
        if ($development_program_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $development_program_id when calling programSkillv1programdevelopmentProgramIdroles');
        }
        // parse inputs
        $resourcePath = "/skill/v1/program/{development_program_id}/roles";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // path params
        if ($development_program_id !== null) {
            $resourcePath = str_replace(
                "{" . "development_program_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($development_program_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillProgramViewRolesResponse',
                '/skill/v1/program/{development_program_id}/roles'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillProgramViewRolesResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillProgramViewRolesResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation programSkillv1programdevelopmentProgramIdusers
     *
     * Returns the assigned users to a development program
     *
     * @param int $development_program_id ID of the program (required)
     * @param string $lang Language code. Language used to process input parameters and provide the output. Default - Platform default language (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillProgramViewUsersResponse
     */
    public function programSkillv1programdevelopmentProgramIdusers($development_program_id, $lang = null, $page = null, $page_size = null, $get_total_count = null)
    {
        list($response) = $this->programSkillv1programdevelopmentProgramIdusersWithHttpInfo($development_program_id, $lang, $page, $page_size, $get_total_count);
        return $response;
    }

    /**
     * Operation programSkillv1programdevelopmentProgramIdusersWithHttpInfo
     *
     * Returns the assigned users to a development program
     *
     * @param int $development_program_id ID of the program (required)
     * @param string $lang Language code. Language used to process input parameters and provide the output. Default - Platform default language (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillProgramViewUsersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function programSkillv1programdevelopmentProgramIdusersWithHttpInfo($development_program_id, $lang = null, $page = null, $page_size = null, $get_total_count = null)
    {
        // verify the required parameter 'development_program_id' is set
        if ($development_program_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $development_program_id when calling programSkillv1programdevelopmentProgramIdusers');
        }
        // parse inputs
        $resourcePath = "/skill/v1/program/{development_program_id}/users";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // path params
        if ($development_program_id !== null) {
            $resourcePath = str_replace(
                "{" . "development_program_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($development_program_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillProgramViewUsersResponse',
                '/skill/v1/program/{development_program_id}/users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillProgramViewUsersResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillProgramViewUsersResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation programSkillv1programs
     *
     * Retrieves all development programs, filtered on input parameters
     *
     * @param int $role_id Search role in the development program. (optional)
     * @param int $planning_period Search the planning period in the development program. (optional)
     * @param int $user_id Search the user in the development program. (optional)
     * @param int $status Search the development program by status. Possible values 0-Inactive; 1-Active; (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillProgramListResponse
     */
    public function programSkillv1programs($role_id = null, $planning_period = null, $user_id = null, $status = null, $page = null, $page_size = null, $lang = null, $get_total_count = null)
    {
        list($response) = $this->programSkillv1programsWithHttpInfo($role_id, $planning_period, $user_id, $status, $page, $page_size, $lang, $get_total_count);
        return $response;
    }

    /**
     * Operation programSkillv1programsWithHttpInfo
     *
     * Retrieves all development programs, filtered on input parameters
     *
     * @param int $role_id Search role in the development program. (optional)
     * @param int $planning_period Search the planning period in the development program. (optional)
     * @param int $user_id Search the user in the development program. (optional)
     * @param int $status Search the development program by status. Possible values 0-Inactive; 1-Active; (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillProgramListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function programSkillv1programsWithHttpInfo($role_id = null, $planning_period = null, $user_id = null, $status = null, $page = null, $page_size = null, $lang = null, $get_total_count = null)
    {
        // parse inputs
        $resourcePath = "/skill/v1/programs";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($role_id !== null) {
            $queryParams['role_id'] = $this->apiClient->getSerializer()->toQueryValue($role_id);
        }
        // query params
        if ($planning_period !== null) {
            $queryParams['planning_period'] = $this->apiClient->getSerializer()->toQueryValue($planning_period);
        }
        // query params
        if ($user_id !== null) {
            $queryParams['user_id'] = $this->apiClient->getSerializer()->toQueryValue($user_id);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillProgramListResponse',
                '/skill/v1/programs'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillProgramListResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillProgramListResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation programSkillv1programs_0
     *
     * Creates a new Development Program
     *
     * @param \Swagger\Client\Model\SkillProgramCreateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillProgramCreateResponse
     */
    public function programSkillv1programs_0($body = null)
    {
        list($response) = $this->programSkillv1programs_0WithHttpInfo($body);
        return $response;
    }

    /**
     * Operation programSkillv1programs_0WithHttpInfo
     *
     * Creates a new Development Program
     *
     * @param \Swagger\Client\Model\SkillProgramCreateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillProgramCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function programSkillv1programs_0WithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/skill/v1/programs";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillProgramCreateResponse',
                '/skill/v1/programs'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillProgramCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillProgramCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation programSkillv1programs_1
     *
     * Deletes one or many Development programs
     *
     * @param \Swagger\Client\Model\SkillProgramDeleteSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillProgramDeleteResponse
     */
    public function programSkillv1programs_1($body = null)
    {
        list($response) = $this->programSkillv1programs_1WithHttpInfo($body);
        return $response;
    }

    /**
     * Operation programSkillv1programs_1WithHttpInfo
     *
     * Deletes one or many Development programs
     *
     * @param \Swagger\Client\Model\SkillProgramDeleteSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillProgramDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function programSkillv1programs_1WithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/skill/v1/programs";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillProgramDeleteResponse',
                '/skill/v1/programs'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillProgramDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillProgramDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation programSkillv1programsdevelopmentProgramId
     *
     * Update a Development Program
     *
     * @param \Swagger\Client\Model\SkillProgramUpdateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillProgramUpdateResponse
     */
    public function programSkillv1programsdevelopmentProgramId($body = null)
    {
        list($response) = $this->programSkillv1programsdevelopmentProgramIdWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation programSkillv1programsdevelopmentProgramIdWithHttpInfo
     *
     * Update a Development Program
     *
     * @param \Swagger\Client\Model\SkillProgramUpdateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillProgramUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function programSkillv1programsdevelopmentProgramIdWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/skill/v1/programs/{development_program_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillProgramUpdateResponse',
                '/skill/v1/programs/{development_program_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillProgramUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillProgramUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation programSkillv1programsdevelopmentProgramId_0
     *
     * Deletes one Development program
     *
     * @param int $development_program_id ID of the program (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillProgramDeleteOneResponse
     */
    public function programSkillv1programsdevelopmentProgramId_0($development_program_id)
    {
        list($response) = $this->programSkillv1programsdevelopmentProgramId_0WithHttpInfo($development_program_id);
        return $response;
    }

    /**
     * Operation programSkillv1programsdevelopmentProgramId_0WithHttpInfo
     *
     * Deletes one Development program
     *
     * @param int $development_program_id ID of the program (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillProgramDeleteOneResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function programSkillv1programsdevelopmentProgramId_0WithHttpInfo($development_program_id)
    {
        // verify the required parameter 'development_program_id' is set
        if ($development_program_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $development_program_id when calling programSkillv1programsdevelopmentProgramId_0');
        }
        // parse inputs
        $resourcePath = "/skill/v1/programs/{development_program_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($development_program_id !== null) {
            $resourcePath = str_replace(
                "{" . "development_program_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($development_program_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillProgramDeleteOneResponse',
                '/skill/v1/programs/{development_program_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillProgramDeleteOneResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillProgramDeleteOneResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation programSkillv1programsdevelopmentProgramIdusers
     *
     * Assign users to a development program
     *
     * @param int $development_program_id ID of the program (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillProgramAssignUsersResponse
     */
    public function programSkillv1programsdevelopmentProgramIdusers($development_program_id)
    {
        list($response) = $this->programSkillv1programsdevelopmentProgramIdusersWithHttpInfo($development_program_id);
        return $response;
    }

    /**
     * Operation programSkillv1programsdevelopmentProgramIdusersWithHttpInfo
     *
     * Assign users to a development program
     *
     * @param int $development_program_id ID of the program (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillProgramAssignUsersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function programSkillv1programsdevelopmentProgramIdusersWithHttpInfo($development_program_id)
    {
        // verify the required parameter 'development_program_id' is set
        if ($development_program_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $development_program_id when calling programSkillv1programsdevelopmentProgramIdusers');
        }
        // parse inputs
        $resourcePath = "/skill/v1/programs/{development_program_id}/users";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($development_program_id !== null) {
            $resourcePath = str_replace(
                "{" . "development_program_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($development_program_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillProgramAssignUsersResponse',
                '/skill/v1/programs/{development_program_id}/users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillProgramAssignUsersResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillProgramAssignUsersResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation programSkillv1programsdevelopmentProgramIdusers_0
     *
     * Unassign users from a development program
     *
     * @param int $development_program_id ID of the program (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillProgramUnassignUsersResponse
     */
    public function programSkillv1programsdevelopmentProgramIdusers_0($development_program_id)
    {
        list($response) = $this->programSkillv1programsdevelopmentProgramIdusers_0WithHttpInfo($development_program_id);
        return $response;
    }

    /**
     * Operation programSkillv1programsdevelopmentProgramIdusers_0WithHttpInfo
     *
     * Unassign users from a development program
     *
     * @param int $development_program_id ID of the program (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillProgramUnassignUsersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function programSkillv1programsdevelopmentProgramIdusers_0WithHttpInfo($development_program_id)
    {
        // verify the required parameter 'development_program_id' is set
        if ($development_program_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $development_program_id when calling programSkillv1programsdevelopmentProgramIdusers_0');
        }
        // parse inputs
        $resourcePath = "/skill/v1/programs/{development_program_id}/users";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($development_program_id !== null) {
            $resourcePath = str_replace(
                "{" . "development_program_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($development_program_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillProgramUnassignUsersResponse',
                '/skill/v1/programs/{development_program_id}/users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillProgramUnassignUsersResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillProgramUnassignUsersResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
