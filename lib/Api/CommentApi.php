<?php
/**
 * CommentApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * CommentApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CommentApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return CommentApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation commentSharev1comments
     *
     * List Comments
     *
     * @param string $search_text Search text in the comment title. Default empty string (optional)
     * @param string $sort_attr Sort by this field, default value - id. Options: title, date, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200, if value is -1 -&amp;gt; all items are displayed (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param int $id_asset Filter returned Comments by asset (optional)
     * @param string $show Filter returned comments by this options: &amp;quot;new&amp;quot; - New comments, &amp;quot;best&amp;quot; - New Best replies, &amp;quot;open&amp;quot; - Open Comments, &amp;quot;my_questions&amp;quot; - My Comments, &amp;quot;my_answers&amp;quot; - My Replies. Default - all (optional)
     * @param int[] $type Filter returned comments by type. Options: [0] - direct comments, [1] - linked to an asset/course. Default - both (optional)
     * @param int $channel_id Filter returned comments by channel. Default: All channels (optional)
     * @param int $type_question Filter returned comments or questions or both by type. Options: 1 - questions, 2 - comment, 3 - both. Default - 2 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ShareCommentListResponse
     */
    public function commentSharev1comments($search_text = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null, $id_asset = null, $show = null, $type = null, $channel_id = null, $type_question = null)
    {
        list($response) = $this->commentSharev1commentsWithHttpInfo($search_text, $sort_attr, $sort_dir, $page, $page_size, $lang, $get_total_count, $id_asset, $show, $type, $channel_id, $type_question);
        return $response;
    }

    /**
     * Operation commentSharev1commentsWithHttpInfo
     *
     * List Comments
     *
     * @param string $search_text Search text in the comment title. Default empty string (optional)
     * @param string $sort_attr Sort by this field, default value - id. Options: title, date, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200, if value is -1 -&amp;gt; all items are displayed (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param int $id_asset Filter returned Comments by asset (optional)
     * @param string $show Filter returned comments by this options: &amp;quot;new&amp;quot; - New comments, &amp;quot;best&amp;quot; - New Best replies, &amp;quot;open&amp;quot; - Open Comments, &amp;quot;my_questions&amp;quot; - My Comments, &amp;quot;my_answers&amp;quot; - My Replies. Default - all (optional)
     * @param int[] $type Filter returned comments by type. Options: [0] - direct comments, [1] - linked to an asset/course. Default - both (optional)
     * @param int $channel_id Filter returned comments by channel. Default: All channels (optional)
     * @param int $type_question Filter returned comments or questions or both by type. Options: 1 - questions, 2 - comment, 3 - both. Default - 2 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ShareCommentListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function commentSharev1commentsWithHttpInfo($search_text = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null, $id_asset = null, $show = null, $type = null, $channel_id = null, $type_question = null)
    {
        // parse inputs
        $resourcePath = "/share/v1/comments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($search_text !== null) {
            $queryParams['search_text'] = $this->apiClient->getSerializer()->toQueryValue($search_text);
        }
        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // query params
        if ($id_asset !== null) {
            $queryParams['id_asset'] = $this->apiClient->getSerializer()->toQueryValue($id_asset);
        }
        // query params
        if ($show !== null) {
            $queryParams['show'] = $this->apiClient->getSerializer()->toQueryValue($show);
        }
        // query params
        if (is_array($type)) {
            $type = $this->apiClient->getSerializer()->serializeCollection($type, 'brackets', true);
        }
        if ($type !== null) {
            $queryParams['type'] = $this->apiClient->getSerializer()->toQueryValue($type);
        }
        // query params
        if ($channel_id !== null) {
            $queryParams['channel_id'] = $this->apiClient->getSerializer()->toQueryValue($channel_id);
        }
        // query params
        if ($type_question !== null) {
            $queryParams['type_question'] = $this->apiClient->getSerializer()->toQueryValue($type_question);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ShareCommentListResponse',
                '/share/v1/comments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ShareCommentListResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ShareCommentListResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation commentSharev1comments_0
     *
     * Creates a new comment
     *
     * @param \Swagger\Client\Model\ShareCommentCreateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ShareCommentCreateResponse
     */
    public function commentSharev1comments_0($body = null)
    {
        list($response) = $this->commentSharev1comments_0WithHttpInfo($body);
        return $response;
    }

    /**
     * Operation commentSharev1comments_0WithHttpInfo
     *
     * Creates a new comment
     *
     * @param \Swagger\Client\Model\ShareCommentCreateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ShareCommentCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function commentSharev1comments_0WithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/share/v1/comments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ShareCommentCreateResponse',
                '/share/v1/comments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ShareCommentCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ShareCommentCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation commentSharev1commentsidComment
     *
     * Return a complete thread for comment
     *
     * @param int $id_comment Required ID of comment to fetch (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ShareCommentViewResponse
     */
    public function commentSharev1commentsidComment($id_comment)
    {
        list($response) = $this->commentSharev1commentsidCommentWithHttpInfo($id_comment);
        return $response;
    }

    /**
     * Operation commentSharev1commentsidCommentWithHttpInfo
     *
     * Return a complete thread for comment
     *
     * @param int $id_comment Required ID of comment to fetch (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ShareCommentViewResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function commentSharev1commentsidCommentWithHttpInfo($id_comment)
    {
        // verify the required parameter 'id_comment' is set
        if ($id_comment === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_comment when calling commentSharev1commentsidComment');
        }
        // parse inputs
        $resourcePath = "/share/v1/comments/{id_comment}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id_comment !== null) {
            $resourcePath = str_replace(
                "{" . "id_comment" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_comment),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ShareCommentViewResponse',
                '/share/v1/comments/{id_comment}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ShareCommentViewResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ShareCommentViewResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation commentSharev1commentsidComment_0
     *
     * Update comment
     *
     * @param int $id_comment ID of the comment (required)
     * @param \Swagger\Client\Model\ShareCommentUpdateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ShareCommentUpdateResponse
     */
    public function commentSharev1commentsidComment_0($id_comment, $body = null)
    {
        list($response) = $this->commentSharev1commentsidComment_0WithHttpInfo($id_comment, $body);
        return $response;
    }

    /**
     * Operation commentSharev1commentsidComment_0WithHttpInfo
     *
     * Update comment
     *
     * @param int $id_comment ID of the comment (required)
     * @param \Swagger\Client\Model\ShareCommentUpdateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ShareCommentUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function commentSharev1commentsidComment_0WithHttpInfo($id_comment, $body = null)
    {
        // verify the required parameter 'id_comment' is set
        if ($id_comment === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_comment when calling commentSharev1commentsidComment_0');
        }
        // parse inputs
        $resourcePath = "/share/v1/comments/{id_comment}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id_comment !== null) {
            $resourcePath = str_replace(
                "{" . "id_comment" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_comment),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ShareCommentUpdateResponse',
                '/share/v1/comments/{id_comment}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ShareCommentUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ShareCommentUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation commentSharev1commentsidComment_1
     *
     * Delete comment
     *
     * @param int $id_comment ID of the comment (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ShareCommentDeleteResponse
     */
    public function commentSharev1commentsidComment_1($id_comment)
    {
        list($response) = $this->commentSharev1commentsidComment_1WithHttpInfo($id_comment);
        return $response;
    }

    /**
     * Operation commentSharev1commentsidComment_1WithHttpInfo
     *
     * Delete comment
     *
     * @param int $id_comment ID of the comment (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ShareCommentDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function commentSharev1commentsidComment_1WithHttpInfo($id_comment)
    {
        // verify the required parameter 'id_comment' is set
        if ($id_comment === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_comment when calling commentSharev1commentsidComment_1');
        }
        // parse inputs
        $resourcePath = "/share/v1/comments/{id_comment}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id_comment !== null) {
            $resourcePath = str_replace(
                "{" . "id_comment" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_comment),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ShareCommentDeleteResponse',
                '/share/v1/comments/{id_comment}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ShareCommentDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ShareCommentDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation commentSharev1commentsidCommentanswer
     *
     * Create reply
     *
     * @param int $id_comment ID of the comment (required)
     * @param \Swagger\Client\Model\ShareCommentCreateReplySchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ShareCommentCreateReplyResponse
     */
    public function commentSharev1commentsidCommentanswer($id_comment, $body = null)
    {
        list($response) = $this->commentSharev1commentsidCommentanswerWithHttpInfo($id_comment, $body);
        return $response;
    }

    /**
     * Operation commentSharev1commentsidCommentanswerWithHttpInfo
     *
     * Create reply
     *
     * @param int $id_comment ID of the comment (required)
     * @param \Swagger\Client\Model\ShareCommentCreateReplySchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ShareCommentCreateReplyResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function commentSharev1commentsidCommentanswerWithHttpInfo($id_comment, $body = null)
    {
        // verify the required parameter 'id_comment' is set
        if ($id_comment === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_comment when calling commentSharev1commentsidCommentanswer');
        }
        // parse inputs
        $resourcePath = "/share/v1/comments/{id_comment}/answer";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id_comment !== null) {
            $resourcePath = str_replace(
                "{" . "id_comment" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_comment),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ShareCommentCreateReplyResponse',
                '/share/v1/comments/{id_comment}/answer'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ShareCommentCreateReplyResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ShareCommentCreateReplyResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation commentSharev1commentsidCommentevaluate
     *
     * Like comment
     *
     * @param int $id_comment ID of the comment (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ShareCommentLikeResponse
     */
    public function commentSharev1commentsidCommentevaluate($id_comment)
    {
        list($response) = $this->commentSharev1commentsidCommentevaluateWithHttpInfo($id_comment);
        return $response;
    }

    /**
     * Operation commentSharev1commentsidCommentevaluateWithHttpInfo
     *
     * Like comment
     *
     * @param int $id_comment ID of the comment (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ShareCommentLikeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function commentSharev1commentsidCommentevaluateWithHttpInfo($id_comment)
    {
        // verify the required parameter 'id_comment' is set
        if ($id_comment === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_comment when calling commentSharev1commentsidCommentevaluate');
        }
        // parse inputs
        $resourcePath = "/share/v1/comments/{id_comment}/evaluate";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id_comment !== null) {
            $resourcePath = str_replace(
                "{" . "id_comment" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_comment),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ShareCommentLikeResponse',
                '/share/v1/comments/{id_comment}/evaluate'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ShareCommentLikeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ShareCommentLikeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation commentSharev1commentsidCommentevaluate_0
     *
     * Dislike comment
     *
     * @param int $id_comment ID of the comment (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ShareCommentDislikeResponse
     */
    public function commentSharev1commentsidCommentevaluate_0($id_comment)
    {
        list($response) = $this->commentSharev1commentsidCommentevaluate_0WithHttpInfo($id_comment);
        return $response;
    }

    /**
     * Operation commentSharev1commentsidCommentevaluate_0WithHttpInfo
     *
     * Dislike comment
     *
     * @param int $id_comment ID of the comment (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ShareCommentDislikeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function commentSharev1commentsidCommentevaluate_0WithHttpInfo($id_comment)
    {
        // verify the required parameter 'id_comment' is set
        if ($id_comment === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_comment when calling commentSharev1commentsidCommentevaluate_0');
        }
        // parse inputs
        $resourcePath = "/share/v1/comments/{id_comment}/evaluate";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id_comment !== null) {
            $resourcePath = str_replace(
                "{" . "id_comment" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_comment),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ShareCommentDislikeResponse',
                '/share/v1/comments/{id_comment}/evaluate'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ShareCommentDislikeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ShareCommentDislikeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
