<?php
/**
 * ReportsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * ReportsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReportsApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return ReportsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation reportsSkillv1reportsbench
     *
     * Retrieves the list of \"Bench candidates\" for a Role
     *
     * @param int $role_id The role where has to be calculated the bench strength (required)
     * @param int[] $branch_ids Employees members of what branches perform the search (optional)
     * @param int $include_descendant Should be included the descendants of the branches. Default - 0 (optional)
     * @param string $consider_evaluation Options: S, M, both_and, both_or, default&#x3D;M (optional)
     * @param int $max The max percentage of role&#39;s skills known, default 100 (optional)
     * @param int $min The min percentage of role&#39;s skills known, default 100 (optional)
     * @param int $threshold_days Use only evaluations more recent than number of days for the calculation (default&#x3D; all) (optional)
     * @param string $detail_type Options: &amp;quot;bench_strength&amp;quot;, &amp;quot;manager_missing&amp;quot;,  Default: bench_strength (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillReportsRoleBenchStrengthDetailResponse
     */
    public function reportsSkillv1reportsbench($role_id, $branch_ids = null, $include_descendant = null, $consider_evaluation = null, $max = null, $min = null, $threshold_days = null, $detail_type = null)
    {
        list($response) = $this->reportsSkillv1reportsbenchWithHttpInfo($role_id, $branch_ids, $include_descendant, $consider_evaluation, $max, $min, $threshold_days, $detail_type);
        return $response;
    }

    /**
     * Operation reportsSkillv1reportsbenchWithHttpInfo
     *
     * Retrieves the list of \"Bench candidates\" for a Role
     *
     * @param int $role_id The role where has to be calculated the bench strength (required)
     * @param int[] $branch_ids Employees members of what branches perform the search (optional)
     * @param int $include_descendant Should be included the descendants of the branches. Default - 0 (optional)
     * @param string $consider_evaluation Options: S, M, both_and, both_or, default&#x3D;M (optional)
     * @param int $max The max percentage of role&#39;s skills known, default 100 (optional)
     * @param int $min The min percentage of role&#39;s skills known, default 100 (optional)
     * @param int $threshold_days Use only evaluations more recent than number of days for the calculation (default&#x3D; all) (optional)
     * @param string $detail_type Options: &amp;quot;bench_strength&amp;quot;, &amp;quot;manager_missing&amp;quot;,  Default: bench_strength (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillReportsRoleBenchStrengthDetailResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsSkillv1reportsbenchWithHttpInfo($role_id, $branch_ids = null, $include_descendant = null, $consider_evaluation = null, $max = null, $min = null, $threshold_days = null, $detail_type = null)
    {
        // verify the required parameter 'role_id' is set
        if ($role_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $role_id when calling reportsSkillv1reportsbench');
        }
        // parse inputs
        $resourcePath = "/skill/v1/reports/bench";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($role_id !== null) {
            $queryParams['role_id'] = $this->apiClient->getSerializer()->toQueryValue($role_id);
        }
        // query params
        if (is_array($branch_ids)) {
            $branch_ids = $this->apiClient->getSerializer()->serializeCollection($branch_ids, 'brackets', true);
        }
        if ($branch_ids !== null) {
            $queryParams['branch_ids'] = $this->apiClient->getSerializer()->toQueryValue($branch_ids);
        }
        // query params
        if ($include_descendant !== null) {
            $queryParams['include_descendant'] = $this->apiClient->getSerializer()->toQueryValue($include_descendant);
        }
        // query params
        if ($consider_evaluation !== null) {
            $queryParams['consider_evaluation'] = $this->apiClient->getSerializer()->toQueryValue($consider_evaluation);
        }
        // query params
        if ($max !== null) {
            $queryParams['max'] = $this->apiClient->getSerializer()->toQueryValue($max);
        }
        // query params
        if ($min !== null) {
            $queryParams['min'] = $this->apiClient->getSerializer()->toQueryValue($min);
        }
        // query params
        if ($threshold_days !== null) {
            $queryParams['threshold_days'] = $this->apiClient->getSerializer()->toQueryValue($threshold_days);
        }
        // query params
        if ($detail_type !== null) {
            $queryParams['detail_type'] = $this->apiClient->getSerializer()->toQueryValue($detail_type);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillReportsRoleBenchStrengthDetailResponse',
                '/skill/v1/reports/bench'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillReportsRoleBenchStrengthDetailResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillReportsRoleBenchStrengthDetailResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportsSkillv1reportsbenchcount
     *
     * Calculates the \"Bench Strength\" for a Role
     *
     * @param int $role_id The role where has to be calculated the bench strength (required)
     * @param int[] $branch_ids Employees members of what branches perform the search (optional)
     * @param int $include_descendant Should be included the descendants of the branches. Default - 0 (optional)
     * @param string $consider_evaluation Options: S, M, both_and, both_or, default&#x3D;M (optional)
     * @param int $max The max percentage of role&#39;s skills known, default 100 (optional)
     * @param int $min The min percentage of role&#39;s skills known, default 100 (optional)
     * @param int $threshold_days Use only evaluations more recent than number of days for the calculation (default&#x3D; all) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillReportsRoleBenchStrengthResponse
     */
    public function reportsSkillv1reportsbenchcount($role_id, $branch_ids = null, $include_descendant = null, $consider_evaluation = null, $max = null, $min = null, $threshold_days = null)
    {
        list($response) = $this->reportsSkillv1reportsbenchcountWithHttpInfo($role_id, $branch_ids, $include_descendant, $consider_evaluation, $max, $min, $threshold_days);
        return $response;
    }

    /**
     * Operation reportsSkillv1reportsbenchcountWithHttpInfo
     *
     * Calculates the \"Bench Strength\" for a Role
     *
     * @param int $role_id The role where has to be calculated the bench strength (required)
     * @param int[] $branch_ids Employees members of what branches perform the search (optional)
     * @param int $include_descendant Should be included the descendants of the branches. Default - 0 (optional)
     * @param string $consider_evaluation Options: S, M, both_and, both_or, default&#x3D;M (optional)
     * @param int $max The max percentage of role&#39;s skills known, default 100 (optional)
     * @param int $min The min percentage of role&#39;s skills known, default 100 (optional)
     * @param int $threshold_days Use only evaluations more recent than number of days for the calculation (default&#x3D; all) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillReportsRoleBenchStrengthResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsSkillv1reportsbenchcountWithHttpInfo($role_id, $branch_ids = null, $include_descendant = null, $consider_evaluation = null, $max = null, $min = null, $threshold_days = null)
    {
        // verify the required parameter 'role_id' is set
        if ($role_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $role_id when calling reportsSkillv1reportsbenchcount');
        }
        // parse inputs
        $resourcePath = "/skill/v1/reports/bench/count";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($role_id !== null) {
            $queryParams['role_id'] = $this->apiClient->getSerializer()->toQueryValue($role_id);
        }
        // query params
        if (is_array($branch_ids)) {
            $branch_ids = $this->apiClient->getSerializer()->serializeCollection($branch_ids, 'brackets', true);
        }
        if ($branch_ids !== null) {
            $queryParams['branch_ids'] = $this->apiClient->getSerializer()->toQueryValue($branch_ids);
        }
        // query params
        if ($include_descendant !== null) {
            $queryParams['include_descendant'] = $this->apiClient->getSerializer()->toQueryValue($include_descendant);
        }
        // query params
        if ($consider_evaluation !== null) {
            $queryParams['consider_evaluation'] = $this->apiClient->getSerializer()->toQueryValue($consider_evaluation);
        }
        // query params
        if ($max !== null) {
            $queryParams['max'] = $this->apiClient->getSerializer()->toQueryValue($max);
        }
        // query params
        if ($min !== null) {
            $queryParams['min'] = $this->apiClient->getSerializer()->toQueryValue($min);
        }
        // query params
        if ($threshold_days !== null) {
            $queryParams['threshold_days'] = $this->apiClient->getSerializer()->toQueryValue($threshold_days);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillReportsRoleBenchStrengthResponse',
                '/skill/v1/reports/bench/count'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillReportsRoleBenchStrengthResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillReportsRoleBenchStrengthResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportsSkillv1reportsbranchesbranchId
     *
     * Calculates the Knowledge Gaps for the user of a Branch
     *
     * @param int $branch_id ID of a branch (required)
     * @param int $include_descendant Options 0 or 1. To include or not descendant branches. Default - 0 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $threshold_days Find only request more recent than number of days, default - search for all (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillReportsBranchReportResponse
     */
    public function reportsSkillv1reportsbranchesbranchId($branch_id, $include_descendant = null, $lang = null, $threshold_days = null)
    {
        list($response) = $this->reportsSkillv1reportsbranchesbranchIdWithHttpInfo($branch_id, $include_descendant, $lang, $threshold_days);
        return $response;
    }

    /**
     * Operation reportsSkillv1reportsbranchesbranchIdWithHttpInfo
     *
     * Calculates the Knowledge Gaps for the user of a Branch
     *
     * @param int $branch_id ID of a branch (required)
     * @param int $include_descendant Options 0 or 1. To include or not descendant branches. Default - 0 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $threshold_days Find only request more recent than number of days, default - search for all (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillReportsBranchReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsSkillv1reportsbranchesbranchIdWithHttpInfo($branch_id, $include_descendant = null, $lang = null, $threshold_days = null)
    {
        // verify the required parameter 'branch_id' is set
        if ($branch_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $branch_id when calling reportsSkillv1reportsbranchesbranchId');
        }
        // parse inputs
        $resourcePath = "/skill/v1/reports/branches/{branch_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($include_descendant !== null) {
            $queryParams['include_descendant'] = $this->apiClient->getSerializer()->toQueryValue($include_descendant);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($threshold_days !== null) {
            $queryParams['threshold_days'] = $this->apiClient->getSerializer()->toQueryValue($threshold_days);
        }
        // path params
        if ($branch_id !== null) {
            $resourcePath = str_replace(
                "{" . "branch_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($branch_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillReportsBranchReportResponse',
                '/skill/v1/reports/branches/{branch_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillReportsBranchReportResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillReportsBranchReportResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportsSkillv1reportsbranchesbranchIdskillsskillId
     *
     * Retrieves the list of users with a knowledge gap for a Skill in a Branch
     *
     * @param int $branch_id Numeric ID of a branch (required)
     * @param int $skill_id Numeric ID of a skill (required)
     * @param string $type Search type, returns only: &#39;sm&#39; (missing self evaluation), &#39;sg&#39; (self gaps), &#39;mm&#39; (missing manager evaluation) or &#39;mg&#39; (manager gaps) (required)
     * @param int[] $user_ids Array with user ids (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillReportsBranchReportDetailViewResponse
     */
    public function reportsSkillv1reportsbranchesbranchIdskillsskillId($branch_id, $skill_id, $type, $user_ids)
    {
        list($response) = $this->reportsSkillv1reportsbranchesbranchIdskillsskillIdWithHttpInfo($branch_id, $skill_id, $type, $user_ids);
        return $response;
    }

    /**
     * Operation reportsSkillv1reportsbranchesbranchIdskillsskillIdWithHttpInfo
     *
     * Retrieves the list of users with a knowledge gap for a Skill in a Branch
     *
     * @param int $branch_id Numeric ID of a branch (required)
     * @param int $skill_id Numeric ID of a skill (required)
     * @param string $type Search type, returns only: &#39;sm&#39; (missing self evaluation), &#39;sg&#39; (self gaps), &#39;mm&#39; (missing manager evaluation) or &#39;mg&#39; (manager gaps) (required)
     * @param int[] $user_ids Array with user ids (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillReportsBranchReportDetailViewResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsSkillv1reportsbranchesbranchIdskillsskillIdWithHttpInfo($branch_id, $skill_id, $type, $user_ids)
    {
        // verify the required parameter 'branch_id' is set
        if ($branch_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $branch_id when calling reportsSkillv1reportsbranchesbranchIdskillsskillId');
        }
        // verify the required parameter 'skill_id' is set
        if ($skill_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $skill_id when calling reportsSkillv1reportsbranchesbranchIdskillsskillId');
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling reportsSkillv1reportsbranchesbranchIdskillsskillId');
        }
        // verify the required parameter 'user_ids' is set
        if ($user_ids === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_ids when calling reportsSkillv1reportsbranchesbranchIdskillsskillId');
        }
        // parse inputs
        $resourcePath = "/skill/v1/reports/branches/{branch_id}/skills/{skill_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($type !== null) {
            $queryParams['type'] = $this->apiClient->getSerializer()->toQueryValue($type);
        }
        // query params
        if (is_array($user_ids)) {
            $user_ids = $this->apiClient->getSerializer()->serializeCollection($user_ids, 'brackets', true);
        }
        if ($user_ids !== null) {
            $queryParams['user_ids'] = $this->apiClient->getSerializer()->toQueryValue($user_ids);
        }
        // path params
        if ($branch_id !== null) {
            $resourcePath = str_replace(
                "{" . "branch_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($branch_id),
                $resourcePath
            );
        }
        // path params
        if ($skill_id !== null) {
            $resourcePath = str_replace(
                "{" . "skill_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($skill_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillReportsBranchReportDetailViewResponse',
                '/skill/v1/reports/branches/{branch_id}/skills/{skill_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillReportsBranchReportDetailViewResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillReportsBranchReportDetailViewResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportsSkillv1reportsbranchesroles
     *
     * Retrieves the Roles of one or more Branches
     *
     * @param int[] $branch_id required ID of branch to fetch (required)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillReportsBranchesRolesReportResponse
     */
    public function reportsSkillv1reportsbranchesroles($branch_id, $lang = null)
    {
        list($response) = $this->reportsSkillv1reportsbranchesrolesWithHttpInfo($branch_id, $lang);
        return $response;
    }

    /**
     * Operation reportsSkillv1reportsbranchesrolesWithHttpInfo
     *
     * Retrieves the Roles of one or more Branches
     *
     * @param int[] $branch_id required ID of branch to fetch (required)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillReportsBranchesRolesReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsSkillv1reportsbranchesrolesWithHttpInfo($branch_id, $lang = null)
    {
        // verify the required parameter 'branch_id' is set
        if ($branch_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $branch_id when calling reportsSkillv1reportsbranchesroles');
        }
        // parse inputs
        $resourcePath = "/skill/v1/reports/branches/roles";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if (is_array($branch_id)) {
            $branch_id = $this->apiClient->getSerializer()->serializeCollection($branch_id, 'brackets', true);
        }
        if ($branch_id !== null) {
            $queryParams['branch_id'] = $this->apiClient->getSerializer()->toQueryValue($branch_id);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillReportsBranchesRolesReportResponse',
                '/skill/v1/reports/branches/roles'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillReportsBranchesRolesReportResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillReportsBranchesRolesReportResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportsSkillv1reportsbranchesrolesroleId
     *
     * Retrieves the List of Users of a Role by Branch(-es)
     *
     * @param int $role_id role_id to search (required)
     * @param int[] $branch_id required ID of branch(-es) to fetch (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillReportsBranchesRoleDetailsReportResponse
     */
    public function reportsSkillv1reportsbranchesrolesroleId($role_id, $branch_id)
    {
        list($response) = $this->reportsSkillv1reportsbranchesrolesroleIdWithHttpInfo($role_id, $branch_id);
        return $response;
    }

    /**
     * Operation reportsSkillv1reportsbranchesrolesroleIdWithHttpInfo
     *
     * Retrieves the List of Users of a Role by Branch(-es)
     *
     * @param int $role_id role_id to search (required)
     * @param int[] $branch_id required ID of branch(-es) to fetch (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillReportsBranchesRoleDetailsReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsSkillv1reportsbranchesrolesroleIdWithHttpInfo($role_id, $branch_id)
    {
        // verify the required parameter 'role_id' is set
        if ($role_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $role_id when calling reportsSkillv1reportsbranchesrolesroleId');
        }
        // verify the required parameter 'branch_id' is set
        if ($branch_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $branch_id when calling reportsSkillv1reportsbranchesrolesroleId');
        }
        // parse inputs
        $resourcePath = "/skill/v1/reports/branches/roles/{role_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if (is_array($branch_id)) {
            $branch_id = $this->apiClient->getSerializer()->serializeCollection($branch_id, 'brackets', true);
        }
        if ($branch_id !== null) {
            $queryParams['branch_id'] = $this->apiClient->getSerializer()->toQueryValue($branch_id);
        }
        // path params
        if ($role_id !== null) {
            $resourcePath = str_replace(
                "{" . "role_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($role_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillReportsBranchesRoleDetailsReportResponse',
                '/skill/v1/reports/branches/roles/{role_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillReportsBranchesRoleDetailsReportResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillReportsBranchesRoleDetailsReportResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportsSkillv1reportscalibration
     *
     * List of managers calibration
     *
     * @param int $mmi_threshold If the MMI calculated for a manager is &#x3D;&amp;gt; this value will be returned the status &amp;quot;To Calibrate&amp;quot;; Default: 4 (optional)
     * @param int $role_id in case the role is passed should be returned only the list of managers that have subordinates in the selected role (optional)
     * @param int $skill_id Returns only the roles that have this skill (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param string $sort_attr Sort by this field, default value - role_id, role_name, manager_id, manager_name, manager_email. Options: manager_name (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - asc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default - LMS default(i.e. 10) (optional)
     * @param string $filters URL encoded filter - role_name(&#39;contains&#39; or &#39;not_contains&#39;), manager_name(&#39;contains&#39; or &#39;not_contains&#39;) (optional)
     * @param string $search_text Search by text given(a text to search in manager_name) (optional)
     * @param string $misalignment Show only misalignment. Options: 0(show all), 1(show only misaligned). Default: 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillReportsListCalibrationResponse
     */
    public function reportsSkillv1reportscalibration($mmi_threshold = null, $role_id = null, $skill_id = null, $get_total_count = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $filters = null, $search_text = null, $misalignment = null)
    {
        list($response) = $this->reportsSkillv1reportscalibrationWithHttpInfo($mmi_threshold, $role_id, $skill_id, $get_total_count, $sort_attr, $sort_dir, $page, $page_size, $filters, $search_text, $misalignment);
        return $response;
    }

    /**
     * Operation reportsSkillv1reportscalibrationWithHttpInfo
     *
     * List of managers calibration
     *
     * @param int $mmi_threshold If the MMI calculated for a manager is &#x3D;&amp;gt; this value will be returned the status &amp;quot;To Calibrate&amp;quot;; Default: 4 (optional)
     * @param int $role_id in case the role is passed should be returned only the list of managers that have subordinates in the selected role (optional)
     * @param int $skill_id Returns only the roles that have this skill (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param string $sort_attr Sort by this field, default value - role_id, role_name, manager_id, manager_name, manager_email. Options: manager_name (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - asc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default - LMS default(i.e. 10) (optional)
     * @param string $filters URL encoded filter - role_name(&#39;contains&#39; or &#39;not_contains&#39;), manager_name(&#39;contains&#39; or &#39;not_contains&#39;) (optional)
     * @param string $search_text Search by text given(a text to search in manager_name) (optional)
     * @param string $misalignment Show only misalignment. Options: 0(show all), 1(show only misaligned). Default: 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillReportsListCalibrationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsSkillv1reportscalibrationWithHttpInfo($mmi_threshold = null, $role_id = null, $skill_id = null, $get_total_count = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $filters = null, $search_text = null, $misalignment = null)
    {
        // parse inputs
        $resourcePath = "/skill/v1/reports/calibration";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($mmi_threshold !== null) {
            $queryParams['mmi_threshold'] = $this->apiClient->getSerializer()->toQueryValue($mmi_threshold);
        }
        // query params
        if ($role_id !== null) {
            $queryParams['role_id'] = $this->apiClient->getSerializer()->toQueryValue($role_id);
        }
        // query params
        if ($skill_id !== null) {
            $queryParams['skill_id'] = $this->apiClient->getSerializer()->toQueryValue($skill_id);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($filters !== null) {
            $queryParams['filters'] = $this->apiClient->getSerializer()->toQueryValue($filters);
        }
        // query params
        if ($search_text !== null) {
            $queryParams['search_text'] = $this->apiClient->getSerializer()->toQueryValue($search_text);
        }
        // query params
        if ($misalignment !== null) {
            $queryParams['misalignment'] = $this->apiClient->getSerializer()->toQueryValue($misalignment);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillReportsListCalibrationResponse',
                '/skill/v1/reports/calibration'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillReportsListCalibrationResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillReportsListCalibrationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportsSkillv1reportscalibrationid
     *
     * Calibrate Manager Requests
     *
     * @param int $id Id of the evaluating manager (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillReportsCalibrateManagerResponse
     */
    public function reportsSkillv1reportscalibrationid($id)
    {
        list($response) = $this->reportsSkillv1reportscalibrationidWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation reportsSkillv1reportscalibrationidWithHttpInfo
     *
     * Calibrate Manager Requests
     *
     * @param int $id Id of the evaluating manager (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillReportsCalibrateManagerResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsSkillv1reportscalibrationidWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling reportsSkillv1reportscalibrationid');
        }
        // parse inputs
        $resourcePath = "/skill/v1/reports/calibration/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillReportsCalibrateManagerResponse',
                '/skill/v1/reports/calibration/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillReportsCalibrateManagerResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillReportsCalibrateManagerResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportsSkillv1reportscalibrationidskills
     *
     * List of Skills In Managers Calibration
     *
     * @param int $id Manager id (required)
     * @param int $mmi_low Skills with MMI below this value are aligned; Default: 0.5 (optional)
     * @param int $mmi_high Skills with MMI above this value are (strong) disaligned; Default: 2 (optional)
     * @param string $status Available statuses to do filtering - &#39;no-data&#39; , &#39;disaligned&#39;, &#39;slighty-disaliged&#39; or &#39;aligned&#39;; Default: no status set(returns all statuses at once) (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param string $sort_attr Sort by this field, default value - username. Options: username (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - asc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default - LMS default(i.e. 10) (optional)
     * @param string $filters URL encoded filter (optional)
     * @param string $search_text Search by text given(a text to search in skill name) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillReportsListCalibrationSkillsResponse
     */
    public function reportsSkillv1reportscalibrationidskills($id, $mmi_low = null, $mmi_high = null, $status = null, $get_total_count = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $filters = null, $search_text = null)
    {
        list($response) = $this->reportsSkillv1reportscalibrationidskillsWithHttpInfo($id, $mmi_low, $mmi_high, $status, $get_total_count, $sort_attr, $sort_dir, $page, $page_size, $filters, $search_text);
        return $response;
    }

    /**
     * Operation reportsSkillv1reportscalibrationidskillsWithHttpInfo
     *
     * List of Skills In Managers Calibration
     *
     * @param int $id Manager id (required)
     * @param int $mmi_low Skills with MMI below this value are aligned; Default: 0.5 (optional)
     * @param int $mmi_high Skills with MMI above this value are (strong) disaligned; Default: 2 (optional)
     * @param string $status Available statuses to do filtering - &#39;no-data&#39; , &#39;disaligned&#39;, &#39;slighty-disaliged&#39; or &#39;aligned&#39;; Default: no status set(returns all statuses at once) (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param string $sort_attr Sort by this field, default value - username. Options: username (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - asc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default - LMS default(i.e. 10) (optional)
     * @param string $filters URL encoded filter (optional)
     * @param string $search_text Search by text given(a text to search in skill name) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillReportsListCalibrationSkillsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsSkillv1reportscalibrationidskillsWithHttpInfo($id, $mmi_low = null, $mmi_high = null, $status = null, $get_total_count = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $filters = null, $search_text = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling reportsSkillv1reportscalibrationidskills');
        }
        // parse inputs
        $resourcePath = "/skill/v1/reports/calibration/{id}/skills";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($mmi_low !== null) {
            $queryParams['mmi_low'] = $this->apiClient->getSerializer()->toQueryValue($mmi_low);
        }
        // query params
        if ($mmi_high !== null) {
            $queryParams['mmi_high'] = $this->apiClient->getSerializer()->toQueryValue($mmi_high);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($filters !== null) {
            $queryParams['filters'] = $this->apiClient->getSerializer()->toQueryValue($filters);
        }
        // query params
        if ($search_text !== null) {
            $queryParams['search_text'] = $this->apiClient->getSerializer()->toQueryValue($search_text);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillReportsListCalibrationSkillsResponse',
                '/skill/v1/reports/calibration/{id}/skills'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillReportsListCalibrationSkillsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillReportsListCalibrationSkillsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportsSkillv1reportscalibrationidskillsid2
     *
     * View latest evaluation comparison (Skill)
     *
     * @param int $id Id of the evaluating manager (required)
     * @param int $id2 Id of the evaluated skill (required)
     * @param int $critical Show only critical skills data. Default - 0 (show all) (optional)
     * @param int $ignore_no_data Show only users with data. Default - 0 (show all). (optional)
     * @param int $search_text Search by text (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillReportsViewCalibrationSkillResponse
     */
    public function reportsSkillv1reportscalibrationidskillsid2($id, $id2, $critical = null, $ignore_no_data = null, $search_text = null)
    {
        list($response) = $this->reportsSkillv1reportscalibrationidskillsid2WithHttpInfo($id, $id2, $critical, $ignore_no_data, $search_text);
        return $response;
    }

    /**
     * Operation reportsSkillv1reportscalibrationidskillsid2WithHttpInfo
     *
     * View latest evaluation comparison (Skill)
     *
     * @param int $id Id of the evaluating manager (required)
     * @param int $id2 Id of the evaluated skill (required)
     * @param int $critical Show only critical skills data. Default - 0 (show all) (optional)
     * @param int $ignore_no_data Show only users with data. Default - 0 (show all). (optional)
     * @param int $search_text Search by text (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillReportsViewCalibrationSkillResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsSkillv1reportscalibrationidskillsid2WithHttpInfo($id, $id2, $critical = null, $ignore_no_data = null, $search_text = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling reportsSkillv1reportscalibrationidskillsid2');
        }
        // verify the required parameter 'id2' is set
        if ($id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id2 when calling reportsSkillv1reportscalibrationidskillsid2');
        }
        // parse inputs
        $resourcePath = "/skill/v1/reports/calibration/{id}/skills/{id2}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($critical !== null) {
            $queryParams['critical'] = $this->apiClient->getSerializer()->toQueryValue($critical);
        }
        // query params
        if ($ignore_no_data !== null) {
            $queryParams['ignore_no_data'] = $this->apiClient->getSerializer()->toQueryValue($ignore_no_data);
        }
        // query params
        if ($search_text !== null) {
            $queryParams['search_text'] = $this->apiClient->getSerializer()->toQueryValue($search_text);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($id2 !== null) {
            $resourcePath = str_replace(
                "{" . "id2" . "}",
                $this->apiClient->getSerializer()->toPathValue($id2),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillReportsViewCalibrationSkillResponse',
                '/skill/v1/reports/calibration/{id}/skills/{id2}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillReportsViewCalibrationSkillResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillReportsViewCalibrationSkillResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportsSkillv1reportscalibrationidusers
     *
     * List of Users In Managers Calibration
     *
     * @param int $id Manager id (required)
     * @param int $mmi_low Users with MMI below this value are aligned; Default: 0.5 (optional)
     * @param int $mmi_high Users with MMI above this value are (strong) disaligned; Default: 2 (optional)
     * @param string $status Available statuses to do filtering - &#39;no-data&#39; , &#39;disaligned&#39;, &#39;slighty-disaliged&#39; or &#39;aligned&#39;; Default: no status set(returns all statuses at once) (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param string $sort_attr Sort by this field, default value - username. Options: username (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - asc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default - LMS default(i.e. 10) (optional)
     * @param string $filters URL encoded filter - (optional)
     * @param string $search_text Search by text given(a text to search in names, email, role) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillReportsListCalibrationUsersResponse
     */
    public function reportsSkillv1reportscalibrationidusers($id, $mmi_low = null, $mmi_high = null, $status = null, $get_total_count = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $filters = null, $search_text = null)
    {
        list($response) = $this->reportsSkillv1reportscalibrationidusersWithHttpInfo($id, $mmi_low, $mmi_high, $status, $get_total_count, $sort_attr, $sort_dir, $page, $page_size, $filters, $search_text);
        return $response;
    }

    /**
     * Operation reportsSkillv1reportscalibrationidusersWithHttpInfo
     *
     * List of Users In Managers Calibration
     *
     * @param int $id Manager id (required)
     * @param int $mmi_low Users with MMI below this value are aligned; Default: 0.5 (optional)
     * @param int $mmi_high Users with MMI above this value are (strong) disaligned; Default: 2 (optional)
     * @param string $status Available statuses to do filtering - &#39;no-data&#39; , &#39;disaligned&#39;, &#39;slighty-disaliged&#39; or &#39;aligned&#39;; Default: no status set(returns all statuses at once) (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param string $sort_attr Sort by this field, default value - username. Options: username (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - asc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default - LMS default(i.e. 10) (optional)
     * @param string $filters URL encoded filter - (optional)
     * @param string $search_text Search by text given(a text to search in names, email, role) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillReportsListCalibrationUsersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsSkillv1reportscalibrationidusersWithHttpInfo($id, $mmi_low = null, $mmi_high = null, $status = null, $get_total_count = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $filters = null, $search_text = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling reportsSkillv1reportscalibrationidusers');
        }
        // parse inputs
        $resourcePath = "/skill/v1/reports/calibration/{id}/users";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($mmi_low !== null) {
            $queryParams['mmi_low'] = $this->apiClient->getSerializer()->toQueryValue($mmi_low);
        }
        // query params
        if ($mmi_high !== null) {
            $queryParams['mmi_high'] = $this->apiClient->getSerializer()->toQueryValue($mmi_high);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($filters !== null) {
            $queryParams['filters'] = $this->apiClient->getSerializer()->toQueryValue($filters);
        }
        // query params
        if ($search_text !== null) {
            $queryParams['search_text'] = $this->apiClient->getSerializer()->toQueryValue($search_text);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillReportsListCalibrationUsersResponse',
                '/skill/v1/reports/calibration/{id}/users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillReportsListCalibrationUsersResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillReportsListCalibrationUsersResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportsSkillv1reportscalibrationidusersid2
     *
     * View latest evaluation comparison (User)
     *
     * @param int $id Id of the evaluating manager (required)
     * @param int $id2 Id of the evaluated user (required)
     * @param int $critical Show only critical skills data. Default - 0 (show all) (optional)
     * @param int $ignore_no_data Show only skills with data. Default - 0 (show all). (optional)
     * @param int $search_text Search by text in skill title and description (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillReportsViewCalibrationUserResponse
     */
    public function reportsSkillv1reportscalibrationidusersid2($id, $id2, $critical = null, $ignore_no_data = null, $search_text = null)
    {
        list($response) = $this->reportsSkillv1reportscalibrationidusersid2WithHttpInfo($id, $id2, $critical, $ignore_no_data, $search_text);
        return $response;
    }

    /**
     * Operation reportsSkillv1reportscalibrationidusersid2WithHttpInfo
     *
     * View latest evaluation comparison (User)
     *
     * @param int $id Id of the evaluating manager (required)
     * @param int $id2 Id of the evaluated user (required)
     * @param int $critical Show only critical skills data. Default - 0 (show all) (optional)
     * @param int $ignore_no_data Show only skills with data. Default - 0 (show all). (optional)
     * @param int $search_text Search by text in skill title and description (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillReportsViewCalibrationUserResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsSkillv1reportscalibrationidusersid2WithHttpInfo($id, $id2, $critical = null, $ignore_no_data = null, $search_text = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling reportsSkillv1reportscalibrationidusersid2');
        }
        // verify the required parameter 'id2' is set
        if ($id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id2 when calling reportsSkillv1reportscalibrationidusersid2');
        }
        // parse inputs
        $resourcePath = "/skill/v1/reports/calibration/{id}/users/{id2}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($critical !== null) {
            $queryParams['critical'] = $this->apiClient->getSerializer()->toQueryValue($critical);
        }
        // query params
        if ($ignore_no_data !== null) {
            $queryParams['ignore_no_data'] = $this->apiClient->getSerializer()->toQueryValue($ignore_no_data);
        }
        // query params
        if ($search_text !== null) {
            $queryParams['search_text'] = $this->apiClient->getSerializer()->toQueryValue($search_text);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($id2 !== null) {
            $resourcePath = str_replace(
                "{" . "id2" . "}",
                $this->apiClient->getSerializer()->toPathValue($id2),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillReportsViewCalibrationUserResponse',
                '/skill/v1/reports/calibration/{id}/users/{id2}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillReportsViewCalibrationUserResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillReportsViewCalibrationUserResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportsSkillv1reportsjoharimanagersmanagerId
     *
     * Calculates the Calibration Matrix for all of the Subordinates of a Manager
     *
     * @param int $manager_id ID of the manager (required)
     * @param int $wr Number (weight of strong misalignment cells in the calculation), default &#x3D;2 (optional)
     * @param int $wy Number (weight of medium misalignment cells in the calculation), default &#x3D;0.25 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillReportsJohariManagerResponse
     */
    public function reportsSkillv1reportsjoharimanagersmanagerId($manager_id, $wr = null, $wy = null)
    {
        list($response) = $this->reportsSkillv1reportsjoharimanagersmanagerIdWithHttpInfo($manager_id, $wr, $wy);
        return $response;
    }

    /**
     * Operation reportsSkillv1reportsjoharimanagersmanagerIdWithHttpInfo
     *
     * Calculates the Calibration Matrix for all of the Subordinates of a Manager
     *
     * @param int $manager_id ID of the manager (required)
     * @param int $wr Number (weight of strong misalignment cells in the calculation), default &#x3D;2 (optional)
     * @param int $wy Number (weight of medium misalignment cells in the calculation), default &#x3D;0.25 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillReportsJohariManagerResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsSkillv1reportsjoharimanagersmanagerIdWithHttpInfo($manager_id, $wr = null, $wy = null)
    {
        // verify the required parameter 'manager_id' is set
        if ($manager_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $manager_id when calling reportsSkillv1reportsjoharimanagersmanagerId');
        }
        // parse inputs
        $resourcePath = "/skill/v1/reports/johari/managers/{manager_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($wr !== null) {
            $queryParams['wr'] = $this->apiClient->getSerializer()->toQueryValue($wr);
        }
        // query params
        if ($wy !== null) {
            $queryParams['wy'] = $this->apiClient->getSerializer()->toQueryValue($wy);
        }
        // path params
        if ($manager_id !== null) {
            $resourcePath = str_replace(
                "{" . "manager_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($manager_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillReportsJohariManagerResponse',
                '/skill/v1/reports/johari/managers/{manager_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillReportsJohariManagerResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillReportsJohariManagerResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportsSkillv1reportsjoharimanagersmanagerIdcellscellId
     *
     * Retrieves the list of Skills in one cell of the Calibration Matrix Manager report
     *
     * @param int $manager_id ID of the manager (required)
     * @param int $cell_id Select the cell - 0, 1 ... 8 (required)
     * @param int $wr Number (weight of strong misalignment cells in the calculation), default &#x3D;2 (optional)
     * @param int $wy Number (weight of medium misalignment cells in the calculation), default &#x3D;0.25 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillReportsJohariManagerDetailedResponse
     */
    public function reportsSkillv1reportsjoharimanagersmanagerIdcellscellId($manager_id, $cell_id, $wr = null, $wy = null)
    {
        list($response) = $this->reportsSkillv1reportsjoharimanagersmanagerIdcellscellIdWithHttpInfo($manager_id, $cell_id, $wr, $wy);
        return $response;
    }

    /**
     * Operation reportsSkillv1reportsjoharimanagersmanagerIdcellscellIdWithHttpInfo
     *
     * Retrieves the list of Skills in one cell of the Calibration Matrix Manager report
     *
     * @param int $manager_id ID of the manager (required)
     * @param int $cell_id Select the cell - 0, 1 ... 8 (required)
     * @param int $wr Number (weight of strong misalignment cells in the calculation), default &#x3D;2 (optional)
     * @param int $wy Number (weight of medium misalignment cells in the calculation), default &#x3D;0.25 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillReportsJohariManagerDetailedResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsSkillv1reportsjoharimanagersmanagerIdcellscellIdWithHttpInfo($manager_id, $cell_id, $wr = null, $wy = null)
    {
        // verify the required parameter 'manager_id' is set
        if ($manager_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $manager_id when calling reportsSkillv1reportsjoharimanagersmanagerIdcellscellId');
        }
        // verify the required parameter 'cell_id' is set
        if ($cell_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cell_id when calling reportsSkillv1reportsjoharimanagersmanagerIdcellscellId');
        }
        // parse inputs
        $resourcePath = "/skill/v1/reports/johari/managers/{manager_id}/cells/{cell_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($wr !== null) {
            $queryParams['wr'] = $this->apiClient->getSerializer()->toQueryValue($wr);
        }
        // query params
        if ($wy !== null) {
            $queryParams['wy'] = $this->apiClient->getSerializer()->toQueryValue($wy);
        }
        // path params
        if ($manager_id !== null) {
            $resourcePath = str_replace(
                "{" . "manager_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($manager_id),
                $resourcePath
            );
        }
        // path params
        if ($cell_id !== null) {
            $resourcePath = str_replace(
                "{" . "cell_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($cell_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillReportsJohariManagerDetailedResponse',
                '/skill/v1/reports/johari/managers/{manager_id}/cells/{cell_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillReportsJohariManagerDetailedResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillReportsJohariManagerDetailedResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportsSkillv1reportsjohariusersuserId
     *
     * Calculates the Calibration Matrix of an User
     *
     * @param int $user_id ID of the user (required)
     * @param int $role_id ID of the requested role (optional)
     * @param int $wr Number (weight of strong misalignment cells in the calculation), default &#x3D;2 (optional)
     * @param int $wy Number (weight of medium misalignment cells in the calculation), default &#x3D;0.25 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillReportsJohariEmployeeResponse
     */
    public function reportsSkillv1reportsjohariusersuserId($user_id, $role_id = null, $wr = null, $wy = null)
    {
        list($response) = $this->reportsSkillv1reportsjohariusersuserIdWithHttpInfo($user_id, $role_id, $wr, $wy);
        return $response;
    }

    /**
     * Operation reportsSkillv1reportsjohariusersuserIdWithHttpInfo
     *
     * Calculates the Calibration Matrix of an User
     *
     * @param int $user_id ID of the user (required)
     * @param int $role_id ID of the requested role (optional)
     * @param int $wr Number (weight of strong misalignment cells in the calculation), default &#x3D;2 (optional)
     * @param int $wy Number (weight of medium misalignment cells in the calculation), default &#x3D;0.25 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillReportsJohariEmployeeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsSkillv1reportsjohariusersuserIdWithHttpInfo($user_id, $role_id = null, $wr = null, $wy = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling reportsSkillv1reportsjohariusersuserId');
        }
        // parse inputs
        $resourcePath = "/skill/v1/reports/johari/users/{user_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($role_id !== null) {
            $queryParams['role_id'] = $this->apiClient->getSerializer()->toQueryValue($role_id);
        }
        // query params
        if ($wr !== null) {
            $queryParams['wr'] = $this->apiClient->getSerializer()->toQueryValue($wr);
        }
        // query params
        if ($wy !== null) {
            $queryParams['wy'] = $this->apiClient->getSerializer()->toQueryValue($wy);
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillReportsJohariEmployeeResponse',
                '/skill/v1/reports/johari/users/{user_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillReportsJohariEmployeeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillReportsJohariEmployeeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportsSkillv1reportsroleidskills
     *
     * Retrieves all Roles from all roles who should have the given skill
     *
     * @param string $sort_attr Sort by this field, default value - gap_users. Options: skill_name (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default from system settings, max 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillReportsListRoleSkillsResponse
     */
    public function reportsSkillv1reportsroleidskills($sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null)
    {
        list($response) = $this->reportsSkillv1reportsroleidskillsWithHttpInfo($sort_attr, $sort_dir, $page, $page_size, $lang, $get_total_count);
        return $response;
    }

    /**
     * Operation reportsSkillv1reportsroleidskillsWithHttpInfo
     *
     * Retrieves all Roles from all roles who should have the given skill
     *
     * @param string $sort_attr Sort by this field, default value - gap_users. Options: skill_name (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default from system settings, max 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillReportsListRoleSkillsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsSkillv1reportsroleidskillsWithHttpInfo($sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null)
    {
        // parse inputs
        $resourcePath = "/skill/v1/reports/role/{id}/skills";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillReportsListRoleSkillsResponse',
                '/skill/v1/reports/role/{id}/skills'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillReportsListRoleSkillsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillReportsListRoleSkillsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportsSkillv1reportsroleidusers
     *
     * Retrieves Report for all Users in a role
     *
     * @param int $id Role ID for the report (required)
     * @param string $sort_attr Sort by this field, default value - user_id. Options: username, login_name, first_name, last_name (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default from system settings, max 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param string $user_rating Filter users. Options: gap, aligned, expert (optional)
     * @param int $skill_id Filter users with the given skill ID (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillReportsListRoleUsersResponse
     */
    public function reportsSkillv1reportsroleidusers($id, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null, $user_rating = null, $skill_id = null)
    {
        list($response) = $this->reportsSkillv1reportsroleidusersWithHttpInfo($id, $sort_attr, $sort_dir, $page, $page_size, $lang, $get_total_count, $user_rating, $skill_id);
        return $response;
    }

    /**
     * Operation reportsSkillv1reportsroleidusersWithHttpInfo
     *
     * Retrieves Report for all Users in a role
     *
     * @param int $id Role ID for the report (required)
     * @param string $sort_attr Sort by this field, default value - user_id. Options: username, login_name, first_name, last_name (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default from system settings, max 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param string $user_rating Filter users. Options: gap, aligned, expert (optional)
     * @param int $skill_id Filter users with the given skill ID (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillReportsListRoleUsersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsSkillv1reportsroleidusersWithHttpInfo($id, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null, $user_rating = null, $skill_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling reportsSkillv1reportsroleidusers');
        }
        // parse inputs
        $resourcePath = "/skill/v1/reports/role/{id}/users";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // query params
        if ($user_rating !== null) {
            $queryParams['user_rating'] = $this->apiClient->getSerializer()->toQueryValue($user_rating);
        }
        // query params
        if ($skill_id !== null) {
            $queryParams['skill_id'] = $this->apiClient->getSerializer()->toQueryValue($skill_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillReportsListRoleUsersResponse',
                '/skill/v1/reports/role/{id}/users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillReportsListRoleUsersResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillReportsListRoleUsersResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportsSkillv1reportsrolesroleId
     *
     * Calculates the Knowledge Gaps for a Role
     *
     * @param int $role_id Required ID of role to fetch (required)
     * @param int $threshold_days Use only evaluations more recent than number of days for the calculation (default&#x3D; all) (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillReportsRoleReportResponse
     */
    public function reportsSkillv1reportsrolesroleId($role_id, $threshold_days = null, $lang = null)
    {
        list($response) = $this->reportsSkillv1reportsrolesroleIdWithHttpInfo($role_id, $threshold_days, $lang);
        return $response;
    }

    /**
     * Operation reportsSkillv1reportsrolesroleIdWithHttpInfo
     *
     * Calculates the Knowledge Gaps for a Role
     *
     * @param int $role_id Required ID of role to fetch (required)
     * @param int $threshold_days Use only evaluations more recent than number of days for the calculation (default&#x3D; all) (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillReportsRoleReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsSkillv1reportsrolesroleIdWithHttpInfo($role_id, $threshold_days = null, $lang = null)
    {
        // verify the required parameter 'role_id' is set
        if ($role_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $role_id when calling reportsSkillv1reportsrolesroleId');
        }
        // parse inputs
        $resourcePath = "/skill/v1/reports/roles/{role_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($threshold_days !== null) {
            $queryParams['threshold_days'] = $this->apiClient->getSerializer()->toQueryValue($threshold_days);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // path params
        if ($role_id !== null) {
            $resourcePath = str_replace(
                "{" . "role_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($role_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillReportsRoleReportResponse',
                '/skill/v1/reports/roles/{role_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillReportsRoleReportResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillReportsRoleReportResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportsSkillv1reportsrolesroleIdskillsskillId
     *
     * Retrieves the list of Users with a knowledge gap for a Skill
     *
     * @param int $role_id Required ID of role to fetch (required)
     * @param int $skill_id Required ID of skill to fetch (required)
     * @param string $detail_type Options: &amp;quot;self_missing&amp;quot;, &amp;quot;manager_missing&amp;quot;, &amp;quot;link_self&amp;quot;, &amp;quot;link_manager&amp;quot; (required)
     * @param int $threshold_days Use only evaluations more recent than number of days for the calculation (default&#x3D; all) (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillReportsRoleReportDetailViewResponse
     */
    public function reportsSkillv1reportsrolesroleIdskillsskillId($role_id, $skill_id, $detail_type, $threshold_days = null, $lang = null)
    {
        list($response) = $this->reportsSkillv1reportsrolesroleIdskillsskillIdWithHttpInfo($role_id, $skill_id, $detail_type, $threshold_days, $lang);
        return $response;
    }

    /**
     * Operation reportsSkillv1reportsrolesroleIdskillsskillIdWithHttpInfo
     *
     * Retrieves the list of Users with a knowledge gap for a Skill
     *
     * @param int $role_id Required ID of role to fetch (required)
     * @param int $skill_id Required ID of skill to fetch (required)
     * @param string $detail_type Options: &amp;quot;self_missing&amp;quot;, &amp;quot;manager_missing&amp;quot;, &amp;quot;link_self&amp;quot;, &amp;quot;link_manager&amp;quot; (required)
     * @param int $threshold_days Use only evaluations more recent than number of days for the calculation (default&#x3D; all) (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillReportsRoleReportDetailViewResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsSkillv1reportsrolesroleIdskillsskillIdWithHttpInfo($role_id, $skill_id, $detail_type, $threshold_days = null, $lang = null)
    {
        // verify the required parameter 'role_id' is set
        if ($role_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $role_id when calling reportsSkillv1reportsrolesroleIdskillsskillId');
        }
        // verify the required parameter 'skill_id' is set
        if ($skill_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $skill_id when calling reportsSkillv1reportsrolesroleIdskillsskillId');
        }
        // verify the required parameter 'detail_type' is set
        if ($detail_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $detail_type when calling reportsSkillv1reportsrolesroleIdskillsskillId');
        }
        // parse inputs
        $resourcePath = "/skill/v1/reports/roles/{role_id}/skills/{skill_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($detail_type !== null) {
            $queryParams['detail_type'] = $this->apiClient->getSerializer()->toQueryValue($detail_type);
        }
        // query params
        if ($threshold_days !== null) {
            $queryParams['threshold_days'] = $this->apiClient->getSerializer()->toQueryValue($threshold_days);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // path params
        if ($role_id !== null) {
            $resourcePath = str_replace(
                "{" . "role_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($role_id),
                $resourcePath
            );
        }
        // path params
        if ($skill_id !== null) {
            $resourcePath = str_replace(
                "{" . "skill_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($skill_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillReportsRoleReportDetailViewResponse',
                '/skill/v1/reports/roles/{role_id}/skills/{skill_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillReportsRoleReportDetailViewResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillReportsRoleReportDetailViewResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportsSkillv1reportsskillidbranches
     *
     * Retrieves gaps by branches for the given skill
     *
     * @param string $sort_attr Sort by this field, default value - rating. Options: user_name (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default from system settings, max 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillReportsListSkillBranchesResponse
     */
    public function reportsSkillv1reportsskillidbranches($sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null)
    {
        list($response) = $this->reportsSkillv1reportsskillidbranchesWithHttpInfo($sort_attr, $sort_dir, $page, $page_size, $lang);
        return $response;
    }

    /**
     * Operation reportsSkillv1reportsskillidbranchesWithHttpInfo
     *
     * Retrieves gaps by branches for the given skill
     *
     * @param string $sort_attr Sort by this field, default value - rating. Options: user_name (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default from system settings, max 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillReportsListSkillBranchesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsSkillv1reportsskillidbranchesWithHttpInfo($sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null)
    {
        // parse inputs
        $resourcePath = "/skill/v1/reports/skill/{id}/branches";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillReportsListSkillBranchesResponse',
                '/skill/v1/reports/skill/{id}/branches'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillReportsListSkillBranchesResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillReportsListSkillBranchesResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportsSkillv1reportsskillidroles
     *
     * Retrieves all Roles from all roles who should have the given skill
     *
     * @param string $sort_attr Sort by this field, default value - gap_users. Options: role_name (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default from system settings, max 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param int $branch_id The ID of a branch (optional)
     * @param int $selection_status The status to get children. 1 - no children, 2 - with children. Default &#x3D; 1 (optional)
     * @param int $role_id To filter result by Role ID (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillReportsListSkillRolesResponse
     */
    public function reportsSkillv1reportsskillidroles($sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null, $branch_id = null, $selection_status = null, $role_id = null)
    {
        list($response) = $this->reportsSkillv1reportsskillidrolesWithHttpInfo($sort_attr, $sort_dir, $page, $page_size, $lang, $get_total_count, $branch_id, $selection_status, $role_id);
        return $response;
    }

    /**
     * Operation reportsSkillv1reportsskillidrolesWithHttpInfo
     *
     * Retrieves all Roles from all roles who should have the given skill
     *
     * @param string $sort_attr Sort by this field, default value - gap_users. Options: role_name (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default from system settings, max 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param int $branch_id The ID of a branch (optional)
     * @param int $selection_status The status to get children. 1 - no children, 2 - with children. Default &#x3D; 1 (optional)
     * @param int $role_id To filter result by Role ID (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillReportsListSkillRolesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsSkillv1reportsskillidrolesWithHttpInfo($sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null, $branch_id = null, $selection_status = null, $role_id = null)
    {
        // parse inputs
        $resourcePath = "/skill/v1/reports/skill/{id}/roles";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // query params
        if ($branch_id !== null) {
            $queryParams['branch_id'] = $this->apiClient->getSerializer()->toQueryValue($branch_id);
        }
        // query params
        if ($selection_status !== null) {
            $queryParams['selection_status'] = $this->apiClient->getSerializer()->toQueryValue($selection_status);
        }
        // query params
        if ($role_id !== null) {
            $queryParams['role_id'] = $this->apiClient->getSerializer()->toQueryValue($role_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillReportsListSkillRolesResponse',
                '/skill/v1/reports/skill/{id}/roles'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillReportsListSkillRolesResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillReportsListSkillRolesResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportsSkillv1reportsskillidusers
     *
     * Retrieves all Users from all roles who should have the given skill
     *
     * @param string $sort_attr Sort by this field, default value - rating. Options: user_name (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default from system settings, max 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param string $user_rating Filter users. Options: gap, aligned, expert (optional)
     * @param int $role_id Filter users with this role (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillReportsListSkillUsersResponse
     */
    public function reportsSkillv1reportsskillidusers($sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null, $user_rating = null, $role_id = null)
    {
        list($response) = $this->reportsSkillv1reportsskillidusersWithHttpInfo($sort_attr, $sort_dir, $page, $page_size, $lang, $get_total_count, $user_rating, $role_id);
        return $response;
    }

    /**
     * Operation reportsSkillv1reportsskillidusersWithHttpInfo
     *
     * Retrieves all Users from all roles who should have the given skill
     *
     * @param string $sort_attr Sort by this field, default value - rating. Options: user_name (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default from system settings, max 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param string $user_rating Filter users. Options: gap, aligned, expert (optional)
     * @param int $role_id Filter users with this role (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillReportsListSkillUsersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsSkillv1reportsskillidusersWithHttpInfo($sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null, $user_rating = null, $role_id = null)
    {
        // parse inputs
        $resourcePath = "/skill/v1/reports/skill/{id}/users";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // query params
        if ($user_rating !== null) {
            $queryParams['user_rating'] = $this->apiClient->getSerializer()->toQueryValue($user_rating);
        }
        // query params
        if ($role_id !== null) {
            $queryParams['role_id'] = $this->apiClient->getSerializer()->toQueryValue($role_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillReportsListSkillUsersResponse',
                '/skill/v1/reports/skill/{id}/users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillReportsListSkillUsersResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillReportsListSkillUsersResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportsSkillv1reportsskillsgaps
     *
     * Retrieves all Roles from all roles who should have the given skill
     *
     * @param string $sort_attr Sort by this field, default value - rating. Options: user_name (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default from system settings, max 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param string $rating to filter skill list based on their ratings. Options: low, medium, high (optional)
     * @param string $skill_title to filter skill list based on skill name (optional)
     * @param int $role_id to filter skill list based on role id (optional)
     * @param string $filters URL encoded filter by: role_name(&#39;contains&#39;, &#39;not contains&#39;) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillReportsListSkillsGapsResponse
     */
    public function reportsSkillv1reportsskillsgaps($sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null, $rating = null, $skill_title = null, $role_id = null, $filters = null)
    {
        list($response) = $this->reportsSkillv1reportsskillsgapsWithHttpInfo($sort_attr, $sort_dir, $page, $page_size, $lang, $get_total_count, $rating, $skill_title, $role_id, $filters);
        return $response;
    }

    /**
     * Operation reportsSkillv1reportsskillsgapsWithHttpInfo
     *
     * Retrieves all Roles from all roles who should have the given skill
     *
     * @param string $sort_attr Sort by this field, default value - rating. Options: user_name (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default from system settings, max 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param string $rating to filter skill list based on their ratings. Options: low, medium, high (optional)
     * @param string $skill_title to filter skill list based on skill name (optional)
     * @param int $role_id to filter skill list based on role id (optional)
     * @param string $filters URL encoded filter by: role_name(&#39;contains&#39;, &#39;not contains&#39;) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillReportsListSkillsGapsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsSkillv1reportsskillsgapsWithHttpInfo($sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null, $rating = null, $skill_title = null, $role_id = null, $filters = null)
    {
        // parse inputs
        $resourcePath = "/skill/v1/reports/skills/gaps";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // query params
        if ($rating !== null) {
            $queryParams['rating'] = $this->apiClient->getSerializer()->toQueryValue($rating);
        }
        // query params
        if ($skill_title !== null) {
            $queryParams['skill_title'] = $this->apiClient->getSerializer()->toQueryValue($skill_title);
        }
        // query params
        if ($role_id !== null) {
            $queryParams['role_id'] = $this->apiClient->getSerializer()->toQueryValue($role_id);
        }
        // query params
        if ($filters !== null) {
            $queryParams['filters'] = $this->apiClient->getSerializer()->toQueryValue($filters);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillReportsListSkillsGapsResponse',
                '/skill/v1/reports/skills/gaps'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillReportsListSkillsGapsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillReportsListSkillsGapsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportsSkillv1reportsskillsidgaps
     *
     * Retrieves all Users from all roles who should have the given skill
     *
     * @param int $id Skill ID (required)
     * @param string $sort_attr Sort by this field, default value - username. Options: username, role_name, user_status (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default from system settings, max 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param string $rating to filter skill list based on their ratings. Options: gap, aligned, expert, not evaluated (optional)
     * @param string $filters URL encoded filter. This rewrites rating parameter. (optional)
     * @param string $username to filter by username (optional)
     * @param int $role_id to filter skill list based on role (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillReportsListUsersGapsResponse
     */
    public function reportsSkillv1reportsskillsidgaps($id, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null, $rating = null, $filters = null, $username = null, $role_id = null)
    {
        list($response) = $this->reportsSkillv1reportsskillsidgapsWithHttpInfo($id, $sort_attr, $sort_dir, $page, $page_size, $lang, $get_total_count, $rating, $filters, $username, $role_id);
        return $response;
    }

    /**
     * Operation reportsSkillv1reportsskillsidgapsWithHttpInfo
     *
     * Retrieves all Users from all roles who should have the given skill
     *
     * @param int $id Skill ID (required)
     * @param string $sort_attr Sort by this field, default value - username. Options: username, role_name, user_status (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default from system settings, max 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param string $rating to filter skill list based on their ratings. Options: gap, aligned, expert, not evaluated (optional)
     * @param string $filters URL encoded filter. This rewrites rating parameter. (optional)
     * @param string $username to filter by username (optional)
     * @param int $role_id to filter skill list based on role (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillReportsListUsersGapsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsSkillv1reportsskillsidgapsWithHttpInfo($id, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null, $rating = null, $filters = null, $username = null, $role_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling reportsSkillv1reportsskillsidgaps');
        }
        // parse inputs
        $resourcePath = "/skill/v1/reports/skills/{id}/gaps";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // query params
        if ($rating !== null) {
            $queryParams['rating'] = $this->apiClient->getSerializer()->toQueryValue($rating);
        }
        // query params
        if ($filters !== null) {
            $queryParams['filters'] = $this->apiClient->getSerializer()->toQueryValue($filters);
        }
        // query params
        if ($username !== null) {
            $queryParams['username'] = $this->apiClient->getSerializer()->toQueryValue($username);
        }
        // query params
        if ($role_id !== null) {
            $queryParams['role_id'] = $this->apiClient->getSerializer()->toQueryValue($role_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillReportsListUsersGapsResponse',
                '/skill/v1/reports/skills/{id}/gaps'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillReportsListUsersGapsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillReportsListUsersGapsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
