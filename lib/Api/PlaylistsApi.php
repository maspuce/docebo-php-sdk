<?php
/**
 * PlaylistsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * PlaylistsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlaylistsApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return PlaylistsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation playlistsSharev1assetsidPlaylistasset
     *
     * Assign asset to playlist
     *
     * @param int $id_playlist ID of the playlist (required)
     * @param \Swagger\Client\Model\SharePlaylistsAssignAssetSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SharePlaylistsAssignAssetResponse
     */
    public function playlistsSharev1assetsidPlaylistasset($id_playlist, $body = null)
    {
        list($response) = $this->playlistsSharev1assetsidPlaylistassetWithHttpInfo($id_playlist, $body);
        return $response;
    }

    /**
     * Operation playlistsSharev1assetsidPlaylistassetWithHttpInfo
     *
     * Assign asset to playlist
     *
     * @param int $id_playlist ID of the playlist (required)
     * @param \Swagger\Client\Model\SharePlaylistsAssignAssetSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SharePlaylistsAssignAssetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function playlistsSharev1assetsidPlaylistassetWithHttpInfo($id_playlist, $body = null)
    {
        // verify the required parameter 'id_playlist' is set
        if ($id_playlist === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_playlist when calling playlistsSharev1assetsidPlaylistasset');
        }
        // parse inputs
        $resourcePath = "/share/v1/assets/{id_playlist}/asset";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id_playlist !== null) {
            $resourcePath = str_replace(
                "{" . "id_playlist" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_playlist),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SharePlaylistsAssignAssetResponse',
                '/share/v1/assets/{id_playlist}/asset'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SharePlaylistsAssignAssetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SharePlaylistsAssignAssetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation playlistsSharev1assetsidPlaylistasset_0
     *
     * Remove asset from playlist
     *
     * @param int $id_playlist ID of the playlist (required)
     * @param \Swagger\Client\Model\SharePlaylistsRemoveAssetSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SharePlaylistsRemoveAssetResponse
     */
    public function playlistsSharev1assetsidPlaylistasset_0($id_playlist, $body = null)
    {
        list($response) = $this->playlistsSharev1assetsidPlaylistasset_0WithHttpInfo($id_playlist, $body);
        return $response;
    }

    /**
     * Operation playlistsSharev1assetsidPlaylistasset_0WithHttpInfo
     *
     * Remove asset from playlist
     *
     * @param int $id_playlist ID of the playlist (required)
     * @param \Swagger\Client\Model\SharePlaylistsRemoveAssetSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SharePlaylistsRemoveAssetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function playlistsSharev1assetsidPlaylistasset_0WithHttpInfo($id_playlist, $body = null)
    {
        // verify the required parameter 'id_playlist' is set
        if ($id_playlist === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_playlist when calling playlistsSharev1assetsidPlaylistasset_0');
        }
        // parse inputs
        $resourcePath = "/share/v1/assets/{id_playlist}/asset";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id_playlist !== null) {
            $resourcePath = str_replace(
                "{" . "id_playlist" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_playlist),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SharePlaylistsRemoveAssetResponse',
                '/share/v1/assets/{id_playlist}/asset'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SharePlaylistsRemoveAssetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SharePlaylistsRemoveAssetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation playlistsSharev1playlists
     *
     * Retrieves all playlists for user, filtered on input parameters
     *
     * @param string $search_text Search text in the asset title and description. Default empty string (optional)
     * @param string $sort_attr Sort by this field, default value - id. Options: id, title, date (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param int $id_asset Filter returned playlists by asset (optional)
     * @param int $ignore_private Filter returned playlists by is_private. Options 1 - ignore private, 0 - include private. Default: 1 (optional)
     * @param int $exclude_predefined Filter returned playlists by is predefined. Options 1 - exclude predefined, 0 - include predefined. Default: 0 (optional)
     * @param int $ignore_blank_playlists Filter returned not empty playlists. Options 1 - only not empty playlists, 0 - include empty playlists. Default: 1 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SharePlaylistsListResponse
     */
    public function playlistsSharev1playlists($search_text = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $get_total_count = null, $id_asset = null, $ignore_private = null, $exclude_predefined = null, $ignore_blank_playlists = null)
    {
        list($response) = $this->playlistsSharev1playlistsWithHttpInfo($search_text, $sort_attr, $sort_dir, $page, $page_size, $get_total_count, $id_asset, $ignore_private, $exclude_predefined, $ignore_blank_playlists);
        return $response;
    }

    /**
     * Operation playlistsSharev1playlistsWithHttpInfo
     *
     * Retrieves all playlists for user, filtered on input parameters
     *
     * @param string $search_text Search text in the asset title and description. Default empty string (optional)
     * @param string $sort_attr Sort by this field, default value - id. Options: id, title, date (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param int $id_asset Filter returned playlists by asset (optional)
     * @param int $ignore_private Filter returned playlists by is_private. Options 1 - ignore private, 0 - include private. Default: 1 (optional)
     * @param int $exclude_predefined Filter returned playlists by is predefined. Options 1 - exclude predefined, 0 - include predefined. Default: 0 (optional)
     * @param int $ignore_blank_playlists Filter returned not empty playlists. Options 1 - only not empty playlists, 0 - include empty playlists. Default: 1 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SharePlaylistsListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function playlistsSharev1playlistsWithHttpInfo($search_text = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $get_total_count = null, $id_asset = null, $ignore_private = null, $exclude_predefined = null, $ignore_blank_playlists = null)
    {
        // parse inputs
        $resourcePath = "/share/v1/playlists";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($search_text !== null) {
            $queryParams['search_text'] = $this->apiClient->getSerializer()->toQueryValue($search_text);
        }
        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // query params
        if ($id_asset !== null) {
            $queryParams['id_asset'] = $this->apiClient->getSerializer()->toQueryValue($id_asset);
        }
        // query params
        if ($ignore_private !== null) {
            $queryParams['ignore_private'] = $this->apiClient->getSerializer()->toQueryValue($ignore_private);
        }
        // query params
        if ($exclude_predefined !== null) {
            $queryParams['exclude_predefined'] = $this->apiClient->getSerializer()->toQueryValue($exclude_predefined);
        }
        // query params
        if ($ignore_blank_playlists !== null) {
            $queryParams['ignore_blank_playlists'] = $this->apiClient->getSerializer()->toQueryValue($ignore_blank_playlists);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SharePlaylistsListResponse',
                '/share/v1/playlists'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SharePlaylistsListResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SharePlaylistsListResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation playlistsSharev1playlists_0
     *
     * Creates a new playlist
     *
     * @param \Swagger\Client\Model\SharePlaylistsCreateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SharePlaylistsCreateResponse
     */
    public function playlistsSharev1playlists_0($body = null)
    {
        list($response) = $this->playlistsSharev1playlists_0WithHttpInfo($body);
        return $response;
    }

    /**
     * Operation playlistsSharev1playlists_0WithHttpInfo
     *
     * Creates a new playlist
     *
     * @param \Swagger\Client\Model\SharePlaylistsCreateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SharePlaylistsCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function playlistsSharev1playlists_0WithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/share/v1/playlists";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SharePlaylistsCreateResponse',
                '/share/v1/playlists'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SharePlaylistsCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SharePlaylistsCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation playlistsSharev1playlistsidPlaylist
     *
     * Update playlist
     *
     * @param int $id_playlist ID of playlist to fetch (required)
     * @param \Swagger\Client\Model\SharePlaylistsUpdateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SharePlaylistsUpdateResponse
     */
    public function playlistsSharev1playlistsidPlaylist($id_playlist, $body = null)
    {
        list($response) = $this->playlistsSharev1playlistsidPlaylistWithHttpInfo($id_playlist, $body);
        return $response;
    }

    /**
     * Operation playlistsSharev1playlistsidPlaylistWithHttpInfo
     *
     * Update playlist
     *
     * @param int $id_playlist ID of playlist to fetch (required)
     * @param \Swagger\Client\Model\SharePlaylistsUpdateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SharePlaylistsUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function playlistsSharev1playlistsidPlaylistWithHttpInfo($id_playlist, $body = null)
    {
        // verify the required parameter 'id_playlist' is set
        if ($id_playlist === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_playlist when calling playlistsSharev1playlistsidPlaylist');
        }
        // parse inputs
        $resourcePath = "/share/v1/playlists/{id_playlist}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id_playlist !== null) {
            $resourcePath = str_replace(
                "{" . "id_playlist" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_playlist),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SharePlaylistsUpdateResponse',
                '/share/v1/playlists/{id_playlist}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SharePlaylistsUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SharePlaylistsUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation playlistsSharev1playlistsidPlaylist_0
     *
     * Deletes one playlist
     *
     * @param int $id_playlist ID of playlist to fetch (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SharePlaylistsDeleteResponse
     */
    public function playlistsSharev1playlistsidPlaylist_0($id_playlist)
    {
        list($response) = $this->playlistsSharev1playlistsidPlaylist_0WithHttpInfo($id_playlist);
        return $response;
    }

    /**
     * Operation playlistsSharev1playlistsidPlaylist_0WithHttpInfo
     *
     * Deletes one playlist
     *
     * @param int $id_playlist ID of playlist to fetch (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SharePlaylistsDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function playlistsSharev1playlistsidPlaylist_0WithHttpInfo($id_playlist)
    {
        // verify the required parameter 'id_playlist' is set
        if ($id_playlist === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_playlist when calling playlistsSharev1playlistsidPlaylist_0');
        }
        // parse inputs
        $resourcePath = "/share/v1/playlists/{id_playlist}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id_playlist !== null) {
            $resourcePath = str_replace(
                "{" . "id_playlist" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_playlist),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SharePlaylistsDeleteResponse',
                '/share/v1/playlists/{id_playlist}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SharePlaylistsDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SharePlaylistsDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation playlistsSharev1playlistsidPlaylistassets
     *
     * Retrieves all assets for playlist
     *
     * @param int $id_playlist ID of the playlist (required)
     * @param string $search_text Search text in the asset title and description. Default empty string (optional)
     * @param string $sort_attr Sort by this field, default value - ordering. Options: id, title, date, ordering (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param int $not_in_playlist Show assets in playlist or assets not in playlist (if provided id_playlist). Options: 0 - in playlist, 1 - not in playlist. Default: 0 (optional)
     * @param int $ignore_private Filter returned assets by is_private. Options 1 - ignore private, 0 - include private. Default: 1 (optional)
     * @param int $exclude_predefined Filter returned assets by is predefined. Options 1 - exclude predefined, 0 - include predefined. Default: 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SharePlaylistsListAssetsResponse
     */
    public function playlistsSharev1playlistsidPlaylistassets($id_playlist, $search_text = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $get_total_count = null, $not_in_playlist = null, $ignore_private = null, $exclude_predefined = null)
    {
        list($response) = $this->playlistsSharev1playlistsidPlaylistassetsWithHttpInfo($id_playlist, $search_text, $sort_attr, $sort_dir, $page, $page_size, $get_total_count, $not_in_playlist, $ignore_private, $exclude_predefined);
        return $response;
    }

    /**
     * Operation playlistsSharev1playlistsidPlaylistassetsWithHttpInfo
     *
     * Retrieves all assets for playlist
     *
     * @param int $id_playlist ID of the playlist (required)
     * @param string $search_text Search text in the asset title and description. Default empty string (optional)
     * @param string $sort_attr Sort by this field, default value - ordering. Options: id, title, date, ordering (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param int $not_in_playlist Show assets in playlist or assets not in playlist (if provided id_playlist). Options: 0 - in playlist, 1 - not in playlist. Default: 0 (optional)
     * @param int $ignore_private Filter returned assets by is_private. Options 1 - ignore private, 0 - include private. Default: 1 (optional)
     * @param int $exclude_predefined Filter returned assets by is predefined. Options 1 - exclude predefined, 0 - include predefined. Default: 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SharePlaylistsListAssetsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function playlistsSharev1playlistsidPlaylistassetsWithHttpInfo($id_playlist, $search_text = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $get_total_count = null, $not_in_playlist = null, $ignore_private = null, $exclude_predefined = null)
    {
        // verify the required parameter 'id_playlist' is set
        if ($id_playlist === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_playlist when calling playlistsSharev1playlistsidPlaylistassets');
        }
        // parse inputs
        $resourcePath = "/share/v1/playlists/{id_playlist}/assets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($search_text !== null) {
            $queryParams['search_text'] = $this->apiClient->getSerializer()->toQueryValue($search_text);
        }
        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // query params
        if ($not_in_playlist !== null) {
            $queryParams['not_in_playlist'] = $this->apiClient->getSerializer()->toQueryValue($not_in_playlist);
        }
        // query params
        if ($ignore_private !== null) {
            $queryParams['ignore_private'] = $this->apiClient->getSerializer()->toQueryValue($ignore_private);
        }
        // query params
        if ($exclude_predefined !== null) {
            $queryParams['exclude_predefined'] = $this->apiClient->getSerializer()->toQueryValue($exclude_predefined);
        }
        // path params
        if ($id_playlist !== null) {
            $resourcePath = str_replace(
                "{" . "id_playlist" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_playlist),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SharePlaylistsListAssetsResponse',
                '/share/v1/playlists/{id_playlist}/assets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SharePlaylistsListAssetsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SharePlaylistsListAssetsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation playlistsSharev1playlistsidPlaylistorder
     *
     * Order assets in playlist
     *
     * @param int $id_playlist ID of playlist to fetch (required)
     * @param \Swagger\Client\Model\SharePlaylistsOrderAssetsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SharePlaylistsOrderAssetsResponse
     */
    public function playlistsSharev1playlistsidPlaylistorder($id_playlist, $body = null)
    {
        list($response) = $this->playlistsSharev1playlistsidPlaylistorderWithHttpInfo($id_playlist, $body);
        return $response;
    }

    /**
     * Operation playlistsSharev1playlistsidPlaylistorderWithHttpInfo
     *
     * Order assets in playlist
     *
     * @param int $id_playlist ID of playlist to fetch (required)
     * @param \Swagger\Client\Model\SharePlaylistsOrderAssetsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SharePlaylistsOrderAssetsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function playlistsSharev1playlistsidPlaylistorderWithHttpInfo($id_playlist, $body = null)
    {
        // verify the required parameter 'id_playlist' is set
        if ($id_playlist === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_playlist when calling playlistsSharev1playlistsidPlaylistorder');
        }
        // parse inputs
        $resourcePath = "/share/v1/playlists/{id_playlist}/order";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id_playlist !== null) {
            $resourcePath = str_replace(
                "{" . "id_playlist" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_playlist),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SharePlaylistsOrderAssetsResponse',
                '/share/v1/playlists/{id_playlist}/order'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SharePlaylistsOrderAssetsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SharePlaylistsOrderAssetsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation playlistsSkillv1playlistsplaylistIdprograms
     *
     * Assign programs to a playlist.
     *
     * @param int $playlist_id playlist id (required)
     * @param \Swagger\Client\Model\SkillPlaylistsAssignProgramsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillPlaylistsAssignProgramsResponse
     */
    public function playlistsSkillv1playlistsplaylistIdprograms($playlist_id, $body = null)
    {
        list($response) = $this->playlistsSkillv1playlistsplaylistIdprogramsWithHttpInfo($playlist_id, $body);
        return $response;
    }

    /**
     * Operation playlistsSkillv1playlistsplaylistIdprogramsWithHttpInfo
     *
     * Assign programs to a playlist.
     *
     * @param int $playlist_id playlist id (required)
     * @param \Swagger\Client\Model\SkillPlaylistsAssignProgramsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillPlaylistsAssignProgramsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function playlistsSkillv1playlistsplaylistIdprogramsWithHttpInfo($playlist_id, $body = null)
    {
        // verify the required parameter 'playlist_id' is set
        if ($playlist_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $playlist_id when calling playlistsSkillv1playlistsplaylistIdprograms');
        }
        // parse inputs
        $resourcePath = "/skill/v1/playlists/{playlist_id]}/programs";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($playlist_id !== null) {
            $resourcePath = str_replace(
                "{" . "playlist_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($playlist_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillPlaylistsAssignProgramsResponse',
                '/skill/v1/playlists/{playlist_id]}/programs'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillPlaylistsAssignProgramsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillPlaylistsAssignProgramsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation playlistsSkillv1playlistsplaylistIdprograms_0
     *
     * Unassigns an playlist from a Program
     *
     * @param int $playlist_id playlist id (required)
     * @param \Swagger\Client\Model\SkillPlaylistsUnassignProgramsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillPlaylistsUnassignProgramsResponse
     */
    public function playlistsSkillv1playlistsplaylistIdprograms_0($playlist_id, $body = null)
    {
        list($response) = $this->playlistsSkillv1playlistsplaylistIdprograms_0WithHttpInfo($playlist_id, $body);
        return $response;
    }

    /**
     * Operation playlistsSkillv1playlistsplaylistIdprograms_0WithHttpInfo
     *
     * Unassigns an playlist from a Program
     *
     * @param int $playlist_id playlist id (required)
     * @param \Swagger\Client\Model\SkillPlaylistsUnassignProgramsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillPlaylistsUnassignProgramsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function playlistsSkillv1playlistsplaylistIdprograms_0WithHttpInfo($playlist_id, $body = null)
    {
        // verify the required parameter 'playlist_id' is set
        if ($playlist_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $playlist_id when calling playlistsSkillv1playlistsplaylistIdprograms_0');
        }
        // parse inputs
        $resourcePath = "/skill/v1/playlists/{playlist_id}/programs";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($playlist_id !== null) {
            $resourcePath = str_replace(
                "{" . "playlist_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($playlist_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillPlaylistsUnassignProgramsResponse',
                '/skill/v1/playlists/{playlist_id}/programs'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillPlaylistsUnassignProgramsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillPlaylistsUnassignProgramsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation playlistsSkillv1playlistsplaylistIdskills
     *
     * Retrieves the list of Skills, that are assigned to given playlist
     *
     * @param int $playlist_id Playlist id (required)
     * @param string $sort_attr Sort by this field, default value - title. Options: title, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillPlaylistsListSkillsResponse
     */
    public function playlistsSkillv1playlistsplaylistIdskills($playlist_id, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null)
    {
        list($response) = $this->playlistsSkillv1playlistsplaylistIdskillsWithHttpInfo($playlist_id, $sort_attr, $sort_dir, $page, $page_size, $lang, $get_total_count);
        return $response;
    }

    /**
     * Operation playlistsSkillv1playlistsplaylistIdskillsWithHttpInfo
     *
     * Retrieves the list of Skills, that are assigned to given playlist
     *
     * @param int $playlist_id Playlist id (required)
     * @param string $sort_attr Sort by this field, default value - title. Options: title, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillPlaylistsListSkillsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function playlistsSkillv1playlistsplaylistIdskillsWithHttpInfo($playlist_id, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null)
    {
        // verify the required parameter 'playlist_id' is set
        if ($playlist_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $playlist_id when calling playlistsSkillv1playlistsplaylistIdskills');
        }
        // parse inputs
        $resourcePath = "/skill/v1/playlists/{playlist_id}/skills";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // path params
        if ($playlist_id !== null) {
            $resourcePath = str_replace(
                "{" . "playlist_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($playlist_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillPlaylistsListSkillsResponse',
                '/skill/v1/playlists/{playlist_id}/skills'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillPlaylistsListSkillsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillPlaylistsListSkillsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation playlistsSkillv1playlistsplaylistIdskills_0
     *
     * Assign skill to a Playlist.
     *
     * @param int $playlist_id Playlist id (required)
     * @param \Swagger\Client\Model\SkillPlaylistsCreateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillPlaylistsCreateResponse
     */
    public function playlistsSkillv1playlistsplaylistIdskills_0($playlist_id, $body = null)
    {
        list($response) = $this->playlistsSkillv1playlistsplaylistIdskills_0WithHttpInfo($playlist_id, $body);
        return $response;
    }

    /**
     * Operation playlistsSkillv1playlistsplaylistIdskills_0WithHttpInfo
     *
     * Assign skill to a Playlist.
     *
     * @param int $playlist_id Playlist id (required)
     * @param \Swagger\Client\Model\SkillPlaylistsCreateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillPlaylistsCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function playlistsSkillv1playlistsplaylistIdskills_0WithHttpInfo($playlist_id, $body = null)
    {
        // verify the required parameter 'playlist_id' is set
        if ($playlist_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $playlist_id when calling playlistsSkillv1playlistsplaylistIdskills_0');
        }
        // parse inputs
        $resourcePath = "/skill/v1/playlists/{playlist_id}/skills";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($playlist_id !== null) {
            $resourcePath = str_replace(
                "{" . "playlist_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($playlist_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillPlaylistsCreateResponse',
                '/skill/v1/playlists/{playlist_id}/skills'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillPlaylistsCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillPlaylistsCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation playlistsSkillv1playlistsplaylistIdskills_1
     *
     * De-assigns an existing skill(s) from given playlist
     *
     * @param int $playlist_id ID of a playlist to delete (required)
     * @param \Swagger\Client\Model\SkillPlaylistsDeleteSkillsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillPlaylistsDeleteSkillsResponse
     */
    public function playlistsSkillv1playlistsplaylistIdskills_1($playlist_id, $body = null)
    {
        list($response) = $this->playlistsSkillv1playlistsplaylistIdskills_1WithHttpInfo($playlist_id, $body);
        return $response;
    }

    /**
     * Operation playlistsSkillv1playlistsplaylistIdskills_1WithHttpInfo
     *
     * De-assigns an existing skill(s) from given playlist
     *
     * @param int $playlist_id ID of a playlist to delete (required)
     * @param \Swagger\Client\Model\SkillPlaylistsDeleteSkillsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillPlaylistsDeleteSkillsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function playlistsSkillv1playlistsplaylistIdskills_1WithHttpInfo($playlist_id, $body = null)
    {
        // verify the required parameter 'playlist_id' is set
        if ($playlist_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $playlist_id when calling playlistsSkillv1playlistsplaylistIdskills_1');
        }
        // parse inputs
        $resourcePath = "/skill/v1/playlists/{playlist_id}/skills";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($playlist_id !== null) {
            $resourcePath = str_replace(
                "{" . "playlist_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($playlist_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillPlaylistsDeleteSkillsResponse',
                '/skill/v1/playlists/{playlist_id}/skills'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillPlaylistsDeleteSkillsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillPlaylistsDeleteSkillsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
