<?php
/**
 * EnrollmentfieldApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * EnrollmentfieldApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EnrollmentfieldApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return EnrollmentfieldApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation enrollmentfieldManagev1enrollmentFields
     *
     * Retrieves the list of Enrollment fields, filtered on input parameters
     *
     * @param string[] $enrollment_field_title Search text in the enrollment field title. Default empty array. OR is performed among multiple array items (optional)
     * @param string $sort_attr Sort by this field, default value - id. Options: title, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param int $course Filter enrollment fields by course (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageEnrollmentfieldListResponse
     */
    public function enrollmentfieldManagev1enrollmentFields($enrollment_field_title = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null, $course = null)
    {
        list($response) = $this->enrollmentfieldManagev1enrollmentFieldsWithHttpInfo($enrollment_field_title, $sort_attr, $sort_dir, $page, $page_size, $lang, $get_total_count, $course);
        return $response;
    }

    /**
     * Operation enrollmentfieldManagev1enrollmentFieldsWithHttpInfo
     *
     * Retrieves the list of Enrollment fields, filtered on input parameters
     *
     * @param string[] $enrollment_field_title Search text in the enrollment field title. Default empty array. OR is performed among multiple array items (optional)
     * @param string $sort_attr Sort by this field, default value - id. Options: title, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param int $course Filter enrollment fields by course (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageEnrollmentfieldListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function enrollmentfieldManagev1enrollmentFieldsWithHttpInfo($enrollment_field_title = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null, $course = null)
    {
        // parse inputs
        $resourcePath = "/manage/v1/enrollment_fields";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if (is_array($enrollment_field_title)) {
            $enrollment_field_title = $this->apiClient->getSerializer()->serializeCollection($enrollment_field_title, 'brackets', true);
        }
        if ($enrollment_field_title !== null) {
            $queryParams['enrollment_field_title'] = $this->apiClient->getSerializer()->toQueryValue($enrollment_field_title);
        }
        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // query params
        if ($course !== null) {
            $queryParams['course'] = $this->apiClient->getSerializer()->toQueryValue($course);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageEnrollmentfieldListResponse',
                '/manage/v1/enrollment_fields'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageEnrollmentfieldListResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageEnrollmentfieldListResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation enrollmentfieldManagev1enrollmentFields_0
     *
     * Create enrollment field
     *
     * @param \Swagger\Client\Model\ManageEnrollmentfieldCreateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageEnrollmentfieldCreateResponse
     */
    public function enrollmentfieldManagev1enrollmentFields_0($body = null)
    {
        list($response) = $this->enrollmentfieldManagev1enrollmentFields_0WithHttpInfo($body);
        return $response;
    }

    /**
     * Operation enrollmentfieldManagev1enrollmentFields_0WithHttpInfo
     *
     * Create enrollment field
     *
     * @param \Swagger\Client\Model\ManageEnrollmentfieldCreateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageEnrollmentfieldCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function enrollmentfieldManagev1enrollmentFields_0WithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/manage/v1/enrollment_fields";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageEnrollmentfieldCreateResponse',
                '/manage/v1/enrollment_fields'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageEnrollmentfieldCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageEnrollmentfieldCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation enrollmentfieldManagev1enrollmentFields_1
     *
     * Deletes more then one enrolment fields
     *
     * @param \Swagger\Client\Model\ManageEnrollmentfieldMultipleDeleteSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageEnrollmentfieldMultipleDeleteResponse
     */
    public function enrollmentfieldManagev1enrollmentFields_1($body = null)
    {
        list($response) = $this->enrollmentfieldManagev1enrollmentFields_1WithHttpInfo($body);
        return $response;
    }

    /**
     * Operation enrollmentfieldManagev1enrollmentFields_1WithHttpInfo
     *
     * Deletes more then one enrolment fields
     *
     * @param \Swagger\Client\Model\ManageEnrollmentfieldMultipleDeleteSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageEnrollmentfieldMultipleDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function enrollmentfieldManagev1enrollmentFields_1WithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/manage/v1/enrollment_fields";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageEnrollmentfieldMultipleDeleteResponse',
                '/manage/v1/enrollment_fields'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageEnrollmentfieldMultipleDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageEnrollmentfieldMultipleDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation enrollmentfieldManagev1enrollmentFieldsfieldId
     *
     * Update enrollment fields for selected courses
     *
     * @param int $field_id Id of selected field. (required)
     * @param \Swagger\Client\Model\ManageEnrollmentfieldUpdateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageEnrollmentfieldUpdateResponse
     */
    public function enrollmentfieldManagev1enrollmentFieldsfieldId($field_id, $body = null)
    {
        list($response) = $this->enrollmentfieldManagev1enrollmentFieldsfieldIdWithHttpInfo($field_id, $body);
        return $response;
    }

    /**
     * Operation enrollmentfieldManagev1enrollmentFieldsfieldIdWithHttpInfo
     *
     * Update enrollment fields for selected courses
     *
     * @param int $field_id Id of selected field. (required)
     * @param \Swagger\Client\Model\ManageEnrollmentfieldUpdateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageEnrollmentfieldUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function enrollmentfieldManagev1enrollmentFieldsfieldIdWithHttpInfo($field_id, $body = null)
    {
        // verify the required parameter 'field_id' is set
        if ($field_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $field_id when calling enrollmentfieldManagev1enrollmentFieldsfieldId');
        }
        // parse inputs
        $resourcePath = "/manage/v1/enrollment_fields/{field_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($field_id !== null) {
            $resourcePath = str_replace(
                "{" . "field_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($field_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageEnrollmentfieldUpdateResponse',
                '/manage/v1/enrollment_fields/{field_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageEnrollmentfieldUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageEnrollmentfieldUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation enrollmentfieldManagev1enrollmentFieldsfieldId_0
     *
     * Deletes one enrolment field
     *
     * @param int $field_id Id of selected field. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageEnrollmentfieldDeleteResponse
     */
    public function enrollmentfieldManagev1enrollmentFieldsfieldId_0($field_id)
    {
        list($response) = $this->enrollmentfieldManagev1enrollmentFieldsfieldId_0WithHttpInfo($field_id);
        return $response;
    }

    /**
     * Operation enrollmentfieldManagev1enrollmentFieldsfieldId_0WithHttpInfo
     *
     * Deletes one enrolment field
     *
     * @param int $field_id Id of selected field. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageEnrollmentfieldDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function enrollmentfieldManagev1enrollmentFieldsfieldId_0WithHttpInfo($field_id)
    {
        // verify the required parameter 'field_id' is set
        if ($field_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $field_id when calling enrollmentfieldManagev1enrollmentFieldsfieldId_0');
        }
        // parse inputs
        $resourcePath = "/manage/v1/enrollment_fields/{field_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($field_id !== null) {
            $resourcePath = str_replace(
                "{" . "field_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($field_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageEnrollmentfieldDeleteResponse',
                '/manage/v1/enrollment_fields/{field_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageEnrollmentfieldDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageEnrollmentfieldDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
