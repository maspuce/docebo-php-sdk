<?php
/**
 * SubscriptionRecordApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * SubscriptionRecordApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SubscriptionRecordApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return SubscriptionRecordApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation subscriptionRecordLearnv1subRecord
     *
     * List Subscription records
     *
     * @param int $record_id Subscription record ID (optional)
     * @param string $record_name Subscription record name (optional)
     * @param string $code Subscription record code (optional)
     * @param string $sort_attr Sort by this field, default value - record_id. Options: record_id or record_name (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param string $filters serialize object containing list of filters and their options. List of filters - ( code:{like, contains, not_equal, ends_with, starts_with, is_empty, not_empty, not_start_with, not_end_with, not_contains}, sold_to:{like, contains, not_equal, ends_with, starts_with, is_empty, not_empty, not_start_with, not_end_with, not_contains}, bundle_name:{like, contains, not_equal, ends_with, starts_with, is_empty, not_empty, not_start_with, not_end_with, not_contains}, plan_name:{like, contains, not_equal, ends_with, starts_with, is_empty, not_empty, not_start_with, not_end_with, not_contains} ) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnSubscriptionrecordIndexResponse
     */
    public function subscriptionRecordLearnv1subRecord($record_id = null, $record_name = null, $code = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $get_total_count = null, $filters = null)
    {
        list($response) = $this->subscriptionRecordLearnv1subRecordWithHttpInfo($record_id, $record_name, $code, $sort_attr, $sort_dir, $page, $page_size, $get_total_count, $filters);
        return $response;
    }

    /**
     * Operation subscriptionRecordLearnv1subRecordWithHttpInfo
     *
     * List Subscription records
     *
     * @param int $record_id Subscription record ID (optional)
     * @param string $record_name Subscription record name (optional)
     * @param string $code Subscription record code (optional)
     * @param string $sort_attr Sort by this field, default value - record_id. Options: record_id or record_name (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param string $filters serialize object containing list of filters and their options. List of filters - ( code:{like, contains, not_equal, ends_with, starts_with, is_empty, not_empty, not_start_with, not_end_with, not_contains}, sold_to:{like, contains, not_equal, ends_with, starts_with, is_empty, not_empty, not_start_with, not_end_with, not_contains}, bundle_name:{like, contains, not_equal, ends_with, starts_with, is_empty, not_empty, not_start_with, not_end_with, not_contains}, plan_name:{like, contains, not_equal, ends_with, starts_with, is_empty, not_empty, not_start_with, not_end_with, not_contains} ) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnSubscriptionrecordIndexResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionRecordLearnv1subRecordWithHttpInfo($record_id = null, $record_name = null, $code = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $get_total_count = null, $filters = null)
    {
        // parse inputs
        $resourcePath = "/learn/v1/sub_record";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($record_id !== null) {
            $queryParams['record_id'] = $this->apiClient->getSerializer()->toQueryValue($record_id);
        }
        // query params
        if ($record_name !== null) {
            $queryParams['record_name'] = $this->apiClient->getSerializer()->toQueryValue($record_name);
        }
        // query params
        if ($code !== null) {
            $queryParams['code'] = $this->apiClient->getSerializer()->toQueryValue($code);
        }
        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // query params
        if ($filters !== null) {
            $queryParams['filters'] = $this->apiClient->getSerializer()->toQueryValue($filters);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnSubscriptionrecordIndexResponse',
                '/learn/v1/sub_record'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnSubscriptionrecordIndexResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnSubscriptionrecordIndexResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionRecordLearnv1subRecord_0
     *
     * Creates a new Subscription record
     *
     * @param \Swagger\Client\Model\LearnSubscriptionrecordCreateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnSubscriptionrecordCreateResponse
     */
    public function subscriptionRecordLearnv1subRecord_0($body = null)
    {
        list($response) = $this->subscriptionRecordLearnv1subRecord_0WithHttpInfo($body);
        return $response;
    }

    /**
     * Operation subscriptionRecordLearnv1subRecord_0WithHttpInfo
     *
     * Creates a new Subscription record
     *
     * @param \Swagger\Client\Model\LearnSubscriptionrecordCreateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnSubscriptionrecordCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionRecordLearnv1subRecord_0WithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/learn/v1/sub_record";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnSubscriptionrecordCreateResponse',
                '/learn/v1/sub_record'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnSubscriptionrecordCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnSubscriptionrecordCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionRecordLearnv1subRecordbatch
     *
     * Batch import for subscription bundles visibility
     *
     * @param \Swagger\Client\Model\LearnSubscriptionrecordBatchSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnSubscriptionrecordBatchResponse
     */
    public function subscriptionRecordLearnv1subRecordbatch($body = null)
    {
        list($response) = $this->subscriptionRecordLearnv1subRecordbatchWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation subscriptionRecordLearnv1subRecordbatchWithHttpInfo
     *
     * Batch import for subscription bundles visibility
     *
     * @param \Swagger\Client\Model\LearnSubscriptionrecordBatchSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnSubscriptionrecordBatchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionRecordLearnv1subRecordbatchWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/learn/v1/sub_record/batch";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnSubscriptionrecordBatchResponse',
                '/learn/v1/sub_record/batch'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnSubscriptionrecordBatchResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnSubscriptionrecordBatchResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionRecordLearnv1subRecorditemsbatch
     *
     * Batch creates a new subscription record item
     *
     * @param \Swagger\Client\Model\LearnSubscriptionrecordBatchItemsL2Schema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnSubscriptionrecordBatchItemsL2Response
     */
    public function subscriptionRecordLearnv1subRecorditemsbatch($body = null)
    {
        list($response) = $this->subscriptionRecordLearnv1subRecorditemsbatchWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation subscriptionRecordLearnv1subRecorditemsbatchWithHttpInfo
     *
     * Batch creates a new subscription record item
     *
     * @param \Swagger\Client\Model\LearnSubscriptionrecordBatchItemsL2Schema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnSubscriptionrecordBatchItemsL2Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionRecordLearnv1subRecorditemsbatchWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/learn/v1/sub_record/items/batch";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnSubscriptionrecordBatchItemsL2Response',
                '/learn/v1/sub_record/items/batch'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnSubscriptionrecordBatchItemsL2Response', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnSubscriptionrecordBatchItemsL2Response', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionRecordLearnv1subRecordrecordId
     *
     * View a Subscription record
     *
     * @param int $record_id ID of the subscription record (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnSubscriptionrecordViewResponse
     */
    public function subscriptionRecordLearnv1subRecordrecordId($record_id)
    {
        list($response) = $this->subscriptionRecordLearnv1subRecordrecordIdWithHttpInfo($record_id);
        return $response;
    }

    /**
     * Operation subscriptionRecordLearnv1subRecordrecordIdWithHttpInfo
     *
     * View a Subscription record
     *
     * @param int $record_id ID of the subscription record (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnSubscriptionrecordViewResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionRecordLearnv1subRecordrecordIdWithHttpInfo($record_id)
    {
        // verify the required parameter 'record_id' is set
        if ($record_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $record_id when calling subscriptionRecordLearnv1subRecordrecordId');
        }
        // parse inputs
        $resourcePath = "/learn/v1/sub_record/{record_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($record_id !== null) {
            $resourcePath = str_replace(
                "{" . "record_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($record_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnSubscriptionrecordViewResponse',
                '/learn/v1/sub_record/{record_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnSubscriptionrecordViewResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnSubscriptionrecordViewResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionRecordLearnv1subRecordrecordId_0
     *
     * Updates a Subscription record
     *
     * @param int $record_id ID of the subscription record (required)
     * @param \Swagger\Client\Model\LearnSubscriptionrecordUpdateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnSubscriptionrecordUpdateResponse
     */
    public function subscriptionRecordLearnv1subRecordrecordId_0($record_id, $body = null)
    {
        list($response) = $this->subscriptionRecordLearnv1subRecordrecordId_0WithHttpInfo($record_id, $body);
        return $response;
    }

    /**
     * Operation subscriptionRecordLearnv1subRecordrecordId_0WithHttpInfo
     *
     * Updates a Subscription record
     *
     * @param int $record_id ID of the subscription record (required)
     * @param \Swagger\Client\Model\LearnSubscriptionrecordUpdateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnSubscriptionrecordUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionRecordLearnv1subRecordrecordId_0WithHttpInfo($record_id, $body = null)
    {
        // verify the required parameter 'record_id' is set
        if ($record_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $record_id when calling subscriptionRecordLearnv1subRecordrecordId_0');
        }
        // parse inputs
        $resourcePath = "/learn/v1/sub_record/{record_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($record_id !== null) {
            $resourcePath = str_replace(
                "{" . "record_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($record_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnSubscriptionrecordUpdateResponse',
                '/learn/v1/sub_record/{record_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnSubscriptionrecordUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnSubscriptionrecordUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionRecordLearnv1subRecordrecordId_1
     *
     * Delete a Subscription record
     *
     * @param int $record_id ID of the subscription record (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnSubscriptionrecordDeleteResponse
     */
    public function subscriptionRecordLearnv1subRecordrecordId_1($record_id)
    {
        list($response) = $this->subscriptionRecordLearnv1subRecordrecordId_1WithHttpInfo($record_id);
        return $response;
    }

    /**
     * Operation subscriptionRecordLearnv1subRecordrecordId_1WithHttpInfo
     *
     * Delete a Subscription record
     *
     * @param int $record_id ID of the subscription record (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnSubscriptionrecordDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionRecordLearnv1subRecordrecordId_1WithHttpInfo($record_id)
    {
        // verify the required parameter 'record_id' is set
        if ($record_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $record_id when calling subscriptionRecordLearnv1subRecordrecordId_1');
        }
        // parse inputs
        $resourcePath = "/learn/v1/sub_record/{record_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($record_id !== null) {
            $resourcePath = str_replace(
                "{" . "record_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($record_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnSubscriptionrecordDeleteResponse',
                '/learn/v1/sub_record/{record_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnSubscriptionrecordDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnSubscriptionrecordDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionRecordLearnv1subRecordrecordIdgetAssociatedUsers
     *
     * Returns list of users associated to given record
     *
     * @param int $record_id ID of the record (required)
     * @param string $sort_attr Sort by this field, default value - first_name. Options: username, first_name, status, level, email, last_access_date, expiration_date, language, email_validation_status (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param string $search_text Text to search in first name, last name and username of the users (optional)
     * @param string $filters serialize object containing list of filters and their options. List of filters - ( code:{like, contains, not_equal, ends_with, starts_with, is_empty, not_empty, not_start_with, not_end_with, not_contains}, sold_to:{like, contains, not_equal, ends_with, starts_with, is_empty, not_empty, not_start_with, not_end_with, not_contains}, bundle_name:{like, contains, not_equal, ends_with, starts_with, is_empty, not_empty, not_start_with, not_end_with, not_contains}, plan_name:{like, contains, not_equal, ends_with, starts_with, is_empty, not_empty, not_start_with, not_end_with, not_contains} ) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnSubscriptionrecordGetAssociatedUsersResponse
     */
    public function subscriptionRecordLearnv1subRecordrecordIdgetAssociatedUsers($record_id, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $get_total_count = null, $search_text = null, $filters = null)
    {
        list($response) = $this->subscriptionRecordLearnv1subRecordrecordIdgetAssociatedUsersWithHttpInfo($record_id, $sort_attr, $sort_dir, $page, $page_size, $get_total_count, $search_text, $filters);
        return $response;
    }

    /**
     * Operation subscriptionRecordLearnv1subRecordrecordIdgetAssociatedUsersWithHttpInfo
     *
     * Returns list of users associated to given record
     *
     * @param int $record_id ID of the record (required)
     * @param string $sort_attr Sort by this field, default value - first_name. Options: username, first_name, status, level, email, last_access_date, expiration_date, language, email_validation_status (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param string $search_text Text to search in first name, last name and username of the users (optional)
     * @param string $filters serialize object containing list of filters and their options. List of filters - ( code:{like, contains, not_equal, ends_with, starts_with, is_empty, not_empty, not_start_with, not_end_with, not_contains}, sold_to:{like, contains, not_equal, ends_with, starts_with, is_empty, not_empty, not_start_with, not_end_with, not_contains}, bundle_name:{like, contains, not_equal, ends_with, starts_with, is_empty, not_empty, not_start_with, not_end_with, not_contains}, plan_name:{like, contains, not_equal, ends_with, starts_with, is_empty, not_empty, not_start_with, not_end_with, not_contains} ) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnSubscriptionrecordGetAssociatedUsersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionRecordLearnv1subRecordrecordIdgetAssociatedUsersWithHttpInfo($record_id, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $get_total_count = null, $search_text = null, $filters = null)
    {
        // verify the required parameter 'record_id' is set
        if ($record_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $record_id when calling subscriptionRecordLearnv1subRecordrecordIdgetAssociatedUsers');
        }
        // parse inputs
        $resourcePath = "/learn/v1/sub_record/{record_id}/get_associated_users";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // query params
        if ($search_text !== null) {
            $queryParams['search_text'] = $this->apiClient->getSerializer()->toQueryValue($search_text);
        }
        // query params
        if ($filters !== null) {
            $queryParams['filters'] = $this->apiClient->getSerializer()->toQueryValue($filters);
        }
        // path params
        if ($record_id !== null) {
            $resourcePath = str_replace(
                "{" . "record_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($record_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnSubscriptionrecordGetAssociatedUsersResponse',
                '/learn/v1/sub_record/{record_id}/get_associated_users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnSubscriptionrecordGetAssociatedUsersResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnSubscriptionrecordGetAssociatedUsersResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionRecordLearnv1subRecordrecordIdgetUsers
     *
     * Retrieves all users by Subscription record ID
     *
     * @param int $record_id Subscription record ID (required)
     * @param string $sort_attr Sort by this field, default value - user_name. Options: user_name, first_name, last_name, email (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnSubscriptionrecordGetUsersResponse
     */
    public function subscriptionRecordLearnv1subRecordrecordIdgetUsers($record_id, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $get_total_count = null)
    {
        list($response) = $this->subscriptionRecordLearnv1subRecordrecordIdgetUsersWithHttpInfo($record_id, $sort_attr, $sort_dir, $page, $page_size, $get_total_count);
        return $response;
    }

    /**
     * Operation subscriptionRecordLearnv1subRecordrecordIdgetUsersWithHttpInfo
     *
     * Retrieves all users by Subscription record ID
     *
     * @param int $record_id Subscription record ID (required)
     * @param string $sort_attr Sort by this field, default value - user_name. Options: user_name, first_name, last_name, email (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnSubscriptionrecordGetUsersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionRecordLearnv1subRecordrecordIdgetUsersWithHttpInfo($record_id, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $get_total_count = null)
    {
        // verify the required parameter 'record_id' is set
        if ($record_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $record_id when calling subscriptionRecordLearnv1subRecordrecordIdgetUsers');
        }
        // parse inputs
        $resourcePath = "/learn/v1/sub_record/{record_id}/get_users";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // path params
        if ($record_id !== null) {
            $resourcePath = str_replace(
                "{" . "record_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($record_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnSubscriptionrecordGetUsersResponse',
                '/learn/v1/sub_record/{record_id}/get_users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnSubscriptionrecordGetUsersResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnSubscriptionrecordGetUsersResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionRecordLearnv1subRecordrecordIditem
     *
     * Creates a new subscription record item
     *
     * @param int $record_id Subscription record ID (required)
     * @param \Swagger\Client\Model\LearnSubscriptionrecordCreateItemSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnSubscriptionrecordCreateItemResponse
     */
    public function subscriptionRecordLearnv1subRecordrecordIditem($record_id, $body = null)
    {
        list($response) = $this->subscriptionRecordLearnv1subRecordrecordIditemWithHttpInfo($record_id, $body);
        return $response;
    }

    /**
     * Operation subscriptionRecordLearnv1subRecordrecordIditemWithHttpInfo
     *
     * Creates a new subscription record item
     *
     * @param int $record_id Subscription record ID (required)
     * @param \Swagger\Client\Model\LearnSubscriptionrecordCreateItemSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnSubscriptionrecordCreateItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionRecordLearnv1subRecordrecordIditemWithHttpInfo($record_id, $body = null)
    {
        // verify the required parameter 'record_id' is set
        if ($record_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $record_id when calling subscriptionRecordLearnv1subRecordrecordIditem');
        }
        // parse inputs
        $resourcePath = "/learn/v1/sub_record/{record_id}/item";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($record_id !== null) {
            $resourcePath = str_replace(
                "{" . "record_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($record_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnSubscriptionrecordCreateItemResponse',
                '/learn/v1/sub_record/{record_id}/item'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnSubscriptionrecordCreateItemResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnSubscriptionrecordCreateItemResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionRecordLearnv1subRecordrecordIditem_0
     *
     * Deletes subscription record items
     *
     * @param int $record_id ID of subscription record to fetch (required)
     * @param \Swagger\Client\Model\LearnSubscriptionrecordDeleteItemsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnSubscriptionrecordDeleteItemsResponse
     */
    public function subscriptionRecordLearnv1subRecordrecordIditem_0($record_id, $body = null)
    {
        list($response) = $this->subscriptionRecordLearnv1subRecordrecordIditem_0WithHttpInfo($record_id, $body);
        return $response;
    }

    /**
     * Operation subscriptionRecordLearnv1subRecordrecordIditem_0WithHttpInfo
     *
     * Deletes subscription record items
     *
     * @param int $record_id ID of subscription record to fetch (required)
     * @param \Swagger\Client\Model\LearnSubscriptionrecordDeleteItemsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnSubscriptionrecordDeleteItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionRecordLearnv1subRecordrecordIditem_0WithHttpInfo($record_id, $body = null)
    {
        // verify the required parameter 'record_id' is set
        if ($record_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $record_id when calling subscriptionRecordLearnv1subRecordrecordIditem_0');
        }
        // parse inputs
        $resourcePath = "/learn/v1/sub_record/{record_id}/item";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($record_id !== null) {
            $resourcePath = str_replace(
                "{" . "record_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($record_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnSubscriptionrecordDeleteItemsResponse',
                '/learn/v1/sub_record/{record_id}/item'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnSubscriptionrecordDeleteItemsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnSubscriptionrecordDeleteItemsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionRecordLearnv1subRecordrecordIditemitemId
     *
     * Deletes subscription record item
     *
     * @param int $record_id ID of subscription record to fetch (required)
     * @param int $item_id ID of subscription record item to fetch (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnSubscriptionrecordDeleteItemResponse
     */
    public function subscriptionRecordLearnv1subRecordrecordIditemitemId($record_id, $item_id)
    {
        list($response) = $this->subscriptionRecordLearnv1subRecordrecordIditemitemIdWithHttpInfo($record_id, $item_id);
        return $response;
    }

    /**
     * Operation subscriptionRecordLearnv1subRecordrecordIditemitemIdWithHttpInfo
     *
     * Deletes subscription record item
     *
     * @param int $record_id ID of subscription record to fetch (required)
     * @param int $item_id ID of subscription record item to fetch (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnSubscriptionrecordDeleteItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionRecordLearnv1subRecordrecordIditemitemIdWithHttpInfo($record_id, $item_id)
    {
        // verify the required parameter 'record_id' is set
        if ($record_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $record_id when calling subscriptionRecordLearnv1subRecordrecordIditemitemId');
        }
        // verify the required parameter 'item_id' is set
        if ($item_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $item_id when calling subscriptionRecordLearnv1subRecordrecordIditemitemId');
        }
        // parse inputs
        $resourcePath = "/learn/v1/sub_record/{record_id}/item/{item_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($record_id !== null) {
            $resourcePath = str_replace(
                "{" . "record_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($record_id),
                $resourcePath
            );
        }
        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                "{" . "item_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($item_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnSubscriptionrecordDeleteItemResponse',
                '/learn/v1/sub_record/{record_id}/item/{item_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnSubscriptionrecordDeleteItemResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnSubscriptionrecordDeleteItemResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionRecordLearnv1subRecordrecordIdrenew
     *
     * Renew a new Subscription record
     *
     * @param int $record_id ID of the subscription record (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnSubscriptionrecordRenewResponse
     */
    public function subscriptionRecordLearnv1subRecordrecordIdrenew($record_id)
    {
        list($response) = $this->subscriptionRecordLearnv1subRecordrecordIdrenewWithHttpInfo($record_id);
        return $response;
    }

    /**
     * Operation subscriptionRecordLearnv1subRecordrecordIdrenewWithHttpInfo
     *
     * Renew a new Subscription record
     *
     * @param int $record_id ID of the subscription record (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnSubscriptionrecordRenewResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionRecordLearnv1subRecordrecordIdrenewWithHttpInfo($record_id)
    {
        // verify the required parameter 'record_id' is set
        if ($record_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $record_id when calling subscriptionRecordLearnv1subRecordrecordIdrenew');
        }
        // parse inputs
        $resourcePath = "/learn/v1/sub_record/{record_id}/renew";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($record_id !== null) {
            $resourcePath = str_replace(
                "{" . "record_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($record_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnSubscriptionrecordRenewResponse',
                '/learn/v1/sub_record/{record_id}/renew'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnSubscriptionrecordRenewResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnSubscriptionrecordRenewResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionRecordLearnv1subRecordrecordIdterminate
     *
     * Terminates a Subscription record
     *
     * @param int $record_id ID of the subscription record (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnSubscriptionrecordTerminateResponse
     */
    public function subscriptionRecordLearnv1subRecordrecordIdterminate($record_id)
    {
        list($response) = $this->subscriptionRecordLearnv1subRecordrecordIdterminateWithHttpInfo($record_id);
        return $response;
    }

    /**
     * Operation subscriptionRecordLearnv1subRecordrecordIdterminateWithHttpInfo
     *
     * Terminates a Subscription record
     *
     * @param int $record_id ID of the subscription record (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnSubscriptionrecordTerminateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionRecordLearnv1subRecordrecordIdterminateWithHttpInfo($record_id)
    {
        // verify the required parameter 'record_id' is set
        if ($record_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $record_id when calling subscriptionRecordLearnv1subRecordrecordIdterminate');
        }
        // parse inputs
        $resourcePath = "/learn/v1/sub_record/{record_id}/terminate";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($record_id !== null) {
            $resourcePath = str_replace(
                "{" . "record_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($record_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnSubscriptionrecordTerminateResponse',
                '/learn/v1/sub_record/{record_id}/terminate'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnSubscriptionrecordTerminateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnSubscriptionrecordTerminateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionRecordLearnv1subRecordrecordIdunassociateUsers
     *
     * Unassociate users from record
     *
     * @param int $record_id ID of the record (required)
     * @param \Swagger\Client\Model\LearnSubscriptionrecordUnassociateUsersSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnSubscriptionrecordUnassociateUsersResponse
     */
    public function subscriptionRecordLearnv1subRecordrecordIdunassociateUsers($record_id, $body = null)
    {
        list($response) = $this->subscriptionRecordLearnv1subRecordrecordIdunassociateUsersWithHttpInfo($record_id, $body);
        return $response;
    }

    /**
     * Operation subscriptionRecordLearnv1subRecordrecordIdunassociateUsersWithHttpInfo
     *
     * Unassociate users from record
     *
     * @param int $record_id ID of the record (required)
     * @param \Swagger\Client\Model\LearnSubscriptionrecordUnassociateUsersSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnSubscriptionrecordUnassociateUsersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionRecordLearnv1subRecordrecordIdunassociateUsersWithHttpInfo($record_id, $body = null)
    {
        // verify the required parameter 'record_id' is set
        if ($record_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $record_id when calling subscriptionRecordLearnv1subRecordrecordIdunassociateUsers');
        }
        // parse inputs
        $resourcePath = "/learn/v1/sub_record/{record_id}/unassociate_users";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($record_id !== null) {
            $resourcePath = str_replace(
                "{" . "record_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($record_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnSubscriptionrecordUnassociateUsersResponse',
                '/learn/v1/sub_record/{record_id}/unassociate_users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnSubscriptionrecordUnassociateUsersResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnSubscriptionrecordUnassociateUsersResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
