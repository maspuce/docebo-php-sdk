<?php
/**
 * RoleApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * RoleApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RoleApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return RoleApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation roleSkillv1roles
     *
     * Retrieves the list of Roles, filtered on input parameters
     *
     * @param string[] $role_title Search text in the role title. Default empty array. OR is performed among multiple array items (optional)
     * @param string[] $role_description Search text in the role description. Default empty array. OR is performed among multiple array items (optional)
     * @param string $sort_attr Sort by this field, default value - role_title. Options: role_title, id, role_description (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int[] $role_status Options: active roles -&amp;gt; [1], inactive roles-&amp;gt; [0], both-&amp;gt; [0,1]. Default value-&amp;gt;[0,1] (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param int[] $role_id Filter returned roles by role_id (optional)
     * @param int[] $skill_id Filter returned roles by skills (optional)
     * @param int[] $user_id Filter returned roles by employees (optional)
     * @param int[] $branch_id Filter returned roles by branches (optional)
     * @param int $exclude_role Exclude role by given role id (optional)
     * @param int $has_users Return only roles with assigned users. Options: only roles with users assigned-&amp;gt; [1], only roles with no users assigned-&amp;gt; [0] (optional)
     * @param int[] $has_not_skill Filter returned roles which have not skills assigned (optional)
     * @param string $filters URL encoded filter by: role_skills([&#39;&#x3D;&#39;, &#39;!&#x3D;&#39;], 0), role_status([&#39;&#x3D;&#39;, &#39;!&#x3D;&#39;], 0), role_users([&#39;&#x3D;&#39;, &#39;!&#x3D;&#39;], 0), username(user names), skill(name) (optional)
     * @param string $search_text Search by text given(a text to search in title or description) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillRoleListResponse
     */
    public function roleSkillv1roles($role_title = null, $role_description = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $role_status = null, $get_total_count = null, $role_id = null, $skill_id = null, $user_id = null, $branch_id = null, $exclude_role = null, $has_users = null, $has_not_skill = null, $filters = null, $search_text = null)
    {
        list($response) = $this->roleSkillv1rolesWithHttpInfo($role_title, $role_description, $sort_attr, $sort_dir, $page, $page_size, $lang, $role_status, $get_total_count, $role_id, $skill_id, $user_id, $branch_id, $exclude_role, $has_users, $has_not_skill, $filters, $search_text);
        return $response;
    }

    /**
     * Operation roleSkillv1rolesWithHttpInfo
     *
     * Retrieves the list of Roles, filtered on input parameters
     *
     * @param string[] $role_title Search text in the role title. Default empty array. OR is performed among multiple array items (optional)
     * @param string[] $role_description Search text in the role description. Default empty array. OR is performed among multiple array items (optional)
     * @param string $sort_attr Sort by this field, default value - role_title. Options: role_title, id, role_description (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int[] $role_status Options: active roles -&amp;gt; [1], inactive roles-&amp;gt; [0], both-&amp;gt; [0,1]. Default value-&amp;gt;[0,1] (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param int[] $role_id Filter returned roles by role_id (optional)
     * @param int[] $skill_id Filter returned roles by skills (optional)
     * @param int[] $user_id Filter returned roles by employees (optional)
     * @param int[] $branch_id Filter returned roles by branches (optional)
     * @param int $exclude_role Exclude role by given role id (optional)
     * @param int $has_users Return only roles with assigned users. Options: only roles with users assigned-&amp;gt; [1], only roles with no users assigned-&amp;gt; [0] (optional)
     * @param int[] $has_not_skill Filter returned roles which have not skills assigned (optional)
     * @param string $filters URL encoded filter by: role_skills([&#39;&#x3D;&#39;, &#39;!&#x3D;&#39;], 0), role_status([&#39;&#x3D;&#39;, &#39;!&#x3D;&#39;], 0), role_users([&#39;&#x3D;&#39;, &#39;!&#x3D;&#39;], 0), username(user names), skill(name) (optional)
     * @param string $search_text Search by text given(a text to search in title or description) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillRoleListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function roleSkillv1rolesWithHttpInfo($role_title = null, $role_description = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $role_status = null, $get_total_count = null, $role_id = null, $skill_id = null, $user_id = null, $branch_id = null, $exclude_role = null, $has_users = null, $has_not_skill = null, $filters = null, $search_text = null)
    {
        // parse inputs
        $resourcePath = "/skill/v1/roles";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if (is_array($role_title)) {
            $role_title = $this->apiClient->getSerializer()->serializeCollection($role_title, 'brackets', true);
        }
        if ($role_title !== null) {
            $queryParams['role_title'] = $this->apiClient->getSerializer()->toQueryValue($role_title);
        }
        // query params
        if (is_array($role_description)) {
            $role_description = $this->apiClient->getSerializer()->serializeCollection($role_description, 'brackets', true);
        }
        if ($role_description !== null) {
            $queryParams['role_description'] = $this->apiClient->getSerializer()->toQueryValue($role_description);
        }
        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if (is_array($role_status)) {
            $role_status = $this->apiClient->getSerializer()->serializeCollection($role_status, 'brackets', true);
        }
        if ($role_status !== null) {
            $queryParams['role_status'] = $this->apiClient->getSerializer()->toQueryValue($role_status);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // query params
        if (is_array($role_id)) {
            $role_id = $this->apiClient->getSerializer()->serializeCollection($role_id, 'brackets', true);
        }
        if ($role_id !== null) {
            $queryParams['role_id'] = $this->apiClient->getSerializer()->toQueryValue($role_id);
        }
        // query params
        if (is_array($skill_id)) {
            $skill_id = $this->apiClient->getSerializer()->serializeCollection($skill_id, 'brackets', true);
        }
        if ($skill_id !== null) {
            $queryParams['skill_id'] = $this->apiClient->getSerializer()->toQueryValue($skill_id);
        }
        // query params
        if (is_array($user_id)) {
            $user_id = $this->apiClient->getSerializer()->serializeCollection($user_id, 'brackets', true);
        }
        if ($user_id !== null) {
            $queryParams['user_id'] = $this->apiClient->getSerializer()->toQueryValue($user_id);
        }
        // query params
        if (is_array($branch_id)) {
            $branch_id = $this->apiClient->getSerializer()->serializeCollection($branch_id, 'brackets', true);
        }
        if ($branch_id !== null) {
            $queryParams['branch_id'] = $this->apiClient->getSerializer()->toQueryValue($branch_id);
        }
        // query params
        if ($exclude_role !== null) {
            $queryParams['exclude_role'] = $this->apiClient->getSerializer()->toQueryValue($exclude_role);
        }
        // query params
        if ($has_users !== null) {
            $queryParams['has_users'] = $this->apiClient->getSerializer()->toQueryValue($has_users);
        }
        // query params
        if (is_array($has_not_skill)) {
            $has_not_skill = $this->apiClient->getSerializer()->serializeCollection($has_not_skill, 'brackets', true);
        }
        if ($has_not_skill !== null) {
            $queryParams['has_not_skill'] = $this->apiClient->getSerializer()->toQueryValue($has_not_skill);
        }
        // query params
        if ($filters !== null) {
            $queryParams['filters'] = $this->apiClient->getSerializer()->toQueryValue($filters);
        }
        // query params
        if ($search_text !== null) {
            $queryParams['search_text'] = $this->apiClient->getSerializer()->toQueryValue($search_text);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillRoleListResponse',
                '/skill/v1/roles'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillRoleListResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillRoleListResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation roleSkillv1roles_0
     *
     * Creates a new Role
     *
     * @param \Swagger\Client\Model\SkillRoleCreateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillRoleCreateResponse
     */
    public function roleSkillv1roles_0($body = null)
    {
        list($response) = $this->roleSkillv1roles_0WithHttpInfo($body);
        return $response;
    }

    /**
     * Operation roleSkillv1roles_0WithHttpInfo
     *
     * Creates a new Role
     *
     * @param \Swagger\Client\Model\SkillRoleCreateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillRoleCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function roleSkillv1roles_0WithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/skill/v1/roles";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillRoleCreateResponse',
                '/skill/v1/roles'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillRoleCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillRoleCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation roleSkillv1roles_1
     *
     * Deletes one or more Roles
     *
     * @param \Swagger\Client\Model\SkillRoleDeleteSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillRoleDeleteResponse
     */
    public function roleSkillv1roles_1($body = null)
    {
        list($response) = $this->roleSkillv1roles_1WithHttpInfo($body);
        return $response;
    }

    /**
     * Operation roleSkillv1roles_1WithHttpInfo
     *
     * Deletes one or more Roles
     *
     * @param \Swagger\Client\Model\SkillRoleDeleteSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillRoleDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function roleSkillv1roles_1WithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/skill/v1/roles";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillRoleDeleteResponse',
                '/skill/v1/roles'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillRoleDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillRoleDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation roleSkillv1rolesidconfiguration
     *
     * Retrieves the details of a (Role) Evaluation Settings
     *
     * @param string $id ID of the role to save the configuration, (value of global_role) in case is passed &amp;quot;global&amp;quot; as id the global configuration is read. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillRoleReadEvaluationConfigResponse
     */
    public function roleSkillv1rolesidconfiguration($id)
    {
        list($response) = $this->roleSkillv1rolesidconfigurationWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation roleSkillv1rolesidconfigurationWithHttpInfo
     *
     * Retrieves the details of a (Role) Evaluation Settings
     *
     * @param string $id ID of the role to save the configuration, (value of global_role) in case is passed &amp;quot;global&amp;quot; as id the global configuration is read. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillRoleReadEvaluationConfigResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function roleSkillv1rolesidconfigurationWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling roleSkillv1rolesidconfiguration');
        }
        // parse inputs
        $resourcePath = "/skill/v1/roles/{id}/configuration";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillRoleReadEvaluationConfigResponse',
                '/skill/v1/roles/{id}/configuration'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillRoleReadEvaluationConfigResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillRoleReadEvaluationConfigResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation roleSkillv1rolesidconfiguration_0
     *
     * Deletes one or more Roles
     *
     * @param int $id Role id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillRoleDeleteEvaluationConfigResponse
     */
    public function roleSkillv1rolesidconfiguration_0($id)
    {
        list($response) = $this->roleSkillv1rolesidconfiguration_0WithHttpInfo($id);
        return $response;
    }

    /**
     * Operation roleSkillv1rolesidconfiguration_0WithHttpInfo
     *
     * Deletes one or more Roles
     *
     * @param int $id Role id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillRoleDeleteEvaluationConfigResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function roleSkillv1rolesidconfiguration_0WithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling roleSkillv1rolesidconfiguration_0');
        }
        // parse inputs
        $resourcePath = "/skill/v1/roles/{id}/configuration";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillRoleDeleteEvaluationConfigResponse',
                '/skill/v1/roles/{id}/configuration'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillRoleDeleteEvaluationConfigResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillRoleDeleteEvaluationConfigResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation roleSkillv1rolesidevaluationstype
     *
     * Retrieves the list of Evaluation per Role and by given type, filtered on input parameters
     *
     * @param int $id ID of the role (required)
     * @param string $type Type of the evaluation (required)
     * @param string $user_names Search text in the role title. Default empty string. (optional)
     * @param string $sort_attr Sort by this field, default value - role_title. Options: role_title, id, role_description (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillRoleListRoleEvaluationsResponse
     */
    public function roleSkillv1rolesidevaluationstype($id, $type, $user_names = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null)
    {
        list($response) = $this->roleSkillv1rolesidevaluationstypeWithHttpInfo($id, $type, $user_names, $sort_attr, $sort_dir, $page, $page_size, $lang, $get_total_count);
        return $response;
    }

    /**
     * Operation roleSkillv1rolesidevaluationstypeWithHttpInfo
     *
     * Retrieves the list of Evaluation per Role and by given type, filtered on input parameters
     *
     * @param int $id ID of the role (required)
     * @param string $type Type of the evaluation (required)
     * @param string $user_names Search text in the role title. Default empty string. (optional)
     * @param string $sort_attr Sort by this field, default value - role_title. Options: role_title, id, role_description (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillRoleListRoleEvaluationsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function roleSkillv1rolesidevaluationstypeWithHttpInfo($id, $type, $user_names = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling roleSkillv1rolesidevaluationstype');
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling roleSkillv1rolesidevaluationstype');
        }
        // parse inputs
        $resourcePath = "/skill/v1/roles/{id}/evaluations/{type}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($user_names !== null) {
            $queryParams['user_names'] = $this->apiClient->getSerializer()->toQueryValue($user_names);
        }
        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                "{" . "type" . "}",
                $this->apiClient->getSerializer()->toPathValue($type),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillRoleListRoleEvaluationsResponse',
                '/skill/v1/roles/{id}/evaluations/{type}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillRoleListRoleEvaluationsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillRoleListRoleEvaluationsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation roleSkillv1rolesrequeststypetype
     *
     * Count the Evaluation Requests per role, per type, by status
     *
     * @param string $type Filter returned requests by given type. Options: S - self, M - manager and P - peer. (required)
     * @param int $role_id Search requests for given role. (required)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillRoleCountRequestsResponse
     */
    public function roleSkillv1rolesrequeststypetype($type, $role_id, $page = null, $page_size = null, $lang = null, $get_total_count = null)
    {
        list($response) = $this->roleSkillv1rolesrequeststypetypeWithHttpInfo($type, $role_id, $page, $page_size, $lang, $get_total_count);
        return $response;
    }

    /**
     * Operation roleSkillv1rolesrequeststypetypeWithHttpInfo
     *
     * Count the Evaluation Requests per role, per type, by status
     *
     * @param string $type Filter returned requests by given type. Options: S - self, M - manager and P - peer. (required)
     * @param int $role_id Search requests for given role. (required)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillRoleCountRequestsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function roleSkillv1rolesrequeststypetypeWithHttpInfo($type, $role_id, $page = null, $page_size = null, $lang = null, $get_total_count = null)
    {
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling roleSkillv1rolesrequeststypetype');
        }
        // verify the required parameter 'role_id' is set
        if ($role_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $role_id when calling roleSkillv1rolesrequeststypetype');
        }
        // parse inputs
        $resourcePath = "/skill/v1/roles/requests/type/{type}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($role_id !== null) {
            $queryParams['role_id'] = $this->apiClient->getSerializer()->toQueryValue($role_id);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                "{" . "type" . "}",
                $this->apiClient->getSerializer()->toPathValue($type),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillRoleCountRequestsResponse',
                '/skill/v1/roles/requests/type/{type}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillRoleCountRequestsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillRoleCountRequestsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation roleSkillv1rolesroleId
     *
     * Retrieves the details of a Role
     *
     * @param int $role_id Required ID of role to fetch (required)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillRoleViewResponse
     */
    public function roleSkillv1rolesroleId($role_id, $lang = null)
    {
        list($response) = $this->roleSkillv1rolesroleIdWithHttpInfo($role_id, $lang);
        return $response;
    }

    /**
     * Operation roleSkillv1rolesroleIdWithHttpInfo
     *
     * Retrieves the details of a Role
     *
     * @param int $role_id Required ID of role to fetch (required)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillRoleViewResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function roleSkillv1rolesroleIdWithHttpInfo($role_id, $lang = null)
    {
        // verify the required parameter 'role_id' is set
        if ($role_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $role_id when calling roleSkillv1rolesroleId');
        }
        // parse inputs
        $resourcePath = "/skill/v1/roles/{role_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // path params
        if ($role_id !== null) {
            $resourcePath = str_replace(
                "{" . "role_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($role_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillRoleViewResponse',
                '/skill/v1/roles/{role_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillRoleViewResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillRoleViewResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation roleSkillv1rolesroleId_0
     *
     * Updates the details of a Role
     *
     * @param int $role_id ID of the role to update (required)
     * @param \Swagger\Client\Model\SkillRoleUpdateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillRoleUpdateResponse
     */
    public function roleSkillv1rolesroleId_0($role_id, $body = null)
    {
        list($response) = $this->roleSkillv1rolesroleId_0WithHttpInfo($role_id, $body);
        return $response;
    }

    /**
     * Operation roleSkillv1rolesroleId_0WithHttpInfo
     *
     * Updates the details of a Role
     *
     * @param int $role_id ID of the role to update (required)
     * @param \Swagger\Client\Model\SkillRoleUpdateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillRoleUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function roleSkillv1rolesroleId_0WithHttpInfo($role_id, $body = null)
    {
        // verify the required parameter 'role_id' is set
        if ($role_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $role_id when calling roleSkillv1rolesroleId_0');
        }
        // parse inputs
        $resourcePath = "/skill/v1/roles/{role_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($role_id !== null) {
            $resourcePath = str_replace(
                "{" . "role_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($role_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillRoleUpdateResponse',
                '/skill/v1/roles/{role_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillRoleUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillRoleUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation roleSkillv1rolesroleIdbranches
     *
     * List Branches with a specific Role
     *
     * @param int $role_id Role ID (required)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillRoleListBranchesByRolesResponse
     */
    public function roleSkillv1rolesroleIdbranches($role_id, $lang = null)
    {
        list($response) = $this->roleSkillv1rolesroleIdbranchesWithHttpInfo($role_id, $lang);
        return $response;
    }

    /**
     * Operation roleSkillv1rolesroleIdbranchesWithHttpInfo
     *
     * List Branches with a specific Role
     *
     * @param int $role_id Role ID (required)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillRoleListBranchesByRolesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function roleSkillv1rolesroleIdbranchesWithHttpInfo($role_id, $lang = null)
    {
        // verify the required parameter 'role_id' is set
        if ($role_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $role_id when calling roleSkillv1rolesroleIdbranches');
        }
        // parse inputs
        $resourcePath = "/skill/v1/roles/{role_id}/branches";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // path params
        if ($role_id !== null) {
            $resourcePath = str_replace(
                "{" . "role_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($role_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillRoleListBranchesByRolesResponse',
                '/skill/v1/roles/{role_id}/branches'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillRoleListBranchesByRolesResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillRoleListBranchesByRolesResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation roleSkillv1rolesroleIdbranchesbranchId
     *
     * Retrieves the list of Users with a specific Role in a specific Branch
     *
     * @param int $role_id Filter returned users by role_id (required)
     * @param int $branch_id Filter returned users by branch_id (required)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillRoleListRoleUsersByBranchResponse
     */
    public function roleSkillv1rolesroleIdbranchesbranchId($role_id, $branch_id, $page = null, $page_size = null, $get_total_count = null)
    {
        list($response) = $this->roleSkillv1rolesroleIdbranchesbranchIdWithHttpInfo($role_id, $branch_id, $page, $page_size, $get_total_count);
        return $response;
    }

    /**
     * Operation roleSkillv1rolesroleIdbranchesbranchIdWithHttpInfo
     *
     * Retrieves the list of Users with a specific Role in a specific Branch
     *
     * @param int $role_id Filter returned users by role_id (required)
     * @param int $branch_id Filter returned users by branch_id (required)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillRoleListRoleUsersByBranchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function roleSkillv1rolesroleIdbranchesbranchIdWithHttpInfo($role_id, $branch_id, $page = null, $page_size = null, $get_total_count = null)
    {
        // verify the required parameter 'role_id' is set
        if ($role_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $role_id when calling roleSkillv1rolesroleIdbranchesbranchId');
        }
        // verify the required parameter 'branch_id' is set
        if ($branch_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $branch_id when calling roleSkillv1rolesroleIdbranchesbranchId');
        }
        // parse inputs
        $resourcePath = "/skill/v1/roles/{role_id}/branches/{branch_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // path params
        if ($role_id !== null) {
            $resourcePath = str_replace(
                "{" . "role_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($role_id),
                $resourcePath
            );
        }
        // path params
        if ($branch_id !== null) {
            $resourcePath = str_replace(
                "{" . "branch_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($branch_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillRoleListRoleUsersByBranchResponse',
                '/skill/v1/roles/{role_id}/branches/{branch_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillRoleListRoleUsersByBranchResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillRoleListRoleUsersByBranchResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation roleSkillv1rolesroleIdconfiguration
     *
     * Saves(Creates or Updates) a Role/Global Evaluation Configuration
     *
     * @param string $role_id Role id or &#39;global&#39; for global evaluation configuration (required)
     * @param \Swagger\Client\Model\SkillRoleSaveEvaluationConfigSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillRoleSaveEvaluationConfigResponse
     */
    public function roleSkillv1rolesroleIdconfiguration($role_id, $body = null)
    {
        list($response) = $this->roleSkillv1rolesroleIdconfigurationWithHttpInfo($role_id, $body);
        return $response;
    }

    /**
     * Operation roleSkillv1rolesroleIdconfigurationWithHttpInfo
     *
     * Saves(Creates or Updates) a Role/Global Evaluation Configuration
     *
     * @param string $role_id Role id or &#39;global&#39; for global evaluation configuration (required)
     * @param \Swagger\Client\Model\SkillRoleSaveEvaluationConfigSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillRoleSaveEvaluationConfigResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function roleSkillv1rolesroleIdconfigurationWithHttpInfo($role_id, $body = null)
    {
        // verify the required parameter 'role_id' is set
        if ($role_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $role_id when calling roleSkillv1rolesroleIdconfiguration');
        }
        // parse inputs
        $resourcePath = "/skill/v1/roles/{role_id}/configuration";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($role_id !== null) {
            $resourcePath = str_replace(
                "{" . "role_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($role_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillRoleSaveEvaluationConfigResponse',
                '/skill/v1/roles/{role_id}/configuration'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillRoleSaveEvaluationConfigResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillRoleSaveEvaluationConfigResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation roleSkillv1rolesroleIddelta
     *
     * Retrieves the Skills not assigned to a Role
     *
     * @param int $role_id Filter returned skills by role (required)
     * @param string[] $skill_title Search text in the skill title. Default empty array. OR is performed across array items (optional)
     * @param string[] $skill_description Search text in the skill description. Default empty array. OR is performed across array items (optional)
     * @param string $sort_attr Sort by this field, default value - name. Options: name, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int[] $skill_status Options: active skills -&amp;gt; [1], inactive skills-&amp;gt; [0], both-&amp;gt; [0,1]. Default value-&amp;gt;[0,1] (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param int $industry_id Filter returned skills by industry (optional)
     * @param int $area_id Filter returned skills by area (optional)
     * @param string $search_operator Options: &#39;AND&#39; or &#39;OR&#39;. Default - &#39;AND&#39; (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillRoleListSkillsForRoleResponse
     */
    public function roleSkillv1rolesroleIddelta($role_id, $skill_title = null, $skill_description = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $skill_status = null, $get_total_count = null, $industry_id = null, $area_id = null, $search_operator = null)
    {
        list($response) = $this->roleSkillv1rolesroleIddeltaWithHttpInfo($role_id, $skill_title, $skill_description, $sort_attr, $sort_dir, $page, $page_size, $lang, $skill_status, $get_total_count, $industry_id, $area_id, $search_operator);
        return $response;
    }

    /**
     * Operation roleSkillv1rolesroleIddeltaWithHttpInfo
     *
     * Retrieves the Skills not assigned to a Role
     *
     * @param int $role_id Filter returned skills by role (required)
     * @param string[] $skill_title Search text in the skill title. Default empty array. OR is performed across array items (optional)
     * @param string[] $skill_description Search text in the skill description. Default empty array. OR is performed across array items (optional)
     * @param string $sort_attr Sort by this field, default value - name. Options: name, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int[] $skill_status Options: active skills -&amp;gt; [1], inactive skills-&amp;gt; [0], both-&amp;gt; [0,1]. Default value-&amp;gt;[0,1] (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param int $industry_id Filter returned skills by industry (optional)
     * @param int $area_id Filter returned skills by area (optional)
     * @param string $search_operator Options: &#39;AND&#39; or &#39;OR&#39;. Default - &#39;AND&#39; (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillRoleListSkillsForRoleResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function roleSkillv1rolesroleIddeltaWithHttpInfo($role_id, $skill_title = null, $skill_description = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $skill_status = null, $get_total_count = null, $industry_id = null, $area_id = null, $search_operator = null)
    {
        // verify the required parameter 'role_id' is set
        if ($role_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $role_id when calling roleSkillv1rolesroleIddelta');
        }
        // parse inputs
        $resourcePath = "/skill/v1/roles/{role_id}/delta";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if (is_array($skill_title)) {
            $skill_title = $this->apiClient->getSerializer()->serializeCollection($skill_title, 'brackets', true);
        }
        if ($skill_title !== null) {
            $queryParams['skill_title'] = $this->apiClient->getSerializer()->toQueryValue($skill_title);
        }
        // query params
        if (is_array($skill_description)) {
            $skill_description = $this->apiClient->getSerializer()->serializeCollection($skill_description, 'brackets', true);
        }
        if ($skill_description !== null) {
            $queryParams['skill_description'] = $this->apiClient->getSerializer()->toQueryValue($skill_description);
        }
        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if (is_array($skill_status)) {
            $skill_status = $this->apiClient->getSerializer()->serializeCollection($skill_status, 'brackets', true);
        }
        if ($skill_status !== null) {
            $queryParams['skill_status'] = $this->apiClient->getSerializer()->toQueryValue($skill_status);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // query params
        if ($industry_id !== null) {
            $queryParams['industry_id'] = $this->apiClient->getSerializer()->toQueryValue($industry_id);
        }
        // query params
        if ($area_id !== null) {
            $queryParams['area_id'] = $this->apiClient->getSerializer()->toQueryValue($area_id);
        }
        // query params
        if ($search_operator !== null) {
            $queryParams['search_operator'] = $this->apiClient->getSerializer()->toQueryValue($search_operator);
        }
        // path params
        if ($role_id !== null) {
            $resourcePath = str_replace(
                "{" . "role_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($role_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillRoleListSkillsForRoleResponse',
                '/skill/v1/roles/{role_id}/delta'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillRoleListSkillsForRoleResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillRoleListSkillsForRoleResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation roleSkillv1rolesroleIdskills
     *
     * Returns the list of required Skills of a specific Role
     *
     * @param int $role_id Filter returned skills by role_id (required)
     * @param string $title Skill title in the selected language (optional)
     * @param string $description Skill description in the selected language (optional)
     * @param string $sort_attr Sort by this field, default value - title. Options: title, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param int $active Options: 1- active, 0 - inactive, null - all. (optional)
     * @param int $assigned Options: 1 - Return assigned skill to role, 0 - Return not assigned skills to a role. Default - 1 (optional)
     * @param int $strategic Options: 1 - Return company strategic skills, 0 - Return the not company strategic skills. Default - 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillRoleListRoleSkillsResponse
     */
    public function roleSkillv1rolesroleIdskills($role_id, $title = null, $description = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null, $active = null, $assigned = null, $strategic = null)
    {
        list($response) = $this->roleSkillv1rolesroleIdskillsWithHttpInfo($role_id, $title, $description, $sort_attr, $sort_dir, $page, $page_size, $lang, $get_total_count, $active, $assigned, $strategic);
        return $response;
    }

    /**
     * Operation roleSkillv1rolesroleIdskillsWithHttpInfo
     *
     * Returns the list of required Skills of a specific Role
     *
     * @param int $role_id Filter returned skills by role_id (required)
     * @param string $title Skill title in the selected language (optional)
     * @param string $description Skill description in the selected language (optional)
     * @param string $sort_attr Sort by this field, default value - title. Options: title, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param int $active Options: 1- active, 0 - inactive, null - all. (optional)
     * @param int $assigned Options: 1 - Return assigned skill to role, 0 - Return not assigned skills to a role. Default - 1 (optional)
     * @param int $strategic Options: 1 - Return company strategic skills, 0 - Return the not company strategic skills. Default - 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillRoleListRoleSkillsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function roleSkillv1rolesroleIdskillsWithHttpInfo($role_id, $title = null, $description = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null, $active = null, $assigned = null, $strategic = null)
    {
        // verify the required parameter 'role_id' is set
        if ($role_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $role_id when calling roleSkillv1rolesroleIdskills');
        }
        // parse inputs
        $resourcePath = "/skill/v1/roles/{role_id}/skills";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($title !== null) {
            $queryParams['title'] = $this->apiClient->getSerializer()->toQueryValue($title);
        }
        // query params
        if ($description !== null) {
            $queryParams['description'] = $this->apiClient->getSerializer()->toQueryValue($description);
        }
        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // query params
        if ($active !== null) {
            $queryParams['active'] = $this->apiClient->getSerializer()->toQueryValue($active);
        }
        // query params
        if ($assigned !== null) {
            $queryParams['assigned'] = $this->apiClient->getSerializer()->toQueryValue($assigned);
        }
        // query params
        if ($strategic !== null) {
            $queryParams['strategic'] = $this->apiClient->getSerializer()->toQueryValue($strategic);
        }
        // path params
        if ($role_id !== null) {
            $resourcePath = str_replace(
                "{" . "role_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($role_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillRoleListRoleSkillsResponse',
                '/skill/v1/roles/{role_id}/skills'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillRoleListRoleSkillsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillRoleListRoleSkillsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation roleSkillv1rolesroleIdskills_0
     *
     * Adds one or more required Skills to a Role
     *
     * @param int $role_id Id of role (required)
     * @param \Swagger\Client\Model\SkillRoleAddRoleSkillSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillRoleAddRoleSkillResponse
     */
    public function roleSkillv1rolesroleIdskills_0($role_id, $body = null)
    {
        list($response) = $this->roleSkillv1rolesroleIdskills_0WithHttpInfo($role_id, $body);
        return $response;
    }

    /**
     * Operation roleSkillv1rolesroleIdskills_0WithHttpInfo
     *
     * Adds one or more required Skills to a Role
     *
     * @param int $role_id Id of role (required)
     * @param \Swagger\Client\Model\SkillRoleAddRoleSkillSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillRoleAddRoleSkillResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function roleSkillv1rolesroleIdskills_0WithHttpInfo($role_id, $body = null)
    {
        // verify the required parameter 'role_id' is set
        if ($role_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $role_id when calling roleSkillv1rolesroleIdskills_0');
        }
        // parse inputs
        $resourcePath = "/skill/v1/roles/{role_id}/skills";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($role_id !== null) {
            $resourcePath = str_replace(
                "{" . "role_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($role_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillRoleAddRoleSkillResponse',
                '/skill/v1/roles/{role_id}/skills'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillRoleAddRoleSkillResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillRoleAddRoleSkillResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation roleSkillv1rolesroleIdskills_1
     *
     * Removes a required Skill from a Role
     *
     * @param int $role_id ID of role/s to fetch (required)
     * @param \Swagger\Client\Model\SkillRoleRemoveRoleSkillSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillRoleRemoveRoleSkillResponse
     */
    public function roleSkillv1rolesroleIdskills_1($role_id, $body = null)
    {
        list($response) = $this->roleSkillv1rolesroleIdskills_1WithHttpInfo($role_id, $body);
        return $response;
    }

    /**
     * Operation roleSkillv1rolesroleIdskills_1WithHttpInfo
     *
     * Removes a required Skill from a Role
     *
     * @param int $role_id ID of role/s to fetch (required)
     * @param \Swagger\Client\Model\SkillRoleRemoveRoleSkillSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillRoleRemoveRoleSkillResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function roleSkillv1rolesroleIdskills_1WithHttpInfo($role_id, $body = null)
    {
        // verify the required parameter 'role_id' is set
        if ($role_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $role_id when calling roleSkillv1rolesroleIdskills_1');
        }
        // parse inputs
        $resourcePath = "/skill/v1/roles/{role_id}/skills";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($role_id !== null) {
            $resourcePath = str_replace(
                "{" . "role_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($role_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillRoleRemoveRoleSkillResponse',
                '/skill/v1/roles/{role_id}/skills'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillRoleRemoveRoleSkillResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillRoleRemoveRoleSkillResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation roleSkillv1rolesroleIdusers
     *
     * Lists the Users assigned to a Role
     *
     * @param int $role_id ID role to get users (required)
     * @param string $fullname User names to filter the listing by (optional)
     * @param int[] $user_ids User IDs (optional)
     * @param string $username Username to filter the listing by (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param string $sort_attr Sort by this field, default value - fullname. Options: fullname, id, name, surname (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - desc (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillRoleListRoleUsersResponse
     */
    public function roleSkillv1rolesroleIdusers($role_id, $fullname = null, $user_ids = null, $username = null, $page = null, $page_size = null, $get_total_count = null, $sort_attr = null, $sort_dir = null)
    {
        list($response) = $this->roleSkillv1rolesroleIdusersWithHttpInfo($role_id, $fullname, $user_ids, $username, $page, $page_size, $get_total_count, $sort_attr, $sort_dir);
        return $response;
    }

    /**
     * Operation roleSkillv1rolesroleIdusersWithHttpInfo
     *
     * Lists the Users assigned to a Role
     *
     * @param int $role_id ID role to get users (required)
     * @param string $fullname User names to filter the listing by (optional)
     * @param int[] $user_ids User IDs (optional)
     * @param string $username Username to filter the listing by (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param string $sort_attr Sort by this field, default value - fullname. Options: fullname, id, name, surname (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - desc (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillRoleListRoleUsersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function roleSkillv1rolesroleIdusersWithHttpInfo($role_id, $fullname = null, $user_ids = null, $username = null, $page = null, $page_size = null, $get_total_count = null, $sort_attr = null, $sort_dir = null)
    {
        // verify the required parameter 'role_id' is set
        if ($role_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $role_id when calling roleSkillv1rolesroleIdusers');
        }
        // parse inputs
        $resourcePath = "/skill/v1/roles/{role_id}/users";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($fullname !== null) {
            $queryParams['fullname'] = $this->apiClient->getSerializer()->toQueryValue($fullname);
        }
        // query params
        if (is_array($user_ids)) {
            $user_ids = $this->apiClient->getSerializer()->serializeCollection($user_ids, 'brackets', true);
        }
        if ($user_ids !== null) {
            $queryParams['user_ids'] = $this->apiClient->getSerializer()->toQueryValue($user_ids);
        }
        // query params
        if ($username !== null) {
            $queryParams['username'] = $this->apiClient->getSerializer()->toQueryValue($username);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // path params
        if ($role_id !== null) {
            $resourcePath = str_replace(
                "{" . "role_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($role_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillRoleListRoleUsersResponse',
                '/skill/v1/roles/{role_id}/users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillRoleListRoleUsersResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillRoleListRoleUsersResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation roleSkillv1rolesroleIdusers_0
     *
     * Assigns one or more Users to a Role
     *
     * @param int $role_id Role ID (required)
     * @param \Swagger\Client\Model\SkillRoleAddUserRoleSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillRoleAddUserRoleResponse
     */
    public function roleSkillv1rolesroleIdusers_0($role_id, $body = null)
    {
        list($response) = $this->roleSkillv1rolesroleIdusers_0WithHttpInfo($role_id, $body);
        return $response;
    }

    /**
     * Operation roleSkillv1rolesroleIdusers_0WithHttpInfo
     *
     * Assigns one or more Users to a Role
     *
     * @param int $role_id Role ID (required)
     * @param \Swagger\Client\Model\SkillRoleAddUserRoleSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillRoleAddUserRoleResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function roleSkillv1rolesroleIdusers_0WithHttpInfo($role_id, $body = null)
    {
        // verify the required parameter 'role_id' is set
        if ($role_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $role_id when calling roleSkillv1rolesroleIdusers_0');
        }
        // parse inputs
        $resourcePath = "/skill/v1/roles/{role_id}/users";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($role_id !== null) {
            $resourcePath = str_replace(
                "{" . "role_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($role_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillRoleAddUserRoleResponse',
                '/skill/v1/roles/{role_id}/users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillRoleAddUserRoleResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillRoleAddUserRoleResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation roleSkillv1rolesroleIdusers_1
     *
     * Removes Users assignation to a Role
     *
     * @param int $role_id ID role to remove users (required)
     * @param \Swagger\Client\Model\SkillRoleRemoveUserRoleSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillRoleRemoveUserRoleResponse
     */
    public function roleSkillv1rolesroleIdusers_1($role_id, $body = null)
    {
        list($response) = $this->roleSkillv1rolesroleIdusers_1WithHttpInfo($role_id, $body);
        return $response;
    }

    /**
     * Operation roleSkillv1rolesroleIdusers_1WithHttpInfo
     *
     * Removes Users assignation to a Role
     *
     * @param int $role_id ID role to remove users (required)
     * @param \Swagger\Client\Model\SkillRoleRemoveUserRoleSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillRoleRemoveUserRoleResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function roleSkillv1rolesroleIdusers_1WithHttpInfo($role_id, $body = null)
    {
        // verify the required parameter 'role_id' is set
        if ($role_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $role_id when calling roleSkillv1rolesroleIdusers_1');
        }
        // parse inputs
        $resourcePath = "/skill/v1/roles/{role_id}/users";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($role_id !== null) {
            $resourcePath = str_replace(
                "{" . "role_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($role_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillRoleRemoveUserRoleResponse',
                '/skill/v1/roles/{role_id}/users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillRoleRemoveUserRoleResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillRoleRemoveUserRoleResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation roleSkillv1rolessimulator
     *
     * Retrieves Global Evaluation Ratings
     *
     * @param int $role_id to get settings for a role (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillRoleListSimulatorResponse
     */
    public function roleSkillv1rolessimulator($role_id = null)
    {
        list($response) = $this->roleSkillv1rolessimulatorWithHttpInfo($role_id);
        return $response;
    }

    /**
     * Operation roleSkillv1rolessimulatorWithHttpInfo
     *
     * Retrieves Global Evaluation Ratings
     *
     * @param int $role_id to get settings for a role (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillRoleListSimulatorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function roleSkillv1rolessimulatorWithHttpInfo($role_id = null)
    {
        // parse inputs
        $resourcePath = "/skill/v1/roles/simulator";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($role_id !== null) {
            $queryParams['role_id'] = $this->apiClient->getSerializer()->toQueryValue($role_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillRoleListSimulatorResponse',
                '/skill/v1/roles/simulator'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillRoleListSimulatorResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillRoleListSimulatorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation roleSkillv1rolesusers
     *
     * Returns list of Users
     *
     * @param int $assigned_to_role ID of a role (optional)
     * @param int $exclude_assigned if equal to 1 excludes current assigned users; default - 0 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param string $sort_attr Sort by this field, default value - username. Options: username (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - asc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default - LMS default(i.e. 10) (optional)
     * @param string $filters URL encoded filter (optional)
     * @param string $search_text Search by text given(a text to search in username, firstname, lastname, email) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillRoleListUsersResponse
     */
    public function roleSkillv1rolesusers($assigned_to_role = null, $exclude_assigned = null, $get_total_count = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $filters = null, $search_text = null)
    {
        list($response) = $this->roleSkillv1rolesusersWithHttpInfo($assigned_to_role, $exclude_assigned, $get_total_count, $sort_attr, $sort_dir, $page, $page_size, $filters, $search_text);
        return $response;
    }

    /**
     * Operation roleSkillv1rolesusersWithHttpInfo
     *
     * Returns list of Users
     *
     * @param int $assigned_to_role ID of a role (optional)
     * @param int $exclude_assigned if equal to 1 excludes current assigned users; default - 0 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param string $sort_attr Sort by this field, default value - username. Options: username (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - asc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default - LMS default(i.e. 10) (optional)
     * @param string $filters URL encoded filter (optional)
     * @param string $search_text Search by text given(a text to search in username, firstname, lastname, email) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillRoleListUsersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function roleSkillv1rolesusersWithHttpInfo($assigned_to_role = null, $exclude_assigned = null, $get_total_count = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $filters = null, $search_text = null)
    {
        // parse inputs
        $resourcePath = "/skill/v1/roles/users";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($assigned_to_role !== null) {
            $queryParams['assigned_to_role'] = $this->apiClient->getSerializer()->toQueryValue($assigned_to_role);
        }
        // query params
        if ($exclude_assigned !== null) {
            $queryParams['exclude_assigned'] = $this->apiClient->getSerializer()->toQueryValue($exclude_assigned);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($filters !== null) {
            $queryParams['filters'] = $this->apiClient->getSerializer()->toQueryValue($filters);
        }
        // query params
        if ($search_text !== null) {
            $queryParams['search_text'] = $this->apiClient->getSerializer()->toQueryValue($search_text);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillRoleListUsersResponse',
                '/skill/v1/roles/users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillRoleListUsersResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillRoleListUsersResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
