<?php
/**
 * RatingtablesApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * RatingtablesApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RatingtablesApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return RatingtablesApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation ratingtablesSkillv1ratingtables
     *
     * Retrieves the list of Rating Scales, filtered on input parameters
     *
     * @param string $sort_attr Sort by this field, default value - title. Options: title, id, rating_points, usage (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param int[] $scale_id Filter returned by scale id (optional)
     * @param string $filters URL encoded filter by: (optional)
     * @param string $search_text Search by text given(a text to search in title or description) (optional)
     * @param int $active Active(1) or inactive status(0) (optional)
     * @param int $paginated Possible values 0 or 1. Default - 1. If is 0 all scales returned. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillRatingtablesListResponse
     */
    public function ratingtablesSkillv1ratingtables($sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null, $scale_id = null, $filters = null, $search_text = null, $active = null, $paginated = null)
    {
        list($response) = $this->ratingtablesSkillv1ratingtablesWithHttpInfo($sort_attr, $sort_dir, $page, $page_size, $lang, $get_total_count, $scale_id, $filters, $search_text, $active, $paginated);
        return $response;
    }

    /**
     * Operation ratingtablesSkillv1ratingtablesWithHttpInfo
     *
     * Retrieves the list of Rating Scales, filtered on input parameters
     *
     * @param string $sort_attr Sort by this field, default value - title. Options: title, id, rating_points, usage (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param int[] $scale_id Filter returned by scale id (optional)
     * @param string $filters URL encoded filter by: (optional)
     * @param string $search_text Search by text given(a text to search in title or description) (optional)
     * @param int $active Active(1) or inactive status(0) (optional)
     * @param int $paginated Possible values 0 or 1. Default - 1. If is 0 all scales returned. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillRatingtablesListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function ratingtablesSkillv1ratingtablesWithHttpInfo($sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null, $scale_id = null, $filters = null, $search_text = null, $active = null, $paginated = null)
    {
        // parse inputs
        $resourcePath = "/skill/v1/ratingtables";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // query params
        if (is_array($scale_id)) {
            $scale_id = $this->apiClient->getSerializer()->serializeCollection($scale_id, 'brackets', true);
        }
        if ($scale_id !== null) {
            $queryParams['scale_id'] = $this->apiClient->getSerializer()->toQueryValue($scale_id);
        }
        // query params
        if ($filters !== null) {
            $queryParams['filters'] = $this->apiClient->getSerializer()->toQueryValue($filters);
        }
        // query params
        if ($search_text !== null) {
            $queryParams['search_text'] = $this->apiClient->getSerializer()->toQueryValue($search_text);
        }
        // query params
        if ($active !== null) {
            $queryParams['active'] = $this->apiClient->getSerializer()->toQueryValue($active);
        }
        // query params
        if ($paginated !== null) {
            $queryParams['paginated'] = $this->apiClient->getSerializer()->toQueryValue($paginated);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillRatingtablesListResponse',
                '/skill/v1/ratingtables'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillRatingtablesListResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillRatingtablesListResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation ratingtablesSkillv1ratingtables_0
     *
     * Creates a new Rating Scale
     *
     * @param \Swagger\Client\Model\SkillRatingtablesCreateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillRatingtablesCreateResponse
     */
    public function ratingtablesSkillv1ratingtables_0($body = null)
    {
        list($response) = $this->ratingtablesSkillv1ratingtables_0WithHttpInfo($body);
        return $response;
    }

    /**
     * Operation ratingtablesSkillv1ratingtables_0WithHttpInfo
     *
     * Creates a new Rating Scale
     *
     * @param \Swagger\Client\Model\SkillRatingtablesCreateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillRatingtablesCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function ratingtablesSkillv1ratingtables_0WithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/skill/v1/ratingtables";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillRatingtablesCreateResponse',
                '/skill/v1/ratingtables'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillRatingtablesCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillRatingtablesCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation ratingtablesSkillv1ratingtables_1
     *
     * Deletes a rating scale
     *
     * @param \Swagger\Client\Model\SkillRatingtablesDeleteMultiSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillRatingtablesDeleteMultiResponse
     */
    public function ratingtablesSkillv1ratingtables_1($body = null)
    {
        list($response) = $this->ratingtablesSkillv1ratingtables_1WithHttpInfo($body);
        return $response;
    }

    /**
     * Operation ratingtablesSkillv1ratingtables_1WithHttpInfo
     *
     * Deletes a rating scale
     *
     * @param \Swagger\Client\Model\SkillRatingtablesDeleteMultiSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillRatingtablesDeleteMultiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function ratingtablesSkillv1ratingtables_1WithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/skill/v1/ratingtables";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillRatingtablesDeleteMultiResponse',
                '/skill/v1/ratingtables'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillRatingtablesDeleteMultiResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillRatingtablesDeleteMultiResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation ratingtablesSkillv1ratingtablesconfig
     *
     * Updates the min and max thresholds by given rating scale type(target)
     *
     * @param \Swagger\Client\Model\SkillRatingtablesSaveConfigSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillRatingtablesSaveConfigResponse
     */
    public function ratingtablesSkillv1ratingtablesconfig($body = null)
    {
        list($response) = $this->ratingtablesSkillv1ratingtablesconfigWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation ratingtablesSkillv1ratingtablesconfigWithHttpInfo
     *
     * Updates the min and max thresholds by given rating scale type(target)
     *
     * @param \Swagger\Client\Model\SkillRatingtablesSaveConfigSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillRatingtablesSaveConfigResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function ratingtablesSkillv1ratingtablesconfigWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/skill/v1/ratingtables/config";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillRatingtablesSaveConfigResponse',
                '/skill/v1/ratingtables/config'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillRatingtablesSaveConfigResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillRatingtablesSaveConfigResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation ratingtablesSkillv1ratingtablesid
     *
     * Returns the details of a Rating Scale
     *
     * @param int $id ID of the rating scale to view (required)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillRatingtablesViewResponse
     */
    public function ratingtablesSkillv1ratingtablesid($id, $lang = null)
    {
        list($response) = $this->ratingtablesSkillv1ratingtablesidWithHttpInfo($id, $lang);
        return $response;
    }

    /**
     * Operation ratingtablesSkillv1ratingtablesidWithHttpInfo
     *
     * Returns the details of a Rating Scale
     *
     * @param int $id ID of the rating scale to view (required)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillRatingtablesViewResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function ratingtablesSkillv1ratingtablesidWithHttpInfo($id, $lang = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling ratingtablesSkillv1ratingtablesid');
        }
        // parse inputs
        $resourcePath = "/skill/v1/ratingtables/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillRatingtablesViewResponse',
                '/skill/v1/ratingtables/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillRatingtablesViewResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillRatingtablesViewResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation ratingtablesSkillv1ratingtablesid_0
     *
     * Updates a Rating Scale
     *
     * @param int $id ID of the rating scale to update (required)
     * @param \Swagger\Client\Model\SkillRatingtablesUpdateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillRatingtablesUpdateResponse
     */
    public function ratingtablesSkillv1ratingtablesid_0($id, $body = null)
    {
        list($response) = $this->ratingtablesSkillv1ratingtablesid_0WithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation ratingtablesSkillv1ratingtablesid_0WithHttpInfo
     *
     * Updates a Rating Scale
     *
     * @param int $id ID of the rating scale to update (required)
     * @param \Swagger\Client\Model\SkillRatingtablesUpdateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillRatingtablesUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function ratingtablesSkillv1ratingtablesid_0WithHttpInfo($id, $body = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling ratingtablesSkillv1ratingtablesid_0');
        }
        // parse inputs
        $resourcePath = "/skill/v1/ratingtables/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillRatingtablesUpdateResponse',
                '/skill/v1/ratingtables/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillRatingtablesUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillRatingtablesUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation ratingtablesSkillv1ratingtablesid_1
     *
     * Deletes a rating scale
     *
     * @param int $id ID of the rating scale to delete (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillRatingtablesDeleteResponse
     */
    public function ratingtablesSkillv1ratingtablesid_1($id)
    {
        list($response) = $this->ratingtablesSkillv1ratingtablesid_1WithHttpInfo($id);
        return $response;
    }

    /**
     * Operation ratingtablesSkillv1ratingtablesid_1WithHttpInfo
     *
     * Deletes a rating scale
     *
     * @param int $id ID of the rating scale to delete (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillRatingtablesDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function ratingtablesSkillv1ratingtablesid_1WithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling ratingtablesSkillv1ratingtablesid_1');
        }
        // parse inputs
        $resourcePath = "/skill/v1/ratingtables/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillRatingtablesDeleteResponse',
                '/skill/v1/ratingtables/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillRatingtablesDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillRatingtablesDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
