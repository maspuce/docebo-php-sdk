<?php
/**
 * CourseApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * CourseApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CourseApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return CourseApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation courseLearnv1coursecommentsthreadthreadId
     *
     * PUT | DELETE discussions (thread) - course
     *
     * @param int $id The id of the course (required)
     * @param int $forum_id The id of the forum (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnCourseThreadResponse
     */
    public function courseLearnv1coursecommentsthreadthreadId($id, $forum_id)
    {
        list($response) = $this->courseLearnv1coursecommentsthreadthreadIdWithHttpInfo($id, $forum_id);
        return $response;
    }

    /**
     * Operation courseLearnv1coursecommentsthreadthreadIdWithHttpInfo
     *
     * PUT | DELETE discussions (thread) - course
     *
     * @param int $id The id of the course (required)
     * @param int $forum_id The id of the forum (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnCourseThreadResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseLearnv1coursecommentsthreadthreadIdWithHttpInfo($id, $forum_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling courseLearnv1coursecommentsthreadthreadId');
        }
        // verify the required parameter 'forum_id' is set
        if ($forum_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $forum_id when calling courseLearnv1coursecommentsthreadthreadId');
        }
        // parse inputs
        $resourcePath = "/learn/v1/course/comments/thread/{thread_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($forum_id !== null) {
            $resourcePath = str_replace(
                "{" . "forum_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($forum_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnCourseThreadResponse',
                '/learn/v1/course/comments/thread/{thread_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnCourseThreadResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnCourseThreadResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseLearnv1coursecommentsthreadthreadIdmessage
     *
     * PUT REPLY discussions (thread) - course
     *
     * @param int $thread_id The id of the thread course (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnCourseMessageResponse
     */
    public function courseLearnv1coursecommentsthreadthreadIdmessage($thread_id)
    {
        list($response) = $this->courseLearnv1coursecommentsthreadthreadIdmessageWithHttpInfo($thread_id);
        return $response;
    }

    /**
     * Operation courseLearnv1coursecommentsthreadthreadIdmessageWithHttpInfo
     *
     * PUT REPLY discussions (thread) - course
     *
     * @param int $thread_id The id of the thread course (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnCourseMessageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseLearnv1coursecommentsthreadthreadIdmessageWithHttpInfo($thread_id)
    {
        // verify the required parameter 'thread_id' is set
        if ($thread_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $thread_id when calling courseLearnv1coursecommentsthreadthreadIdmessage');
        }
        // parse inputs
        $resourcePath = "/learn/v1/course/comments/thread/{thread_id}/message";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($thread_id !== null) {
            $resourcePath = str_replace(
                "{" . "thread_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($thread_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnCourseMessageResponse',
                '/learn/v1/course/comments/thread/{thread_id}/message'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnCourseMessageResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnCourseMessageResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseLearnv1courseimportCourses
     *
     * Batch import courses
     *
     * @param \Swagger\Client\Model\LearnCourseImportCoursesSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnCourseImportCoursesResponse
     */
    public function courseLearnv1courseimportCourses($body = null)
    {
        list($response) = $this->courseLearnv1courseimportCoursesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation courseLearnv1courseimportCoursesWithHttpInfo
     *
     * Batch import courses
     *
     * @param \Swagger\Client\Model\LearnCourseImportCoursesSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnCourseImportCoursesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseLearnv1courseimportCoursesWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/learn/v1/course/importCourses";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnCourseImportCoursesResponse',
                '/learn/v1/course/importCourses'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnCourseImportCoursesResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnCourseImportCoursesResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseLearnv1courses
     *
     * Returns all courses.
     *
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 20 (optional)
     * @param string $sort_by Sorting the result by column name (optional)
     * @param string $sort_by_direction Sorting direction - can be &#39;asc&#39; or &#39;desc&#39;, if not provided of is different, the sort_by parameter will be ignored! (optional)
     * @param bool $get_total_count 0 or 1 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnCourseIndexResponse
     */
    public function courseLearnv1courses($page = null, $page_size = null, $sort_by = null, $sort_by_direction = null, $get_total_count = null)
    {
        list($response) = $this->courseLearnv1coursesWithHttpInfo($page, $page_size, $sort_by, $sort_by_direction, $get_total_count);
        return $response;
    }

    /**
     * Operation courseLearnv1coursesWithHttpInfo
     *
     * Returns all courses.
     *
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 20 (optional)
     * @param string $sort_by Sorting the result by column name (optional)
     * @param string $sort_by_direction Sorting direction - can be &#39;asc&#39; or &#39;desc&#39;, if not provided of is different, the sort_by parameter will be ignored! (optional)
     * @param bool $get_total_count 0 or 1 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnCourseIndexResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseLearnv1coursesWithHttpInfo($page = null, $page_size = null, $sort_by = null, $sort_by_direction = null, $get_total_count = null)
    {
        // parse inputs
        $resourcePath = "/learn/v1/courses";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($sort_by !== null) {
            $queryParams['sort_by'] = $this->apiClient->getSerializer()->toQueryValue($sort_by);
        }
        // query params
        if ($sort_by_direction !== null) {
            $queryParams['sort_by_direction'] = $this->apiClient->getSerializer()->toQueryValue($sort_by_direction);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnCourseIndexResponse',
                '/learn/v1/courses'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnCourseIndexResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnCourseIndexResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseLearnv1courses_0
     *
     * Create a new Course
     *
     * @param \Swagger\Client\Model\LearnCourseCreateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnCourseCreateResponse
     */
    public function courseLearnv1courses_0($body = null)
    {
        list($response) = $this->courseLearnv1courses_0WithHttpInfo($body);
        return $response;
    }

    /**
     * Operation courseLearnv1courses_0WithHttpInfo
     *
     * Create a new Course
     *
     * @param \Swagger\Client\Model\LearnCourseCreateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnCourseCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseLearnv1courses_0WithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/learn/v1/courses";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnCourseCreateResponse',
                '/learn/v1/courses'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnCourseCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnCourseCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseLearnv1courseschart
     *
     * Get all learning objects by id of course
     *
     * @param string $timeframe Timeframe type (this_week,this_month,custom) Default : this_year (optional)
     * @param string $start_date Start date which should be used for the filtering (optional)
     * @param string $end_date End date which should be used for the filtering (optional)
     * @param string[] $branch_ids Branches to filter the results by (optional)
     * @param string $id_course Parameter for showing results for a single course (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnCourseChartResponse
     */
    public function courseLearnv1courseschart($timeframe = null, $start_date = null, $end_date = null, $branch_ids = null, $id_course = null)
    {
        list($response) = $this->courseLearnv1courseschartWithHttpInfo($timeframe, $start_date, $end_date, $branch_ids, $id_course);
        return $response;
    }

    /**
     * Operation courseLearnv1courseschartWithHttpInfo
     *
     * Get all learning objects by id of course
     *
     * @param string $timeframe Timeframe type (this_week,this_month,custom) Default : this_year (optional)
     * @param string $start_date Start date which should be used for the filtering (optional)
     * @param string $end_date End date which should be used for the filtering (optional)
     * @param string[] $branch_ids Branches to filter the results by (optional)
     * @param string $id_course Parameter for showing results for a single course (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnCourseChartResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseLearnv1courseschartWithHttpInfo($timeframe = null, $start_date = null, $end_date = null, $branch_ids = null, $id_course = null)
    {
        // parse inputs
        $resourcePath = "/learn/v1/courses/chart";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($timeframe !== null) {
            $queryParams['timeframe'] = $this->apiClient->getSerializer()->toQueryValue($timeframe);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['startDate'] = $this->apiClient->getSerializer()->toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['endDate'] = $this->apiClient->getSerializer()->toQueryValue($end_date);
        }
        // query params
        if (is_array($branch_ids)) {
            $branch_ids = $this->apiClient->getSerializer()->serializeCollection($branch_ids, 'csv', true);
        }
        if ($branch_ids !== null) {
            $queryParams['branchIds'] = $this->apiClient->getSerializer()->toQueryValue($branch_ids);
        }
        // query params
        if ($id_course !== null) {
            $queryParams['idCourse'] = $this->apiClient->getSerializer()->toQueryValue($id_course);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnCourseChartResponse',
                '/learn/v1/courses/chart'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnCourseChartResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnCourseChartResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseLearnv1coursescompactList
     *
     * Return a more compact information about list of courses (filtering possible or just ALL courses), taking into account a given user
     *
     * @param string[] $course_ids Array of course IDs (required)
     * @param int $enrolled_only If set to 1, return courses a given user is enrolled into (required)
     * @param int $user_id User ID. Current user, if not specified (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnCourseCompactListResponse
     */
    public function courseLearnv1coursescompactList($course_ids, $enrolled_only, $user_id)
    {
        list($response) = $this->courseLearnv1coursescompactListWithHttpInfo($course_ids, $enrolled_only, $user_id);
        return $response;
    }

    /**
     * Operation courseLearnv1coursescompactListWithHttpInfo
     *
     * Return a more compact information about list of courses (filtering possible or just ALL courses), taking into account a given user
     *
     * @param string[] $course_ids Array of course IDs (required)
     * @param int $enrolled_only If set to 1, return courses a given user is enrolled into (required)
     * @param int $user_id User ID. Current user, if not specified (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnCourseCompactListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseLearnv1coursescompactListWithHttpInfo($course_ids, $enrolled_only, $user_id)
    {
        // verify the required parameter 'course_ids' is set
        if ($course_ids === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_ids when calling courseLearnv1coursescompactList');
        }
        // verify the required parameter 'enrolled_only' is set
        if ($enrolled_only === null) {
            throw new \InvalidArgumentException('Missing the required parameter $enrolled_only when calling courseLearnv1coursescompactList');
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling courseLearnv1coursescompactList');
        }
        // parse inputs
        $resourcePath = "/learn/v1/courses/compact_list";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if (is_array($course_ids)) {
            $course_ids = $this->apiClient->getSerializer()->serializeCollection($course_ids, 'csv');
        }
        if ($course_ids !== null) {
            $resourcePath = str_replace(
                "{" . "course_ids" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_ids),
                $resourcePath
            );
        }
        // path params
        if ($enrolled_only !== null) {
            $resourcePath = str_replace(
                "{" . "enrolled_only" . "}",
                $this->apiClient->getSerializer()->toPathValue($enrolled_only),
                $resourcePath
            );
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnCourseCompactListResponse',
                '/learn/v1/courses/compact_list'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnCourseCompactListResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnCourseCompactListResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseLearnv1coursescourseId
     *
     * View a Course
     *
     * @param int $course_id ID of the course (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnCourseViewResponse
     */
    public function courseLearnv1coursescourseId($course_id)
    {
        list($response) = $this->courseLearnv1coursescourseIdWithHttpInfo($course_id);
        return $response;
    }

    /**
     * Operation courseLearnv1coursescourseIdWithHttpInfo
     *
     * View a Course
     *
     * @param int $course_id ID of the course (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnCourseViewResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseLearnv1coursescourseIdWithHttpInfo($course_id)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling courseLearnv1coursescourseId');
        }
        // parse inputs
        $resourcePath = "/learn/v1/courses/{course_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                "{" . "course_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnCourseViewResponse',
                '/learn/v1/courses/{course_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnCourseViewResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnCourseViewResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseLearnv1coursescourseIdbyCategory
     *
     * Returns all courses of the same category.
     *
     * @param int $course_id ID of the course (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnCourseByCategoryResponse
     */
    public function courseLearnv1coursescourseIdbyCategory($course_id)
    {
        list($response) = $this->courseLearnv1coursescourseIdbyCategoryWithHttpInfo($course_id);
        return $response;
    }

    /**
     * Operation courseLearnv1coursescourseIdbyCategoryWithHttpInfo
     *
     * Returns all courses of the same category.
     *
     * @param int $course_id ID of the course (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnCourseByCategoryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseLearnv1coursescourseIdbyCategoryWithHttpInfo($course_id)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling courseLearnv1coursescourseIdbyCategory');
        }
        // parse inputs
        $resourcePath = "/learn/v1/courses/{course_id}/by_category";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                "{" . "course_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnCourseByCategoryResponse',
                '/learn/v1/courses/{course_id}/by_category'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnCourseByCategoryResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnCourseByCategoryResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseLearnv1coursescourseIddeeplink
     *
     * Deeplinking is enabled in the advanced settings of a course and it allows to share a course with anybody using a signed link
     *
     * @param int $course_id ID of the course (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnCourseDeeplinkResponse
     */
    public function courseLearnv1coursescourseIddeeplink($course_id)
    {
        list($response) = $this->courseLearnv1coursescourseIddeeplinkWithHttpInfo($course_id);
        return $response;
    }

    /**
     * Operation courseLearnv1coursescourseIddeeplinkWithHttpInfo
     *
     * Deeplinking is enabled in the advanced settings of a course and it allows to share a course with anybody using a signed link
     *
     * @param int $course_id ID of the course (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnCourseDeeplinkResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseLearnv1coursescourseIddeeplinkWithHttpInfo($course_id)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling courseLearnv1coursescourseIddeeplink');
        }
        // parse inputs
        $resourcePath = "/learn/v1/courses/{course_id}/deeplink";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                "{" . "course_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnCourseDeeplinkResponse',
                '/learn/v1/courses/{course_id}/deeplink'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnCourseDeeplinkResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnCourseDeeplinkResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseLearnv1coursescourseIdlos
     *
     * Get all learning objects by id of course
     *
     * @param int $course_id The id of the course (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnCourseLosResponse
     */
    public function courseLearnv1coursescourseIdlos($course_id)
    {
        list($response) = $this->courseLearnv1coursescourseIdlosWithHttpInfo($course_id);
        return $response;
    }

    /**
     * Operation courseLearnv1coursescourseIdlosWithHttpInfo
     *
     * Get all learning objects by id of course
     *
     * @param int $course_id The id of the course (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnCourseLosResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseLearnv1coursescourseIdlosWithHttpInfo($course_id)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling courseLearnv1coursescourseIdlos');
        }
        // parse inputs
        $resourcePath = "/learn/v1/courses/{course_id}/los";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                "{" . "course_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnCourseLosResponse',
                '/learn/v1/courses/{course_id}/los'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnCourseLosResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnCourseLosResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseLearnv1coursescourseIdrating
     *
     * View course rating
     *
     * @param int $course_id ID of the course (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnCourseRatingResponse
     */
    public function courseLearnv1coursescourseIdrating($course_id)
    {
        list($response) = $this->courseLearnv1coursescourseIdratingWithHttpInfo($course_id);
        return $response;
    }

    /**
     * Operation courseLearnv1coursescourseIdratingWithHttpInfo
     *
     * View course rating
     *
     * @param int $course_id ID of the course (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnCourseRatingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseLearnv1coursescourseIdratingWithHttpInfo($course_id)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling courseLearnv1coursescourseIdrating');
        }
        // parse inputs
        $resourcePath = "/learn/v1/courses/{course_id}/rating";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                "{" . "course_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnCourseRatingResponse',
                '/learn/v1/courses/{course_id}/rating'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnCourseRatingResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnCourseRatingResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseLearnv1coursescourseIdsessionidSessiondateyyyyMmDd
     *
     * Joining or starting a webinar session's date
     *
     * @param int $course_id The id of the course (required)
     * @param int $id_session The id of the webinar session (required)
     * @param string $dd The date of the webinar session (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnCourseSessionJoinResponse
     */
    public function courseLearnv1coursescourseIdsessionidSessiondateyyyyMmDd($course_id, $id_session, $dd)
    {
        list($response) = $this->courseLearnv1coursescourseIdsessionidSessiondateyyyyMmDdWithHttpInfo($course_id, $id_session, $dd);
        return $response;
    }

    /**
     * Operation courseLearnv1coursescourseIdsessionidSessiondateyyyyMmDdWithHttpInfo
     *
     * Joining or starting a webinar session's date
     *
     * @param int $course_id The id of the course (required)
     * @param int $id_session The id of the webinar session (required)
     * @param string $dd The date of the webinar session (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnCourseSessionJoinResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseLearnv1coursescourseIdsessionidSessiondateyyyyMmDdWithHttpInfo($course_id, $id_session, $dd)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling courseLearnv1coursescourseIdsessionidSessiondateyyyyMmDd');
        }
        // verify the required parameter 'id_session' is set
        if ($id_session === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_session when calling courseLearnv1coursescourseIdsessionidSessiondateyyyyMmDd');
        }
        // verify the required parameter 'dd' is set
        if ($dd === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dd when calling courseLearnv1coursescourseIdsessionidSessiondateyyyyMmDd');
        }
        // parse inputs
        $resourcePath = "/learn/v1/courses/{course_id}/session/{id_session}/date/{yyyy-mm-dd}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                "{" . "course_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_id),
                $resourcePath
            );
        }
        // path params
        if ($id_session !== null) {
            $resourcePath = str_replace(
                "{" . "id_session" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_session),
                $resourcePath
            );
        }
        // path params
        if ($dd !== null) {
            $resourcePath = str_replace(
                "{" . "dd" . "}",
                $this->apiClient->getSerializer()->toPathValue($dd),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnCourseSessionJoinResponse',
                '/learn/v1/courses/{course_id}/session/{id_session}/date/{yyyy-mm-dd}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnCourseSessionJoinResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnCourseSessionJoinResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseLearnv1coursesenrollmentPdf
     *
     * Returns all courses.
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnCourseEnrollmentPdfResponse
     */
    public function courseLearnv1coursesenrollmentPdf()
    {
        list($response) = $this->courseLearnv1coursesenrollmentPdfWithHttpInfo();
        return $response;
    }

    /**
     * Operation courseLearnv1coursesenrollmentPdfWithHttpInfo
     *
     * Returns all courses.
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnCourseEnrollmentPdfResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseLearnv1coursesenrollmentPdfWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/learn/v1/courses/enrollmentPdf";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnCourseEnrollmentPdfResponse',
                '/learn/v1/courses/enrollmentPdf'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnCourseEnrollmentPdfResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnCourseEnrollmentPdfResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseLearnv1coursesid
     *
     * Update specific Course
     *
     * @param \Swagger\Client\Model\LearnCourseUpdateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnCourseUpdateResponse
     */
    public function courseLearnv1coursesid($body = null)
    {
        list($response) = $this->courseLearnv1coursesidWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation courseLearnv1coursesidWithHttpInfo
     *
     * Update specific Course
     *
     * @param \Swagger\Client\Model\LearnCourseUpdateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnCourseUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseLearnv1coursesidWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/learn/v1/courses/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnCourseUpdateResponse',
                '/learn/v1/courses/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnCourseUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnCourseUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseLearnv1coursesid_0
     *
     * Delete specific Learning course by given ID
     *
     * @param \Swagger\Client\Model\LearnCourseDeleteSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnCourseDeleteResponse
     */
    public function courseLearnv1coursesid_0($body = null)
    {
        list($response) = $this->courseLearnv1coursesid_0WithHttpInfo($body);
        return $response;
    }

    /**
     * Operation courseLearnv1coursesid_0WithHttpInfo
     *
     * Delete specific Learning course by given ID
     *
     * @param \Swagger\Client\Model\LearnCourseDeleteSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnCourseDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseLearnv1coursesid_0WithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/learn/v1/courses/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnCourseDeleteResponse',
                '/learn/v1/courses/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnCourseDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnCourseDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseLearnv1coursesidcomments
     *
     * Get discussions/posts of a course
     *
     * @param int $id The id of the course (required)
     * @param int $forum_id The id of the forum (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnCourseCommentsResponse
     */
    public function courseLearnv1coursesidcomments($id, $forum_id)
    {
        list($response) = $this->courseLearnv1coursesidcommentsWithHttpInfo($id, $forum_id);
        return $response;
    }

    /**
     * Operation courseLearnv1coursesidcommentsWithHttpInfo
     *
     * Get discussions/posts of a course
     *
     * @param int $id The id of the course (required)
     * @param int $forum_id The id of the forum (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnCourseCommentsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseLearnv1coursesidcommentsWithHttpInfo($id, $forum_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling courseLearnv1coursesidcomments');
        }
        // verify the required parameter 'forum_id' is set
        if ($forum_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $forum_id when calling courseLearnv1coursesidcomments');
        }
        // parse inputs
        $resourcePath = "/learn/v1/courses/{id}/comments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($forum_id !== null) {
            $resourcePath = str_replace(
                "{" . "forum_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($forum_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnCourseCommentsResponse',
                '/learn/v1/courses/{id}/comments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnCourseCommentsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnCourseCommentsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseLearnv1coursesidrating
     *
     * Update course rating
     *
     * @param int $id The ID of the course (required)
     * @param \Swagger\Client\Model\LearnCourseUpdateRatingSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnCourseUpdateRatingResponse
     */
    public function courseLearnv1coursesidrating($id, $body = null)
    {
        list($response) = $this->courseLearnv1coursesidratingWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation courseLearnv1coursesidratingWithHttpInfo
     *
     * Update course rating
     *
     * @param int $id The ID of the course (required)
     * @param \Swagger\Client\Model\LearnCourseUpdateRatingSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnCourseUpdateRatingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseLearnv1coursesidratingWithHttpInfo($id, $body = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling courseLearnv1coursesidrating');
        }
        // parse inputs
        $resourcePath = "/learn/v1/courses/{id}/rating";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnCourseUpdateRatingResponse',
                '/learn/v1/courses/{id}/rating'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnCourseUpdateRatingResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnCourseUpdateRatingResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseLearnv1coursesidsessions
     *
     * Get all session that the user is enrolled in or all available if not enrolled by id of course
     *
     * @param int $id The id of the course (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnCourseSessionsResponse
     */
    public function courseLearnv1coursesidsessions($id)
    {
        list($response) = $this->courseLearnv1coursesidsessionsWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation courseLearnv1coursesidsessionsWithHttpInfo
     *
     * Get all session that the user is enrolled in or all available if not enrolled by id of course
     *
     * @param int $id The id of the course (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnCourseSessionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseLearnv1coursesidsessionsWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling courseLearnv1coursesidsessions');
        }
        // parse inputs
        $resourcePath = "/learn/v1/courses/{id}/sessions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnCourseSessionsResponse',
                '/learn/v1/courses/{id}/sessions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnCourseSessionsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnCourseSessionsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseLearnv1coursesidwidgets
     *
     * Get all the widgets that have been set for the specific course
     *
     * @param int $id The id of the course (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnCourseWidgetsResponse
     */
    public function courseLearnv1coursesidwidgets($id)
    {
        list($response) = $this->courseLearnv1coursesidwidgetsWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation courseLearnv1coursesidwidgetsWithHttpInfo
     *
     * Get all the widgets that have been set for the specific course
     *
     * @param int $id The id of the course (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnCourseWidgetsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseLearnv1coursesidwidgetsWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling courseLearnv1coursesidwidgets');
        }
        // parse inputs
        $resourcePath = "/learn/v1/courses/{id}/widgets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnCourseWidgetsResponse',
                '/learn/v1/courses/{id}/widgets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnCourseWidgetsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnCourseWidgetsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseLearnv1coursesreport
     *
     * Get all learning objects by id of course
     *
     * @param string $timeframe Timeframe type (this_week,this_month,custom) Default : this_year (optional)
     * @param string $start_date Start date which should be used for the filtering (optional)
     * @param string $end_date End date which should be used for the filtering (optional)
     * @param string[] $branch_ids Branches to filter the results by (optional)
     * @param string $id_course Parameter for showing results for a single course (optional)
     * @param int $export Export data to Excel. Options: 1 - true, 0 - false. Default: 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnCourseReportResponse
     */
    public function courseLearnv1coursesreport($timeframe = null, $start_date = null, $end_date = null, $branch_ids = null, $id_course = null, $export = null)
    {
        list($response) = $this->courseLearnv1coursesreportWithHttpInfo($timeframe, $start_date, $end_date, $branch_ids, $id_course, $export);
        return $response;
    }

    /**
     * Operation courseLearnv1coursesreportWithHttpInfo
     *
     * Get all learning objects by id of course
     *
     * @param string $timeframe Timeframe type (this_week,this_month,custom) Default : this_year (optional)
     * @param string $start_date Start date which should be used for the filtering (optional)
     * @param string $end_date End date which should be used for the filtering (optional)
     * @param string[] $branch_ids Branches to filter the results by (optional)
     * @param string $id_course Parameter for showing results for a single course (optional)
     * @param int $export Export data to Excel. Options: 1 - true, 0 - false. Default: 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnCourseReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseLearnv1coursesreportWithHttpInfo($timeframe = null, $start_date = null, $end_date = null, $branch_ids = null, $id_course = null, $export = null)
    {
        // parse inputs
        $resourcePath = "/learn/v1/courses/report";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($timeframe !== null) {
            $queryParams['timeframe'] = $this->apiClient->getSerializer()->toQueryValue($timeframe);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['startDate'] = $this->apiClient->getSerializer()->toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['endDate'] = $this->apiClient->getSerializer()->toQueryValue($end_date);
        }
        // query params
        if (is_array($branch_ids)) {
            $branch_ids = $this->apiClient->getSerializer()->serializeCollection($branch_ids, 'csv', true);
        }
        if ($branch_ids !== null) {
            $queryParams['branchIds'] = $this->apiClient->getSerializer()->toQueryValue($branch_ids);
        }
        // query params
        if ($id_course !== null) {
            $queryParams['idCourse'] = $this->apiClient->getSerializer()->toQueryValue($id_course);
        }
        // query params
        if ($export !== null) {
            $queryParams['export'] = $this->apiClient->getSerializer()->toQueryValue($export);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnCourseReportResponse',
                '/learn/v1/courses/report'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnCourseReportResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnCourseReportResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseLearnv1coursessessionidSessiondateyyyyMmDd
     *
     * Get training materials of session
     *
     * @param int $id_session The id of the webinar session (required)
     * @param int $date The date of the webinar session (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnCourseWebSessionMaterialsResponse
     */
    public function courseLearnv1coursessessionidSessiondateyyyyMmDd($id_session, $date)
    {
        list($response) = $this->courseLearnv1coursessessionidSessiondateyyyyMmDdWithHttpInfo($id_session, $date);
        return $response;
    }

    /**
     * Operation courseLearnv1coursessessionidSessiondateyyyyMmDdWithHttpInfo
     *
     * Get training materials of session
     *
     * @param int $id_session The id of the webinar session (required)
     * @param int $date The date of the webinar session (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnCourseWebSessionMaterialsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseLearnv1coursessessionidSessiondateyyyyMmDdWithHttpInfo($id_session, $date)
    {
        // verify the required parameter 'id_session' is set
        if ($id_session === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_session when calling courseLearnv1coursessessionidSessiondateyyyyMmDd');
        }
        // verify the required parameter 'date' is set
        if ($date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $date when calling courseLearnv1coursessessionidSessiondateyyyyMmDd');
        }
        // parse inputs
        $resourcePath = "/learn/v1/courses/session/{id_session}/date/{yyyy-mm-dd}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id_session !== null) {
            $resourcePath = str_replace(
                "{" . "id_session" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_session),
                $resourcePath
            );
        }
        // path params
        if ($date !== null) {
            $resourcePath = str_replace(
                "{" . "date" . "}",
                $this->apiClient->getSerializer()->toPathValue($date),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnCourseWebSessionMaterialsResponse',
                '/learn/v1/courses/session/{id_session}/date/{yyyy-mm-dd}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnCourseWebSessionMaterialsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnCourseWebSessionMaterialsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
