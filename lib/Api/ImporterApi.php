<?php
/**
 * ImporterApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * ImporterApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ImporterApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return ImporterApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation importerManagev1importerdownloadCsvSampletype
     *
     * Get CSV Sample URL
     *
     * @param string $type Type of the CSV sample (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageImporterDownloadCsvSampleResponse
     */
    public function importerManagev1importerdownloadCsvSampletype($type)
    {
        list($response) = $this->importerManagev1importerdownloadCsvSampletypeWithHttpInfo($type);
        return $response;
    }

    /**
     * Operation importerManagev1importerdownloadCsvSampletypeWithHttpInfo
     *
     * Get CSV Sample URL
     *
     * @param string $type Type of the CSV sample (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageImporterDownloadCsvSampleResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function importerManagev1importerdownloadCsvSampletypeWithHttpInfo($type)
    {
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling importerManagev1importerdownloadCsvSampletype');
        }
        // parse inputs
        $resourcePath = "/manage/v1/importer/download_csv_sample/{type}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                "{" . "type" . "}",
                $this->apiClient->getSerializer()->toPathValue($type),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageImporterDownloadCsvSampleResponse',
                '/manage/v1/importer/download_csv_sample/{type}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageImporterDownloadCsvSampleResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageImporterDownloadCsvSampleResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importerManagev1importergetCsvSampleData
     *
     * Get a preview for the to be imported CSV file.
     *
     * @param string $filename URL linking to the CSV file (required)
     * @param string $charset The used character set for the CSV file. Supported charsets: &#39;Windows-1252&#39;, &#39;BIG-5&#39; and &#39;UTF-8&#39; (required)
     * @param bool $skip_first_row Will the first line contain the column names (required)
     * @param string $delimiter The delimiter used to separate the fields in a row. Default is &amp;quot;,&amp;quot; (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageImporterGetCsvSampleDataResponse
     */
    public function importerManagev1importergetCsvSampleData($filename, $charset, $skip_first_row, $delimiter = null)
    {
        list($response) = $this->importerManagev1importergetCsvSampleDataWithHttpInfo($filename, $charset, $skip_first_row, $delimiter);
        return $response;
    }

    /**
     * Operation importerManagev1importergetCsvSampleDataWithHttpInfo
     *
     * Get a preview for the to be imported CSV file.
     *
     * @param string $filename URL linking to the CSV file (required)
     * @param string $charset The used character set for the CSV file. Supported charsets: &#39;Windows-1252&#39;, &#39;BIG-5&#39; and &#39;UTF-8&#39; (required)
     * @param bool $skip_first_row Will the first line contain the column names (required)
     * @param string $delimiter The delimiter used to separate the fields in a row. Default is &amp;quot;,&amp;quot; (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageImporterGetCsvSampleDataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function importerManagev1importergetCsvSampleDataWithHttpInfo($filename, $charset, $skip_first_row, $delimiter = null)
    {
        // verify the required parameter 'filename' is set
        if ($filename === null) {
            throw new \InvalidArgumentException('Missing the required parameter $filename when calling importerManagev1importergetCsvSampleData');
        }
        // verify the required parameter 'charset' is set
        if ($charset === null) {
            throw new \InvalidArgumentException('Missing the required parameter $charset when calling importerManagev1importergetCsvSampleData');
        }
        // verify the required parameter 'skip_first_row' is set
        if ($skip_first_row === null) {
            throw new \InvalidArgumentException('Missing the required parameter $skip_first_row when calling importerManagev1importergetCsvSampleData');
        }
        // parse inputs
        $resourcePath = "/manage/v1/importer/get_csv_sample_data";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($filename !== null) {
            $queryParams['filename'] = $this->apiClient->getSerializer()->toQueryValue($filename);
        }
        // query params
        if ($delimiter !== null) {
            $queryParams['delimiter'] = $this->apiClient->getSerializer()->toQueryValue($delimiter);
        }
        // query params
        if ($charset !== null) {
            $queryParams['charset'] = $this->apiClient->getSerializer()->toQueryValue($charset);
        }
        // query params
        if ($skip_first_row !== null) {
            $queryParams['skip_first_row'] = $this->apiClient->getSerializer()->toQueryValue($skip_first_row);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageImporterGetCsvSampleDataResponse',
                '/manage/v1/importer/get_csv_sample_data'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageImporterGetCsvSampleDataResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageImporterGetCsvSampleDataResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importerManagev1importerpreset
     *
     * Create an importer preset
     *
     * @param \Swagger\Client\Model\ManageImporterCreatePresetSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageImporterCreatePresetResponse
     */
    public function importerManagev1importerpreset($body = null)
    {
        list($response) = $this->importerManagev1importerpresetWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation importerManagev1importerpresetWithHttpInfo
     *
     * Create an importer preset
     *
     * @param \Swagger\Client\Model\ManageImporterCreatePresetSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageImporterCreatePresetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function importerManagev1importerpresetWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/manage/v1/importer/preset";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageImporterCreatePresetResponse',
                '/manage/v1/importer/preset'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageImporterCreatePresetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageImporterCreatePresetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importerManagev1importerpresetid
     *
     * Update an importer preset
     *
     * @param int $id Preset ID (required)
     * @param \Swagger\Client\Model\ManageImporterUpdatePresetSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageImporterUpdatePresetResponse
     */
    public function importerManagev1importerpresetid($id, $body = null)
    {
        list($response) = $this->importerManagev1importerpresetidWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation importerManagev1importerpresetidWithHttpInfo
     *
     * Update an importer preset
     *
     * @param int $id Preset ID (required)
     * @param \Swagger\Client\Model\ManageImporterUpdatePresetSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageImporterUpdatePresetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function importerManagev1importerpresetidWithHttpInfo($id, $body = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling importerManagev1importerpresetid');
        }
        // parse inputs
        $resourcePath = "/manage/v1/importer/preset/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageImporterUpdatePresetResponse',
                '/manage/v1/importer/preset/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageImporterUpdatePresetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageImporterUpdatePresetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importerManagev1importerpresetid_0
     *
     * Delete an importer preset
     *
     * @param int $id Preset ID (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageImporterDeletePresetResponse
     */
    public function importerManagev1importerpresetid_0($id)
    {
        list($response) = $this->importerManagev1importerpresetid_0WithHttpInfo($id);
        return $response;
    }

    /**
     * Operation importerManagev1importerpresetid_0WithHttpInfo
     *
     * Delete an importer preset
     *
     * @param int $id Preset ID (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageImporterDeletePresetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function importerManagev1importerpresetid_0WithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling importerManagev1importerpresetid_0');
        }
        // parse inputs
        $resourcePath = "/manage/v1/importer/preset/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageImporterDeletePresetResponse',
                '/manage/v1/importer/preset/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageImporterDeletePresetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageImporterDeletePresetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importerManagev1importerpresettype
     *
     * View importer presets for the selected type
     *
     * @param string $type The group name (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageImporterViewPresetsResponse
     */
    public function importerManagev1importerpresettype($type)
    {
        list($response) = $this->importerManagev1importerpresettypeWithHttpInfo($type);
        return $response;
    }

    /**
     * Operation importerManagev1importerpresettypeWithHttpInfo
     *
     * View importer presets for the selected type
     *
     * @param string $type The group name (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageImporterViewPresetsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function importerManagev1importerpresettypeWithHttpInfo($type)
    {
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling importerManagev1importerpresettype');
        }
        // parse inputs
        $resourcePath = "/manage/v1/importer/preset/{type}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                "{" . "type" . "}",
                $this->apiClient->getSerializer()->toPathValue($type),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageImporterViewPresetsResponse',
                '/manage/v1/importer/preset/{type}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageImporterViewPresetsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageImporterViewPresetsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
