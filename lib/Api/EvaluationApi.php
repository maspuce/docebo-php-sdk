<?php
/**
 * EvaluationApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * EvaluationApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EvaluationApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return EvaluationApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation evaluationSkillv1evaluationsmanager
     *
     * Get the summary list of roles and skills per each role for the manager evaluation
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillEvaluationGetManagerSummaryResponse
     */
    public function evaluationSkillv1evaluationsmanager()
    {
        list($response) = $this->evaluationSkillv1evaluationsmanagerWithHttpInfo();
        return $response;
    }

    /**
     * Operation evaluationSkillv1evaluationsmanagerWithHttpInfo
     *
     * Get the summary list of roles and skills per each role for the manager evaluation
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillEvaluationGetManagerSummaryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function evaluationSkillv1evaluationsmanagerWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/skill/v1/evaluations/manager";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillEvaluationGetManagerSummaryResponse',
                '/skill/v1/evaluations/manager'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillEvaluationGetManagerSummaryResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillEvaluationGetManagerSummaryResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation evaluationSkillv1evaluationsrequestid
     *
     * Exclude users from further role evaluation by type
     *
     * @param int $id Id of an evaluation request (required)
     * @param \Swagger\Client\Model\SkillEvaluationDeleteUsersEvaluationSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillEvaluationDeleteUsersEvaluationResponse
     */
    public function evaluationSkillv1evaluationsrequestid($id, $body = null)
    {
        list($response) = $this->evaluationSkillv1evaluationsrequestidWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation evaluationSkillv1evaluationsrequestidWithHttpInfo
     *
     * Exclude users from further role evaluation by type
     *
     * @param int $id Id of an evaluation request (required)
     * @param \Swagger\Client\Model\SkillEvaluationDeleteUsersEvaluationSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillEvaluationDeleteUsersEvaluationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function evaluationSkillv1evaluationsrequestidWithHttpInfo($id, $body = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling evaluationSkillv1evaluationsrequestid');
        }
        // parse inputs
        $resourcePath = "/skill/v1/evaluations/request/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillEvaluationDeleteUsersEvaluationResponse',
                '/skill/v1/evaluations/request/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillEvaluationDeleteUsersEvaluationResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillEvaluationDeleteUsersEvaluationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation evaluationSkillv1evaluationsrequestsrequestIdskillsskillId
     *
     * Get the list of users to be evaluated for the manager by skill
     *
     * @param int $request_id ID of the request to the manager (required)
     * @param int $skill_id ID of the skill to be assessed by the manager (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillEvaluationGetManagerEvaluationResponse
     */
    public function evaluationSkillv1evaluationsrequestsrequestIdskillsskillId($request_id, $skill_id)
    {
        list($response) = $this->evaluationSkillv1evaluationsrequestsrequestIdskillsskillIdWithHttpInfo($request_id, $skill_id);
        return $response;
    }

    /**
     * Operation evaluationSkillv1evaluationsrequestsrequestIdskillsskillIdWithHttpInfo
     *
     * Get the list of users to be evaluated for the manager by skill
     *
     * @param int $request_id ID of the request to the manager (required)
     * @param int $skill_id ID of the skill to be assessed by the manager (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillEvaluationGetManagerEvaluationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function evaluationSkillv1evaluationsrequestsrequestIdskillsskillIdWithHttpInfo($request_id, $skill_id)
    {
        // verify the required parameter 'request_id' is set
        if ($request_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request_id when calling evaluationSkillv1evaluationsrequestsrequestIdskillsskillId');
        }
        // verify the required parameter 'skill_id' is set
        if ($skill_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $skill_id when calling evaluationSkillv1evaluationsrequestsrequestIdskillsskillId');
        }
        // parse inputs
        $resourcePath = "/skill/v1/evaluations/requests/{request_id}/skills/{skill_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($request_id !== null) {
            $resourcePath = str_replace(
                "{" . "request_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($request_id),
                $resourcePath
            );
        }
        // path params
        if ($skill_id !== null) {
            $resourcePath = str_replace(
                "{" . "skill_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($skill_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillEvaluationGetManagerEvaluationResponse',
                '/skill/v1/evaluations/requests/{request_id}/skills/{skill_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillEvaluationGetManagerEvaluationResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillEvaluationGetManagerEvaluationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation evaluationSkillv1evaluationsrequestsrequestIduser
     *
     * Get the list of skill to be evaluated by the user
     *
     * @param int $request_id ID of the request to the manager (required)
     * @param int $request_id2 ID of the request (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillEvaluationGetUserEvaluationResponse
     */
    public function evaluationSkillv1evaluationsrequestsrequestIduser($request_id, $request_id2)
    {
        list($response) = $this->evaluationSkillv1evaluationsrequestsrequestIduserWithHttpInfo($request_id, $request_id2);
        return $response;
    }

    /**
     * Operation evaluationSkillv1evaluationsrequestsrequestIduserWithHttpInfo
     *
     * Get the list of skill to be evaluated by the user
     *
     * @param int $request_id ID of the request to the manager (required)
     * @param int $request_id2 ID of the request (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillEvaluationGetUserEvaluationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function evaluationSkillv1evaluationsrequestsrequestIduserWithHttpInfo($request_id, $request_id2)
    {
        // verify the required parameter 'request_id' is set
        if ($request_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request_id when calling evaluationSkillv1evaluationsrequestsrequestIduser');
        }
        // verify the required parameter 'request_id2' is set
        if ($request_id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request_id2 when calling evaluationSkillv1evaluationsrequestsrequestIduser');
        }
        // parse inputs
        $resourcePath = "/skill/v1/evaluations/requests/{request_id}/user";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($request_id2 !== null) {
            $queryParams['request_id'] = $this->apiClient->getSerializer()->toQueryValue($request_id2);
        }
        // path params
        if ($request_id !== null) {
            $resourcePath = str_replace(
                "{" . "request_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($request_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillEvaluationGetUserEvaluationResponse',
                '/skill/v1/evaluations/requests/{request_id}/user'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillEvaluationGetUserEvaluationResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillEvaluationGetUserEvaluationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation evaluationSkillv1evaluationsstatistics
     *
     * Retrieves the list of Evaluation Statistics, filtered on input parameters
     *
     * @param int $role_id Search by id of a role (optional)
     * @param string $role_title Search text in the role title. Default empty string. (optional)
     * @param string $sort_attr Sort by this field, default value - role_title. Options: role_title, id, role_description (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param string $filters URL encoded filter - role_title(&#39;contains&#39; or &#39;not_contains&#39;), role_description(&#39;contains&#39; or &#39;not_contains&#39;) (optional)
     * @param string $search_text Search by text given(a text to search in role_title, role_description) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillEvaluationGetEvaluationRequestsResponse
     */
    public function evaluationSkillv1evaluationsstatistics($role_id = null, $role_title = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null, $filters = null, $search_text = null)
    {
        list($response) = $this->evaluationSkillv1evaluationsstatisticsWithHttpInfo($role_id, $role_title, $sort_attr, $sort_dir, $page, $page_size, $lang, $get_total_count, $filters, $search_text);
        return $response;
    }

    /**
     * Operation evaluationSkillv1evaluationsstatisticsWithHttpInfo
     *
     * Retrieves the list of Evaluation Statistics, filtered on input parameters
     *
     * @param int $role_id Search by id of a role (optional)
     * @param string $role_title Search text in the role title. Default empty string. (optional)
     * @param string $sort_attr Sort by this field, default value - role_title. Options: role_title, id, role_description (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param string $filters URL encoded filter - role_title(&#39;contains&#39; or &#39;not_contains&#39;), role_description(&#39;contains&#39; or &#39;not_contains&#39;) (optional)
     * @param string $search_text Search by text given(a text to search in role_title, role_description) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillEvaluationGetEvaluationRequestsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function evaluationSkillv1evaluationsstatisticsWithHttpInfo($role_id = null, $role_title = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null, $filters = null, $search_text = null)
    {
        // parse inputs
        $resourcePath = "/skill/v1/evaluations/statistics";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($role_id !== null) {
            $queryParams['role_id'] = $this->apiClient->getSerializer()->toQueryValue($role_id);
        }
        // query params
        if ($role_title !== null) {
            $queryParams['role_title'] = $this->apiClient->getSerializer()->toQueryValue($role_title);
        }
        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // query params
        if ($filters !== null) {
            $queryParams['filters'] = $this->apiClient->getSerializer()->toQueryValue($filters);
        }
        // query params
        if ($search_text !== null) {
            $queryParams['search_text'] = $this->apiClient->getSerializer()->toQueryValue($search_text);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillEvaluationGetEvaluationRequestsResponse',
                '/skill/v1/evaluations/statistics'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillEvaluationGetEvaluationRequestsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillEvaluationGetEvaluationRequestsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation evaluationSkillv1evaluationssubordinates
     *
     * Retrieves all requested subordinates of a manager whose requests are completed
     *
     * @param int $user_name Search list for given user. (optional)
     * @param int $branch_id Search list for given branch. (optional)
     * @param int $selection_status Selection status of the given branch.Options - 1(only branch), 2(with children) (optional)
     * @param string $filters URL encoded filter - role_name(&#39;contains&#39; or &#39;not_contains&#39;) (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillEvaluationListSubordinatesResponse
     */
    public function evaluationSkillv1evaluationssubordinates($user_name = null, $branch_id = null, $selection_status = null, $filters = null, $page = null, $page_size = null, $lang = null, $get_total_count = null)
    {
        list($response) = $this->evaluationSkillv1evaluationssubordinatesWithHttpInfo($user_name, $branch_id, $selection_status, $filters, $page, $page_size, $lang, $get_total_count);
        return $response;
    }

    /**
     * Operation evaluationSkillv1evaluationssubordinatesWithHttpInfo
     *
     * Retrieves all requested subordinates of a manager whose requests are completed
     *
     * @param int $user_name Search list for given user. (optional)
     * @param int $branch_id Search list for given branch. (optional)
     * @param int $selection_status Selection status of the given branch.Options - 1(only branch), 2(with children) (optional)
     * @param string $filters URL encoded filter - role_name(&#39;contains&#39; or &#39;not_contains&#39;) (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillEvaluationListSubordinatesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function evaluationSkillv1evaluationssubordinatesWithHttpInfo($user_name = null, $branch_id = null, $selection_status = null, $filters = null, $page = null, $page_size = null, $lang = null, $get_total_count = null)
    {
        // parse inputs
        $resourcePath = "/skill/v1/evaluations/subordinates";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($user_name !== null) {
            $queryParams['user_name'] = $this->apiClient->getSerializer()->toQueryValue($user_name);
        }
        // query params
        if ($branch_id !== null) {
            $queryParams['branch_id'] = $this->apiClient->getSerializer()->toQueryValue($branch_id);
        }
        // query params
        if ($selection_status !== null) {
            $queryParams['selection_status'] = $this->apiClient->getSerializer()->toQueryValue($selection_status);
        }
        // query params
        if ($filters !== null) {
            $queryParams['filters'] = $this->apiClient->getSerializer()->toQueryValue($filters);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillEvaluationListSubordinatesResponse',
                '/skill/v1/evaluations/subordinates'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillEvaluationListSubordinatesResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillEvaluationListSubordinatesResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation evaluationSkillv1evaluationsuserrequestid
     *
     * Retrieves the User Evaluation Details
     *
     * @param int $id Request id (required)
     * @param int $user_id The id of the evaluated user (required)
     * @param int $rater_id User id of the evaluated user (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillEvaluationViewEvaluationResponse
     */
    public function evaluationSkillv1evaluationsuserrequestid($id, $user_id, $rater_id)
    {
        list($response) = $this->evaluationSkillv1evaluationsuserrequestidWithHttpInfo($id, $user_id, $rater_id);
        return $response;
    }

    /**
     * Operation evaluationSkillv1evaluationsuserrequestidWithHttpInfo
     *
     * Retrieves the User Evaluation Details
     *
     * @param int $id Request id (required)
     * @param int $user_id The id of the evaluated user (required)
     * @param int $rater_id User id of the evaluated user (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillEvaluationViewEvaluationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function evaluationSkillv1evaluationsuserrequestidWithHttpInfo($id, $user_id, $rater_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling evaluationSkillv1evaluationsuserrequestid');
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling evaluationSkillv1evaluationsuserrequestid');
        }
        // verify the required parameter 'rater_id' is set
        if ($rater_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $rater_id when calling evaluationSkillv1evaluationsuserrequestid');
        }
        // parse inputs
        $resourcePath = "/skill/v1/evaluations/user/request/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($user_id !== null) {
            $queryParams['user_id'] = $this->apiClient->getSerializer()->toQueryValue($user_id);
        }
        // query params
        if ($rater_id !== null) {
            $queryParams['rater_id'] = $this->apiClient->getSerializer()->toQueryValue($rater_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillEvaluationViewEvaluationResponse',
                '/skill/v1/evaluations/user/request/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillEvaluationViewEvaluationResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillEvaluationViewEvaluationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation evaluationSkillv1usersevaluation
     *
     * Saves Skill Evaluation for users
     *
     * @param \Swagger\Client\Model\SkillEvaluationSaveEvaluationSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillEvaluationSaveEvaluationResponse
     */
    public function evaluationSkillv1usersevaluation($body = null)
    {
        list($response) = $this->evaluationSkillv1usersevaluationWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation evaluationSkillv1usersevaluationWithHttpInfo
     *
     * Saves Skill Evaluation for users
     *
     * @param \Swagger\Client\Model\SkillEvaluationSaveEvaluationSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillEvaluationSaveEvaluationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function evaluationSkillv1usersevaluationWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/skill/v1/users/evaluation";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillEvaluationSaveEvaluationResponse',
                '/skill/v1/users/evaluation'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillEvaluationSaveEvaluationResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillEvaluationSaveEvaluationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation evaluationSkillv1usersevaluation_0
     *
     * Deletes Evaluation(s)
     *
     * @param \Swagger\Client\Model\SkillEvaluationDeleteSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillEvaluationDeleteResponse
     */
    public function evaluationSkillv1usersevaluation_0($body = null)
    {
        list($response) = $this->evaluationSkillv1usersevaluation_0WithHttpInfo($body);
        return $response;
    }

    /**
     * Operation evaluationSkillv1usersevaluation_0WithHttpInfo
     *
     * Deletes Evaluation(s)
     *
     * @param \Swagger\Client\Model\SkillEvaluationDeleteSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillEvaluationDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function evaluationSkillv1usersevaluation_0WithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/skill/v1/users/evaluation";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillEvaluationDeleteResponse',
                '/skill/v1/users/evaluation'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillEvaluationDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillEvaluationDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation evaluationSkillv1usersevaluationrequestId
     *
     * View summary of the user last completed and calibrated assessment
     *
     * @param int $request_id ID of the completed request (required)
     * @param int $user_id ID of the user to provide data for. If not passed current logged in user is taken. (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillEvaluationEvaluationsSearchResponse
     */
    public function evaluationSkillv1usersevaluationrequestId($request_id, $user_id = null, $lang = null)
    {
        list($response) = $this->evaluationSkillv1usersevaluationrequestIdWithHttpInfo($request_id, $user_id, $lang);
        return $response;
    }

    /**
     * Operation evaluationSkillv1usersevaluationrequestIdWithHttpInfo
     *
     * View summary of the user last completed and calibrated assessment
     *
     * @param int $request_id ID of the completed request (required)
     * @param int $user_id ID of the user to provide data for. If not passed current logged in user is taken. (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillEvaluationEvaluationsSearchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function evaluationSkillv1usersevaluationrequestIdWithHttpInfo($request_id, $user_id = null, $lang = null)
    {
        // verify the required parameter 'request_id' is set
        if ($request_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request_id when calling evaluationSkillv1usersevaluationrequestId');
        }
        // parse inputs
        $resourcePath = "/skill/v1/users/evaluation/{request_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($user_id !== null) {
            $queryParams['user_id'] = $this->apiClient->getSerializer()->toQueryValue($user_id);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // path params
        if ($request_id !== null) {
            $resourcePath = str_replace(
                "{" . "request_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($request_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillEvaluationEvaluationsSearchResponse',
                '/skill/v1/users/evaluation/{request_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillEvaluationEvaluationsSearchResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillEvaluationEvaluationsSearchResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation evaluationSkillv1usersidcontent
     *
     * Enroll user to formal content(courses and learning plans)
     *
     * @param int $id User id (required)
     * @param \Swagger\Client\Model\SkillEvaluationUserEnrollContentSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillEvaluationUserEnrollContentResponse
     */
    public function evaluationSkillv1usersidcontent($id, $body = null)
    {
        list($response) = $this->evaluationSkillv1usersidcontentWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation evaluationSkillv1usersidcontentWithHttpInfo
     *
     * Enroll user to formal content(courses and learning plans)
     *
     * @param int $id User id (required)
     * @param \Swagger\Client\Model\SkillEvaluationUserEnrollContentSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillEvaluationUserEnrollContentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function evaluationSkillv1usersidcontentWithHttpInfo($id, $body = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling evaluationSkillv1usersidcontent');
        }
        // parse inputs
        $resourcePath = "/skill/v1/users/{id}/content";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillEvaluationUserEnrollContentResponse',
                '/skill/v1/users/{id}/content'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillEvaluationUserEnrollContentResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillEvaluationUserEnrollContentResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation evaluationSkillv1usersidgapcontent
     *
     * List suggested formal content(courses and learning plans) for user with gap to be enrolled in according to the skills with gaps
     *
     * @param int $id Id of the user (required)
     * @param int $skill_id Filter by skill id (optional)
     * @param string $sort_attr Sort by this field, default value - title. Options: title, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param string $filters URL encoded filter by: (optional)
     * @param string $search_text Search by text given(a text to search in name or description) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillEvaluationUserSuggestContentResponse
     */
    public function evaluationSkillv1usersidgapcontent($id, $skill_id = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null, $filters = null, $search_text = null)
    {
        list($response) = $this->evaluationSkillv1usersidgapcontentWithHttpInfo($id, $skill_id, $sort_attr, $sort_dir, $page, $page_size, $lang, $get_total_count, $filters, $search_text);
        return $response;
    }

    /**
     * Operation evaluationSkillv1usersidgapcontentWithHttpInfo
     *
     * List suggested formal content(courses and learning plans) for user with gap to be enrolled in according to the skills with gaps
     *
     * @param int $id Id of the user (required)
     * @param int $skill_id Filter by skill id (optional)
     * @param string $sort_attr Sort by this field, default value - title. Options: title, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param string $filters URL encoded filter by: (optional)
     * @param string $search_text Search by text given(a text to search in name or description) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillEvaluationUserSuggestContentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function evaluationSkillv1usersidgapcontentWithHttpInfo($id, $skill_id = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null, $filters = null, $search_text = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling evaluationSkillv1usersidgapcontent');
        }
        // parse inputs
        $resourcePath = "/skill/v1/users/{id}/gap/content";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($skill_id !== null) {
            $queryParams['skill_id'] = $this->apiClient->getSerializer()->toQueryValue($skill_id);
        }
        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // query params
        if ($filters !== null) {
            $queryParams['filters'] = $this->apiClient->getSerializer()->toQueryValue($filters);
        }
        // query params
        if ($search_text !== null) {
            $queryParams['search_text'] = $this->apiClient->getSerializer()->toQueryValue($search_text);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillEvaluationUserSuggestContentResponse',
                '/skill/v1/users/{id}/gap/content'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillEvaluationUserSuggestContentResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillEvaluationUserSuggestContentResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation evaluationSkillv1usersrequests
     *
     * Retrieves all user requests and their status by role
     *
     * @param int $role_id Search requests for given role. (required)
     * @param int $type Get requests by given type. Possible values S-self, M-manager and P-peer. (required)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillEvaluationListRequestsResponse
     */
    public function evaluationSkillv1usersrequests($role_id, $type, $page = null, $page_size = null, $lang = null, $get_total_count = null)
    {
        list($response) = $this->evaluationSkillv1usersrequestsWithHttpInfo($role_id, $type, $page, $page_size, $lang, $get_total_count);
        return $response;
    }

    /**
     * Operation evaluationSkillv1usersrequestsWithHttpInfo
     *
     * Retrieves all user requests and their status by role
     *
     * @param int $role_id Search requests for given role. (required)
     * @param int $type Get requests by given type. Possible values S-self, M-manager and P-peer. (required)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillEvaluationListRequestsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function evaluationSkillv1usersrequestsWithHttpInfo($role_id, $type, $page = null, $page_size = null, $lang = null, $get_total_count = null)
    {
        // verify the required parameter 'role_id' is set
        if ($role_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $role_id when calling evaluationSkillv1usersrequests');
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling evaluationSkillv1usersrequests');
        }
        // parse inputs
        $resourcePath = "/skill/v1/users/requests";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($role_id !== null) {
            $queryParams['role_id'] = $this->apiClient->getSerializer()->toQueryValue($role_id);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = $this->apiClient->getSerializer()->toQueryValue($type);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillEvaluationListRequestsResponse',
                '/skill/v1/users/requests'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillEvaluationListRequestsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillEvaluationListRequestsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation evaluationSkillv1usersrequests_0
     *
     * Creates Evaluation Requests and assign users to the request
     *
     * @param \Swagger\Client\Model\SkillEvaluationInitSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillEvaluationInitResponse
     */
    public function evaluationSkillv1usersrequests_0($body = null)
    {
        list($response) = $this->evaluationSkillv1usersrequests_0WithHttpInfo($body);
        return $response;
    }

    /**
     * Operation evaluationSkillv1usersrequests_0WithHttpInfo
     *
     * Creates Evaluation Requests and assign users to the request
     *
     * @param \Swagger\Client\Model\SkillEvaluationInitSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillEvaluationInitResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function evaluationSkillv1usersrequests_0WithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/skill/v1/users/requests";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillEvaluationInitResponse',
                '/skill/v1/users/requests'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillEvaluationInitResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillEvaluationInitResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation evaluationSkillv1usersrequests_1
     *
     * Delete Evaluation Requests
     *
     * @param \Swagger\Client\Model\SkillEvaluationDeleteRequestsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillEvaluationDeleteRequestsResponse
     */
    public function evaluationSkillv1usersrequests_1($body = null)
    {
        list($response) = $this->evaluationSkillv1usersrequests_1WithHttpInfo($body);
        return $response;
    }

    /**
     * Operation evaluationSkillv1usersrequests_1WithHttpInfo
     *
     * Delete Evaluation Requests
     *
     * @param \Swagger\Client\Model\SkillEvaluationDeleteRequestsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillEvaluationDeleteRequestsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function evaluationSkillv1usersrequests_1WithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/skill/v1/users/requests";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillEvaluationDeleteRequestsResponse',
                '/skill/v1/users/requests'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillEvaluationDeleteRequestsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillEvaluationDeleteRequestsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation evaluationSkillv1usersroleroleIdexcludetype
     *
     * Exclude users from further role evaluation by type
     *
     * @param int $role_id Id of a role (required)
     * @param string $type Evaluation type - S(Self), M(Manager) and P(Peer) (required)
     * @param \Swagger\Client\Model\SkillEvaluationExcludeUsersEvaluationSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillEvaluationExcludeUsersEvaluationResponse
     */
    public function evaluationSkillv1usersroleroleIdexcludetype($role_id, $type, $body = null)
    {
        list($response) = $this->evaluationSkillv1usersroleroleIdexcludetypeWithHttpInfo($role_id, $type, $body);
        return $response;
    }

    /**
     * Operation evaluationSkillv1usersroleroleIdexcludetypeWithHttpInfo
     *
     * Exclude users from further role evaluation by type
     *
     * @param int $role_id Id of a role (required)
     * @param string $type Evaluation type - S(Self), M(Manager) and P(Peer) (required)
     * @param \Swagger\Client\Model\SkillEvaluationExcludeUsersEvaluationSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillEvaluationExcludeUsersEvaluationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function evaluationSkillv1usersroleroleIdexcludetypeWithHttpInfo($role_id, $type, $body = null)
    {
        // verify the required parameter 'role_id' is set
        if ($role_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $role_id when calling evaluationSkillv1usersroleroleIdexcludetype');
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling evaluationSkillv1usersroleroleIdexcludetype');
        }
        // parse inputs
        $resourcePath = "/skill/v1/users/role/{role_id}/exclude/{type}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($role_id !== null) {
            $resourcePath = str_replace(
                "{" . "role_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($role_id),
                $resourcePath
            );
        }
        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                "{" . "type" . "}",
                $this->apiClient->getSerializer()->toPathValue($type),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillEvaluationExcludeUsersEvaluationResponse',
                '/skill/v1/users/role/{role_id}/exclude/{type}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillEvaluationExcludeUsersEvaluationResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillEvaluationExcludeUsersEvaluationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation evaluationSkillv1userssuggestcontent
     *
     * Returns suggested assets content for current employee/user logged
     *
     * @param int $auto_suggest Get only &amp;quot;Auto-suggest&amp;quot;-ed assets(value: 1) or those that are not auto-suggested(value: 0); Default: 1 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillEvaluationSuggestContentResponse
     */
    public function evaluationSkillv1userssuggestcontent($auto_suggest = null)
    {
        list($response) = $this->evaluationSkillv1userssuggestcontentWithHttpInfo($auto_suggest);
        return $response;
    }

    /**
     * Operation evaluationSkillv1userssuggestcontentWithHttpInfo
     *
     * Returns suggested assets content for current employee/user logged
     *
     * @param int $auto_suggest Get only &amp;quot;Auto-suggest&amp;quot;-ed assets(value: 1) or those that are not auto-suggested(value: 0); Default: 1 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillEvaluationSuggestContentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function evaluationSkillv1userssuggestcontentWithHttpInfo($auto_suggest = null)
    {
        // parse inputs
        $resourcePath = "/skill/v1/users/suggest/content";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($auto_suggest !== null) {
            $queryParams['auto_suggest'] = $this->apiClient->getSerializer()->toQueryValue($auto_suggest);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillEvaluationSuggestContentResponse',
                '/skill/v1/users/suggest/content'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillEvaluationSuggestContentResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillEvaluationSuggestContentResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation evaluationSkillv1usersuserIdevaluation
     *
     * Retrieves the latest Self and Manager Evaluation received by the User
     *
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillEvaluationGetLastEvaluationByEmployeeResponse
     */
    public function evaluationSkillv1usersuserIdevaluation($lang = null)
    {
        list($response) = $this->evaluationSkillv1usersuserIdevaluationWithHttpInfo($lang);
        return $response;
    }

    /**
     * Operation evaluationSkillv1usersuserIdevaluationWithHttpInfo
     *
     * Retrieves the latest Self and Manager Evaluation received by the User
     *
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillEvaluationGetLastEvaluationByEmployeeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function evaluationSkillv1usersuserIdevaluationWithHttpInfo($lang = null)
    {
        // parse inputs
        $resourcePath = "/skill/v1/users/{user_id}/evaluation";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillEvaluationGetLastEvaluationByEmployeeResponse',
                '/skill/v1/users/{user_id}/evaluation'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillEvaluationGetLastEvaluationByEmployeeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillEvaluationGetLastEvaluationByEmployeeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation evaluationSkillv1usersuserIdevaluation_0
     *
     * Creates a new Skill Evaluation for an user
     *
     * @param int $user_id User id of the user (required)
     * @param \Swagger\Client\Model\SkillEvaluationCreateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillEvaluationCreateResponse
     */
    public function evaluationSkillv1usersuserIdevaluation_0($user_id, $body = null)
    {
        list($response) = $this->evaluationSkillv1usersuserIdevaluation_0WithHttpInfo($user_id, $body);
        return $response;
    }

    /**
     * Operation evaluationSkillv1usersuserIdevaluation_0WithHttpInfo
     *
     * Creates a new Skill Evaluation for an user
     *
     * @param int $user_id User id of the user (required)
     * @param \Swagger\Client\Model\SkillEvaluationCreateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillEvaluationCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function evaluationSkillv1usersuserIdevaluation_0WithHttpInfo($user_id, $body = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling evaluationSkillv1usersuserIdevaluation_0');
        }
        // parse inputs
        $resourcePath = "/skill/v1/users/{user_id}/evaluation";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillEvaluationCreateResponse',
                '/skill/v1/users/{user_id}/evaluation'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillEvaluationCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillEvaluationCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation evaluationSkillv1usersuserIdevaluationdraft
     *
     * Retrieves the draft Evaluation for an User
     *
     * @param int $user_id User id of the user (required)
     * @param int $user_id2 ID of the user that was rated (required)
     * @param int $rater_id ID of the rater who rated (required)
     * @param string[] $skill_id The skill to get (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillEvaluationGetDraftEvaluationResponse
     */
    public function evaluationSkillv1usersuserIdevaluationdraft($user_id, $user_id2, $rater_id, $skill_id = null, $lang = null)
    {
        list($response) = $this->evaluationSkillv1usersuserIdevaluationdraftWithHttpInfo($user_id, $user_id2, $rater_id, $skill_id, $lang);
        return $response;
    }

    /**
     * Operation evaluationSkillv1usersuserIdevaluationdraftWithHttpInfo
     *
     * Retrieves the draft Evaluation for an User
     *
     * @param int $user_id User id of the user (required)
     * @param int $user_id2 ID of the user that was rated (required)
     * @param int $rater_id ID of the rater who rated (required)
     * @param string[] $skill_id The skill to get (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillEvaluationGetDraftEvaluationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function evaluationSkillv1usersuserIdevaluationdraftWithHttpInfo($user_id, $user_id2, $rater_id, $skill_id = null, $lang = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling evaluationSkillv1usersuserIdevaluationdraft');
        }
        // verify the required parameter 'user_id2' is set
        if ($user_id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id2 when calling evaluationSkillv1usersuserIdevaluationdraft');
        }
        // verify the required parameter 'rater_id' is set
        if ($rater_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $rater_id when calling evaluationSkillv1usersuserIdevaluationdraft');
        }
        // parse inputs
        $resourcePath = "/skill/v1/users/{user_id}/evaluation/draft";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($user_id2 !== null) {
            $queryParams['user_id'] = $this->apiClient->getSerializer()->toQueryValue($user_id2);
        }
        // query params
        if ($rater_id !== null) {
            $queryParams['rater_id'] = $this->apiClient->getSerializer()->toQueryValue($rater_id);
        }
        // query params
        if (is_array($skill_id)) {
            $skill_id = $this->apiClient->getSerializer()->serializeCollection($skill_id, 'csv', true);
        }
        if ($skill_id !== null) {
            $queryParams['skill_id'] = $this->apiClient->getSerializer()->toQueryValue($skill_id);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillEvaluationGetDraftEvaluationResponse',
                '/skill/v1/users/{user_id}/evaluation/draft'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillEvaluationGetDraftEvaluationResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillEvaluationGetDraftEvaluationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation evaluationSkillv1usersuserIdevaluationskillId
     *
     * Retrieves the history of Evaluations for one Skill of one User
     *
     * @param int $user_id User id of the user (required)
     * @param int $skill_id Skill id of the user (required)
     * @param int $user_id2 ID of the rated user (required)
     * @param string $evaluation_type Type of evaluation, options S,M (Self, Manager) (required)
     * @param int $skill_id2 The skill_id to get history (required)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillEvaluationGetEvaluationHistoryResponse
     */
    public function evaluationSkillv1usersuserIdevaluationskillId($user_id, $skill_id, $user_id2, $evaluation_type, $skill_id2, $lang = null)
    {
        list($response) = $this->evaluationSkillv1usersuserIdevaluationskillIdWithHttpInfo($user_id, $skill_id, $user_id2, $evaluation_type, $skill_id2, $lang);
        return $response;
    }

    /**
     * Operation evaluationSkillv1usersuserIdevaluationskillIdWithHttpInfo
     *
     * Retrieves the history of Evaluations for one Skill of one User
     *
     * @param int $user_id User id of the user (required)
     * @param int $skill_id Skill id of the user (required)
     * @param int $user_id2 ID of the rated user (required)
     * @param string $evaluation_type Type of evaluation, options S,M (Self, Manager) (required)
     * @param int $skill_id2 The skill_id to get history (required)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillEvaluationGetEvaluationHistoryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function evaluationSkillv1usersuserIdevaluationskillIdWithHttpInfo($user_id, $skill_id, $user_id2, $evaluation_type, $skill_id2, $lang = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling evaluationSkillv1usersuserIdevaluationskillId');
        }
        // verify the required parameter 'skill_id' is set
        if ($skill_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $skill_id when calling evaluationSkillv1usersuserIdevaluationskillId');
        }
        // verify the required parameter 'user_id2' is set
        if ($user_id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id2 when calling evaluationSkillv1usersuserIdevaluationskillId');
        }
        // verify the required parameter 'evaluation_type' is set
        if ($evaluation_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $evaluation_type when calling evaluationSkillv1usersuserIdevaluationskillId');
        }
        // verify the required parameter 'skill_id2' is set
        if ($skill_id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $skill_id2 when calling evaluationSkillv1usersuserIdevaluationskillId');
        }
        // parse inputs
        $resourcePath = "/skill/v1/users/{user_id}/evaluation/{skill_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($user_id2 !== null) {
            $queryParams['user_id'] = $this->apiClient->getSerializer()->toQueryValue($user_id2);
        }
        // query params
        if ($evaluation_type !== null) {
            $queryParams['evaluation_type'] = $this->apiClient->getSerializer()->toQueryValue($evaluation_type);
        }
        // query params
        if ($skill_id2 !== null) {
            $queryParams['skill_id'] = $this->apiClient->getSerializer()->toQueryValue($skill_id2);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($skill_id !== null) {
            $resourcePath = str_replace(
                "{" . "skill_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($skill_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillEvaluationGetEvaluationHistoryResponse',
                '/skill/v1/users/{user_id}/evaluation/{skill_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillEvaluationGetEvaluationHistoryResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillEvaluationGetEvaluationHistoryResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation evaluationSkillv1usersuserIdmanagers
     *
     * Returns the manager of an employee
     *
     * @param int $hierarchy Type of manager  (1 for Direct manager, other codes reserved for future improvements), default - 1 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillEvaluationGetManagerResponse
     */
    public function evaluationSkillv1usersuserIdmanagers($hierarchy = null)
    {
        list($response) = $this->evaluationSkillv1usersuserIdmanagersWithHttpInfo($hierarchy);
        return $response;
    }

    /**
     * Operation evaluationSkillv1usersuserIdmanagersWithHttpInfo
     *
     * Returns the manager of an employee
     *
     * @param int $hierarchy Type of manager  (1 for Direct manager, other codes reserved for future improvements), default - 1 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillEvaluationGetManagerResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function evaluationSkillv1usersuserIdmanagersWithHttpInfo($hierarchy = null)
    {
        // parse inputs
        $resourcePath = "/skill/v1/users/{user_id}/managers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($hierarchy !== null) {
            $queryParams['hierarchy'] = $this->apiClient->getSerializer()->toQueryValue($hierarchy);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillEvaluationGetManagerResponse',
                '/skill/v1/users/{user_id}/managers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillEvaluationGetManagerResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillEvaluationGetManagerResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation evaluationSkillv1usersuserIdrequestrequestIdreopen
     *
     * Reopens a new Skill Evaluation for an user
     *
     * @param int $user_id User id of the user (required)
     * @param int $request_id Id of evaluation request (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillEvaluationReopenUserEvaluationResponse
     */
    public function evaluationSkillv1usersuserIdrequestrequestIdreopen($user_id, $request_id)
    {
        list($response) = $this->evaluationSkillv1usersuserIdrequestrequestIdreopenWithHttpInfo($user_id, $request_id);
        return $response;
    }

    /**
     * Operation evaluationSkillv1usersuserIdrequestrequestIdreopenWithHttpInfo
     *
     * Reopens a new Skill Evaluation for an user
     *
     * @param int $user_id User id of the user (required)
     * @param int $request_id Id of evaluation request (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillEvaluationReopenUserEvaluationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function evaluationSkillv1usersuserIdrequestrequestIdreopenWithHttpInfo($user_id, $request_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling evaluationSkillv1usersuserIdrequestrequestIdreopen');
        }
        // verify the required parameter 'request_id' is set
        if ($request_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request_id when calling evaluationSkillv1usersuserIdrequestrequestIdreopen');
        }
        // parse inputs
        $resourcePath = "/skill/v1/users/{user_id}/request/{request_id}/reopen";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($request_id !== null) {
            $resourcePath = str_replace(
                "{" . "request_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($request_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillEvaluationReopenUserEvaluationResponse',
                '/skill/v1/users/{user_id}/request/{request_id}/reopen'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillEvaluationReopenUserEvaluationResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillEvaluationReopenUserEvaluationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation evaluationSkillv1usersuserIdrequests
     *
     * Retrieves user evaluations
     *
     * @param int $user_id ID of the user (required)
     * @param int $user_id2 ID of the user (required)
     * @param int $type Get requests by given type. Possible values S-self, M-manager and P-peer. (required)
     * @param int $status Get requests by given status. Possible values 0-Requested, 1-Inprogress and 2-Completed. (required)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillEvaluationListUserRequestsResponse
     */
    public function evaluationSkillv1usersuserIdrequests($user_id, $user_id2, $type, $status, $page = null, $page_size = null, $get_total_count = null)
    {
        list($response) = $this->evaluationSkillv1usersuserIdrequestsWithHttpInfo($user_id, $user_id2, $type, $status, $page, $page_size, $get_total_count);
        return $response;
    }

    /**
     * Operation evaluationSkillv1usersuserIdrequestsWithHttpInfo
     *
     * Retrieves user evaluations
     *
     * @param int $user_id ID of the user (required)
     * @param int $user_id2 ID of the user (required)
     * @param int $type Get requests by given type. Possible values S-self, M-manager and P-peer. (required)
     * @param int $status Get requests by given status. Possible values 0-Requested, 1-Inprogress and 2-Completed. (required)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillEvaluationListUserRequestsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function evaluationSkillv1usersuserIdrequestsWithHttpInfo($user_id, $user_id2, $type, $status, $page = null, $page_size = null, $get_total_count = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling evaluationSkillv1usersuserIdrequests');
        }
        // verify the required parameter 'user_id2' is set
        if ($user_id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id2 when calling evaluationSkillv1usersuserIdrequests');
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling evaluationSkillv1usersuserIdrequests');
        }
        // verify the required parameter 'status' is set
        if ($status === null) {
            throw new \InvalidArgumentException('Missing the required parameter $status when calling evaluationSkillv1usersuserIdrequests');
        }
        // parse inputs
        $resourcePath = "/skill/v1/users/{user_id}/requests";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($user_id2 !== null) {
            $queryParams['user_id'] = $this->apiClient->getSerializer()->toQueryValue($user_id2);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = $this->apiClient->getSerializer()->toQueryValue($type);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillEvaluationListUserRequestsResponse',
                '/skill/v1/users/{user_id}/requests'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillEvaluationListUserRequestsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillEvaluationListUserRequestsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation evaluationSkillv1usersuserIdrequests_0
     *
     * Creates Evaluation Requests and assign users to the request
     *
     * @param int $user_id ID of the user (required)
     * @param \Swagger\Client\Model\SkillEvaluationInitUserRequestsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillEvaluationInitUserRequestsResponse
     */
    public function evaluationSkillv1usersuserIdrequests_0($user_id, $body = null)
    {
        list($response) = $this->evaluationSkillv1usersuserIdrequests_0WithHttpInfo($user_id, $body);
        return $response;
    }

    /**
     * Operation evaluationSkillv1usersuserIdrequests_0WithHttpInfo
     *
     * Creates Evaluation Requests and assign users to the request
     *
     * @param int $user_id ID of the user (required)
     * @param \Swagger\Client\Model\SkillEvaluationInitUserRequestsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillEvaluationInitUserRequestsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function evaluationSkillv1usersuserIdrequests_0WithHttpInfo($user_id, $body = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling evaluationSkillv1usersuserIdrequests_0');
        }
        // parse inputs
        $resourcePath = "/skill/v1/users/{user_id}/requests";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillEvaluationInitUserRequestsResponse',
                '/skill/v1/users/{user_id}/requests'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillEvaluationInitUserRequestsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillEvaluationInitUserRequestsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation evaluationSkillv1usersuserIdrequests_1
     *
     * Delete User Evaluation Requests
     *
     * @param int $user_id ID of the user (required)
     * @param \Swagger\Client\Model\SkillEvaluationDeleteUserRequestsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillEvaluationDeleteUserRequestsResponse
     */
    public function evaluationSkillv1usersuserIdrequests_1($user_id, $body = null)
    {
        list($response) = $this->evaluationSkillv1usersuserIdrequests_1WithHttpInfo($user_id, $body);
        return $response;
    }

    /**
     * Operation evaluationSkillv1usersuserIdrequests_1WithHttpInfo
     *
     * Delete User Evaluation Requests
     *
     * @param int $user_id ID of the user (required)
     * @param \Swagger\Client\Model\SkillEvaluationDeleteUserRequestsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillEvaluationDeleteUserRequestsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function evaluationSkillv1usersuserIdrequests_1WithHttpInfo($user_id, $body = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling evaluationSkillv1usersuserIdrequests_1');
        }
        // parse inputs
        $resourcePath = "/skill/v1/users/{user_id}/requests";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillEvaluationDeleteUserRequestsResponse',
                '/skill/v1/users/{user_id}/requests'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillEvaluationDeleteUserRequestsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillEvaluationDeleteUserRequestsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation evaluationSkillv1usersuserIdrequestsskills
     *
     * Get the list of evaluation to perform grouped by skills
     *
     * @param int $user_id ID of the user (required)
     * @param int $user_id2 ID of the user (required)
     * @param int $type Get evaluations by given type. Possible values S-self, M-manager and P-peer. (required)
     * @param int $status Get evaluations by given status. Possible values 0-Requested, 1-Inprogress and 2-Completed. (required)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillEvaluationListEvaluationSkillsResponse
     */
    public function evaluationSkillv1usersuserIdrequestsskills($user_id, $user_id2, $type, $status, $page = null, $page_size = null, $get_total_count = null)
    {
        list($response) = $this->evaluationSkillv1usersuserIdrequestsskillsWithHttpInfo($user_id, $user_id2, $type, $status, $page, $page_size, $get_total_count);
        return $response;
    }

    /**
     * Operation evaluationSkillv1usersuserIdrequestsskillsWithHttpInfo
     *
     * Get the list of evaluation to perform grouped by skills
     *
     * @param int $user_id ID of the user (required)
     * @param int $user_id2 ID of the user (required)
     * @param int $type Get evaluations by given type. Possible values S-self, M-manager and P-peer. (required)
     * @param int $status Get evaluations by given status. Possible values 0-Requested, 1-Inprogress and 2-Completed. (required)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillEvaluationListEvaluationSkillsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function evaluationSkillv1usersuserIdrequestsskillsWithHttpInfo($user_id, $user_id2, $type, $status, $page = null, $page_size = null, $get_total_count = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling evaluationSkillv1usersuserIdrequestsskills');
        }
        // verify the required parameter 'user_id2' is set
        if ($user_id2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id2 when calling evaluationSkillv1usersuserIdrequestsskills');
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling evaluationSkillv1usersuserIdrequestsskills');
        }
        // verify the required parameter 'status' is set
        if ($status === null) {
            throw new \InvalidArgumentException('Missing the required parameter $status when calling evaluationSkillv1usersuserIdrequestsskills');
        }
        // parse inputs
        $resourcePath = "/skill/v1/users/{user_id}/requests/skills";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($user_id2 !== null) {
            $queryParams['user_id'] = $this->apiClient->getSerializer()->toQueryValue($user_id2);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = $this->apiClient->getSerializer()->toQueryValue($type);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillEvaluationListEvaluationSkillsResponse',
                '/skill/v1/users/{user_id}/requests/skills'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillEvaluationListEvaluationSkillsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillEvaluationListEvaluationSkillsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation evaluationSkillv1usersuserIdroleroleIdexcludetype
     *
     * Exclude an user from further role evaluation by type
     *
     * @param int $user_id User id of the user (required)
     * @param int $role_id Id of a role (required)
     * @param string $type Evaluation type - S(Self), M(Manager) and P(Peer) (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillEvaluationExcludeUserEvaluationResponse
     */
    public function evaluationSkillv1usersuserIdroleroleIdexcludetype($user_id, $role_id, $type)
    {
        list($response) = $this->evaluationSkillv1usersuserIdroleroleIdexcludetypeWithHttpInfo($user_id, $role_id, $type);
        return $response;
    }

    /**
     * Operation evaluationSkillv1usersuserIdroleroleIdexcludetypeWithHttpInfo
     *
     * Exclude an user from further role evaluation by type
     *
     * @param int $user_id User id of the user (required)
     * @param int $role_id Id of a role (required)
     * @param string $type Evaluation type - S(Self), M(Manager) and P(Peer) (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillEvaluationExcludeUserEvaluationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function evaluationSkillv1usersuserIdroleroleIdexcludetypeWithHttpInfo($user_id, $role_id, $type)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling evaluationSkillv1usersuserIdroleroleIdexcludetype');
        }
        // verify the required parameter 'role_id' is set
        if ($role_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $role_id when calling evaluationSkillv1usersuserIdroleroleIdexcludetype');
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling evaluationSkillv1usersuserIdroleroleIdexcludetype');
        }
        // parse inputs
        $resourcePath = "/skill/v1/users/{user_id}/role/{role_id}/exclude/{type}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($role_id !== null) {
            $resourcePath = str_replace(
                "{" . "role_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($role_id),
                $resourcePath
            );
        }
        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                "{" . "type" . "}",
                $this->apiClient->getSerializer()->toPathValue($type),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillEvaluationExcludeUserEvaluationResponse',
                '/skill/v1/users/{user_id}/role/{role_id}/exclude/{type}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillEvaluationExcludeUserEvaluationResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillEvaluationExcludeUserEvaluationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation evaluationSkillv1usersuserIdroles
     *
     * Returns the role of a user
     *
     * @param int $user_id ID of user to get role (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillEvaluationGetUserRoleResponse
     */
    public function evaluationSkillv1usersuserIdroles($user_id)
    {
        list($response) = $this->evaluationSkillv1usersuserIdrolesWithHttpInfo($user_id);
        return $response;
    }

    /**
     * Operation evaluationSkillv1usersuserIdrolesWithHttpInfo
     *
     * Returns the role of a user
     *
     * @param int $user_id ID of user to get role (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillEvaluationGetUserRoleResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function evaluationSkillv1usersuserIdrolesWithHttpInfo($user_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling evaluationSkillv1usersuserIdroles');
        }
        // parse inputs
        $resourcePath = "/skill/v1/users/{user_id}/roles";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillEvaluationGetUserRoleResponse',
                '/skill/v1/users/{user_id}/roles'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillEvaluationGetUserRoleResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillEvaluationGetUserRoleResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
