<?php
/**
 * CatalogueApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * CatalogueApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CatalogueApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return CatalogueApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation catalogueLearnv1catalog
     *
     * Retrieves all catalogues, filtered on input parameters
     *
     * @param string[] $catalogue_name Search text in the catalogue name. Default empty array. OR is performed across array items (optional)
     * @param string[] $catalogue_description Search text in the catalogue description. Default empty array. OR is performed across array items (optional)
     * @param string $code Filter returned catalogues by code (optional)
     * @param string $sort_attr Sort by this field, default value - id. Options: id, catalogue_name, catalogue_description (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param string[] $lang_code Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param int $show_item_list Options: 0 - not show the items list, 1 - show the items list. Default - 0 (optional)
     * @param int $items_per_catalog Number of items to show for each catalog. Default - all (optional)
     * @param string[] $type Type (&amp;quot;classroom&amp;quot;, &amp;quot;elearning&amp;quot;, &amp;quot;mobile&amp;quot;, &amp;quot;webinar&amp;quot;, &amp;quot;learning_plan&amp;quot;).Default - all (optional)
     * @param int[] $price Price (1 - Free, 2 - Paid). Default - all (optional)
     * @param string $search_text Search text in the course/plan name. (optional)
     * @param int $my_catalogs Catalogs list type. If &#x3D; 1 - show catalogs where the user is assigned. If &#x3D; 0 or null - show catalogs which the user can administrate. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnCatalogueIndexResponse
     */
    public function catalogueLearnv1catalog($catalogue_name = null, $catalogue_description = null, $code = null, $sort_attr = null, $sort_dir = null, $lang_code = null, $page = null, $page_size = null, $get_total_count = null, $show_item_list = null, $items_per_catalog = null, $type = null, $price = null, $search_text = null, $my_catalogs = null)
    {
        list($response) = $this->catalogueLearnv1catalogWithHttpInfo($catalogue_name, $catalogue_description, $code, $sort_attr, $sort_dir, $lang_code, $page, $page_size, $get_total_count, $show_item_list, $items_per_catalog, $type, $price, $search_text, $my_catalogs);
        return $response;
    }

    /**
     * Operation catalogueLearnv1catalogWithHttpInfo
     *
     * Retrieves all catalogues, filtered on input parameters
     *
     * @param string[] $catalogue_name Search text in the catalogue name. Default empty array. OR is performed across array items (optional)
     * @param string[] $catalogue_description Search text in the catalogue description. Default empty array. OR is performed across array items (optional)
     * @param string $code Filter returned catalogues by code (optional)
     * @param string $sort_attr Sort by this field, default value - id. Options: id, catalogue_name, catalogue_description (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param string[] $lang_code Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param int $show_item_list Options: 0 - not show the items list, 1 - show the items list. Default - 0 (optional)
     * @param int $items_per_catalog Number of items to show for each catalog. Default - all (optional)
     * @param string[] $type Type (&amp;quot;classroom&amp;quot;, &amp;quot;elearning&amp;quot;, &amp;quot;mobile&amp;quot;, &amp;quot;webinar&amp;quot;, &amp;quot;learning_plan&amp;quot;).Default - all (optional)
     * @param int[] $price Price (1 - Free, 2 - Paid). Default - all (optional)
     * @param string $search_text Search text in the course/plan name. (optional)
     * @param int $my_catalogs Catalogs list type. If &#x3D; 1 - show catalogs where the user is assigned. If &#x3D; 0 or null - show catalogs which the user can administrate. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnCatalogueIndexResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogueLearnv1catalogWithHttpInfo($catalogue_name = null, $catalogue_description = null, $code = null, $sort_attr = null, $sort_dir = null, $lang_code = null, $page = null, $page_size = null, $get_total_count = null, $show_item_list = null, $items_per_catalog = null, $type = null, $price = null, $search_text = null, $my_catalogs = null)
    {
        // parse inputs
        $resourcePath = "/learn/v1/catalog";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if (is_array($catalogue_name)) {
            $catalogue_name = $this->apiClient->getSerializer()->serializeCollection($catalogue_name, 'brackets', true);
        }
        if ($catalogue_name !== null) {
            $queryParams['catalogue_name'] = $this->apiClient->getSerializer()->toQueryValue($catalogue_name);
        }
        // query params
        if (is_array($catalogue_description)) {
            $catalogue_description = $this->apiClient->getSerializer()->serializeCollection($catalogue_description, 'brackets', true);
        }
        if ($catalogue_description !== null) {
            $queryParams['catalogue_description'] = $this->apiClient->getSerializer()->toQueryValue($catalogue_description);
        }
        // query params
        if ($code !== null) {
            $queryParams['code'] = $this->apiClient->getSerializer()->toQueryValue($code);
        }
        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if (is_array($lang_code)) {
            $lang_code = $this->apiClient->getSerializer()->serializeCollection($lang_code, 'brackets', true);
        }
        if ($lang_code !== null) {
            $queryParams['lang_code'] = $this->apiClient->getSerializer()->toQueryValue($lang_code);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // query params
        if ($show_item_list !== null) {
            $queryParams['show_item_list'] = $this->apiClient->getSerializer()->toQueryValue($show_item_list);
        }
        // query params
        if ($items_per_catalog !== null) {
            $queryParams['items_per_catalog'] = $this->apiClient->getSerializer()->toQueryValue($items_per_catalog);
        }
        // query params
        if (is_array($type)) {
            $type = $this->apiClient->getSerializer()->serializeCollection($type, 'brackets', true);
        }
        if ($type !== null) {
            $queryParams['type'] = $this->apiClient->getSerializer()->toQueryValue($type);
        }
        // query params
        if (is_array($price)) {
            $price = $this->apiClient->getSerializer()->serializeCollection($price, 'brackets', true);
        }
        if ($price !== null) {
            $queryParams['price'] = $this->apiClient->getSerializer()->toQueryValue($price);
        }
        // query params
        if ($search_text !== null) {
            $queryParams['search_text'] = $this->apiClient->getSerializer()->toQueryValue($search_text);
        }
        // query params
        if ($my_catalogs !== null) {
            $queryParams['my_catalogs'] = $this->apiClient->getSerializer()->toQueryValue($my_catalogs);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnCatalogueIndexResponse',
                '/learn/v1/catalog'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnCatalogueIndexResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnCatalogueIndexResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation catalogueLearnv1catalogassignmentsbatch
     *
     * Batch import catalogue visibility
     *
     * @param \Swagger\Client\Model\LearnCatalogueBatchVisibilitySchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnCatalogueBatchVisibilityResponse
     */
    public function catalogueLearnv1catalogassignmentsbatch($body = null)
    {
        list($response) = $this->catalogueLearnv1catalogassignmentsbatchWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation catalogueLearnv1catalogassignmentsbatchWithHttpInfo
     *
     * Batch import catalogue visibility
     *
     * @param \Swagger\Client\Model\LearnCatalogueBatchVisibilitySchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnCatalogueBatchVisibilityResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogueLearnv1catalogassignmentsbatchWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/learn/v1/catalog/assignments/batch";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnCatalogueBatchVisibilityResponse',
                '/learn/v1/catalog/assignments/batch'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnCatalogueBatchVisibilityResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnCatalogueBatchVisibilityResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation catalogueLearnv1catalogbatch
     *
     * Batch import catalogs
     *
     * @param \Swagger\Client\Model\LearnCatalogueBatchImportSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnCatalogueBatchImportResponse
     */
    public function catalogueLearnv1catalogbatch($body = null)
    {
        list($response) = $this->catalogueLearnv1catalogbatchWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation catalogueLearnv1catalogbatchWithHttpInfo
     *
     * Batch import catalogs
     *
     * @param \Swagger\Client\Model\LearnCatalogueBatchImportSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnCatalogueBatchImportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogueLearnv1catalogbatchWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/learn/v1/catalog/batch";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnCatalogueBatchImportResponse',
                '/learn/v1/catalog/batch'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnCatalogueBatchImportResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnCatalogueBatchImportResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation catalogueLearnv1catalogcalendar
     *
     * Retrieves courses for Catalog calendar
     *
     * @param string $start_date Filter by start date. Expected format of date is &amp;quot;2015-06-25 03:30:00&amp;quot; (optional)
     * @param string $end_date Filter by end_date. Expected format of date is &amp;quot;2015-06-25 03:30:00&amp;quot; (optional)
     * @param string $sort_attr Sort by this field, default value - course_id. Options: course_id, course_type, course_code, course_name, course_category, session_id, session_name, date_start, date_end, can_enroll (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnCatalogueCalendarResponse
     */
    public function catalogueLearnv1catalogcalendar($start_date = null, $end_date = null, $sort_attr = null, $sort_dir = null, $lang = null, $page = null, $page_size = null, $get_total_count = null)
    {
        list($response) = $this->catalogueLearnv1catalogcalendarWithHttpInfo($start_date, $end_date, $sort_attr, $sort_dir, $lang, $page, $page_size, $get_total_count);
        return $response;
    }

    /**
     * Operation catalogueLearnv1catalogcalendarWithHttpInfo
     *
     * Retrieves courses for Catalog calendar
     *
     * @param string $start_date Filter by start date. Expected format of date is &amp;quot;2015-06-25 03:30:00&amp;quot; (optional)
     * @param string $end_date Filter by end_date. Expected format of date is &amp;quot;2015-06-25 03:30:00&amp;quot; (optional)
     * @param string $sort_attr Sort by this field, default value - course_id. Options: course_id, course_type, course_code, course_name, course_category, session_id, session_name, date_start, date_end, can_enroll (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnCatalogueCalendarResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogueLearnv1catalogcalendarWithHttpInfo($start_date = null, $end_date = null, $sort_attr = null, $sort_dir = null, $lang = null, $page = null, $page_size = null, $get_total_count = null)
    {
        // parse inputs
        $resourcePath = "/learn/v1/catalog/calendar";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = $this->apiClient->getSerializer()->toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = $this->apiClient->getSerializer()->toQueryValue($end_date);
        }
        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnCatalogueCalendarResponse',
                '/learn/v1/catalog/calendar'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnCatalogueCalendarResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnCatalogueCalendarResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation catalogueLearnv1catalogcatalogId
     *
     * View of Catalog (or Generic one if provided ID is \"0\")
     *
     * @param int $catalog_id ID of the catalog (required)
     * @param string[] $type Filtering by Type (&amp;quot;classroom&amp;quot;, &amp;quot;elearning&amp;quot;, &amp;quot;mobile&amp;quot;, &amp;quot;webinar&amp;quot;, &amp;quot;learning_plan&amp;quot;) (optional)
     * @param int[] $price Filtering by Price (1 - Free, 2 - Paid) (optional)
     * @param string[] $lang_code Filtering by Language (optional)
     * @param int $category_id Filtering by Category ID (optional)
     * @param string $search_text Search text in the course/plan name. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnCatalogueViewResponse
     */
    public function catalogueLearnv1catalogcatalogId($catalog_id, $type = null, $price = null, $lang_code = null, $category_id = null, $search_text = null)
    {
        list($response) = $this->catalogueLearnv1catalogcatalogIdWithHttpInfo($catalog_id, $type, $price, $lang_code, $category_id, $search_text);
        return $response;
    }

    /**
     * Operation catalogueLearnv1catalogcatalogIdWithHttpInfo
     *
     * View of Catalog (or Generic one if provided ID is \"0\")
     *
     * @param int $catalog_id ID of the catalog (required)
     * @param string[] $type Filtering by Type (&amp;quot;classroom&amp;quot;, &amp;quot;elearning&amp;quot;, &amp;quot;mobile&amp;quot;, &amp;quot;webinar&amp;quot;, &amp;quot;learning_plan&amp;quot;) (optional)
     * @param int[] $price Filtering by Price (1 - Free, 2 - Paid) (optional)
     * @param string[] $lang_code Filtering by Language (optional)
     * @param int $category_id Filtering by Category ID (optional)
     * @param string $search_text Search text in the course/plan name. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnCatalogueViewResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogueLearnv1catalogcatalogIdWithHttpInfo($catalog_id, $type = null, $price = null, $lang_code = null, $category_id = null, $search_text = null)
    {
        // verify the required parameter 'catalog_id' is set
        if ($catalog_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $catalog_id when calling catalogueLearnv1catalogcatalogId');
        }
        // parse inputs
        $resourcePath = "/learn/v1/catalog/{catalog_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if (is_array($type)) {
            $type = $this->apiClient->getSerializer()->serializeCollection($type, 'brackets', true);
        }
        if ($type !== null) {
            $queryParams['type'] = $this->apiClient->getSerializer()->toQueryValue($type);
        }
        // query params
        if (is_array($price)) {
            $price = $this->apiClient->getSerializer()->serializeCollection($price, 'brackets', true);
        }
        if ($price !== null) {
            $queryParams['price'] = $this->apiClient->getSerializer()->toQueryValue($price);
        }
        // query params
        if (is_array($lang_code)) {
            $lang_code = $this->apiClient->getSerializer()->serializeCollection($lang_code, 'brackets', true);
        }
        if ($lang_code !== null) {
            $queryParams['lang_code'] = $this->apiClient->getSerializer()->toQueryValue($lang_code);
        }
        // query params
        if ($category_id !== null) {
            $queryParams['category_id'] = $this->apiClient->getSerializer()->toQueryValue($category_id);
        }
        // query params
        if ($search_text !== null) {
            $queryParams['search_text'] = $this->apiClient->getSerializer()->toQueryValue($search_text);
        }
        // path params
        if ($catalog_id !== null) {
            $resourcePath = str_replace(
                "{" . "catalog_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($catalog_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnCatalogueViewResponse',
                '/learn/v1/catalog/{catalog_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnCatalogueViewResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnCatalogueViewResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation catalogueLearnv1catalogfilters
     *
     * Retrieves all filter options by catalog ID
     *
     * @param int $catalog_id Id of the given catalog. Value 0 or empty value returns categories from generic catalog (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnCatalogueFiltersResponse
     */
    public function catalogueLearnv1catalogfilters($catalog_id = null)
    {
        list($response) = $this->catalogueLearnv1catalogfiltersWithHttpInfo($catalog_id);
        return $response;
    }

    /**
     * Operation catalogueLearnv1catalogfiltersWithHttpInfo
     *
     * Retrieves all filter options by catalog ID
     *
     * @param int $catalog_id Id of the given catalog. Value 0 or empty value returns categories from generic catalog (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnCatalogueFiltersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogueLearnv1catalogfiltersWithHttpInfo($catalog_id = null)
    {
        // parse inputs
        $resourcePath = "/learn/v1/catalog/filters";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($catalog_id !== null) {
            $queryParams['catalog_id'] = $this->apiClient->getSerializer()->toQueryValue($catalog_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnCatalogueFiltersResponse',
                '/learn/v1/catalog/filters'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnCatalogueFiltersResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnCatalogueFiltersResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation catalogueLearnv1catalogitemsbatch
     *
     * Batch import catalogue items
     *
     * @param \Swagger\Client\Model\LearnCatalogueBatchItemsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnCatalogueBatchItemsResponse
     */
    public function catalogueLearnv1catalogitemsbatch($body = null)
    {
        list($response) = $this->catalogueLearnv1catalogitemsbatchWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation catalogueLearnv1catalogitemsbatchWithHttpInfo
     *
     * Batch import catalogue items
     *
     * @param \Swagger\Client\Model\LearnCatalogueBatchItemsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnCatalogueBatchItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogueLearnv1catalogitemsbatchWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/learn/v1/catalog/items/batch";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnCatalogueBatchItemsResponse',
                '/learn/v1/catalog/items/batch'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnCatalogueBatchItemsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnCatalogueBatchItemsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation catalogueLearnv1catalogwebpages
     *
     * Retrieves webpages to be displayed as public catalog pages
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnCatalogueWebpagesResponse
     */
    public function catalogueLearnv1catalogwebpages()
    {
        list($response) = $this->catalogueLearnv1catalogwebpagesWithHttpInfo();
        return $response;
    }

    /**
     * Operation catalogueLearnv1catalogwebpagesWithHttpInfo
     *
     * Retrieves webpages to be displayed as public catalog pages
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnCatalogueWebpagesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogueLearnv1catalogwebpagesWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/learn/v1/catalog/webpages";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnCatalogueWebpagesResponse',
                '/learn/v1/catalog/webpages'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnCatalogueWebpagesResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnCatalogueWebpagesResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
