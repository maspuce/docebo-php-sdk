<?php
/**
 * SubscriptionBundleApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * SubscriptionBundleApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SubscriptionBundleApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return SubscriptionBundleApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation subscriptionBundleLearnv1subBundle
     *
     * Retrieves all subscription bundles, filtered on input parameters
     *
     * @param string[] $subscription_title Search text in the subscription bundle title. Default empty array. OR is performed across array items (optional)
     * @param string[] $subscription_description Search text in the subscription bundle description. Default empty array. OR is performed across array items (optional)
     * @param string $code Filter returned bundles by code (optional)
     * @param string $sort_attr Sort by this field, default value - id. Options: name, code, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param int $published Filter by published field. Options: 1 - published, 0 - not published. Default - all (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnSubscriptionbundleIndexResponse
     */
    public function subscriptionBundleLearnv1subBundle($subscription_title = null, $subscription_description = null, $code = null, $sort_attr = null, $sort_dir = null, $lang = null, $page = null, $page_size = null, $get_total_count = null, $published = null)
    {
        list($response) = $this->subscriptionBundleLearnv1subBundleWithHttpInfo($subscription_title, $subscription_description, $code, $sort_attr, $sort_dir, $lang, $page, $page_size, $get_total_count, $published);
        return $response;
    }

    /**
     * Operation subscriptionBundleLearnv1subBundleWithHttpInfo
     *
     * Retrieves all subscription bundles, filtered on input parameters
     *
     * @param string[] $subscription_title Search text in the subscription bundle title. Default empty array. OR is performed across array items (optional)
     * @param string[] $subscription_description Search text in the subscription bundle description. Default empty array. OR is performed across array items (optional)
     * @param string $code Filter returned bundles by code (optional)
     * @param string $sort_attr Sort by this field, default value - id. Options: name, code, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param int $published Filter by published field. Options: 1 - published, 0 - not published. Default - all (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnSubscriptionbundleIndexResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionBundleLearnv1subBundleWithHttpInfo($subscription_title = null, $subscription_description = null, $code = null, $sort_attr = null, $sort_dir = null, $lang = null, $page = null, $page_size = null, $get_total_count = null, $published = null)
    {
        // parse inputs
        $resourcePath = "/learn/v1/sub_bundle";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if (is_array($subscription_title)) {
            $subscription_title = $this->apiClient->getSerializer()->serializeCollection($subscription_title, 'brackets', true);
        }
        if ($subscription_title !== null) {
            $queryParams['subscription_title'] = $this->apiClient->getSerializer()->toQueryValue($subscription_title);
        }
        // query params
        if (is_array($subscription_description)) {
            $subscription_description = $this->apiClient->getSerializer()->serializeCollection($subscription_description, 'brackets', true);
        }
        if ($subscription_description !== null) {
            $queryParams['subscription_description'] = $this->apiClient->getSerializer()->toQueryValue($subscription_description);
        }
        // query params
        if ($code !== null) {
            $queryParams['code'] = $this->apiClient->getSerializer()->toQueryValue($code);
        }
        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // query params
        if ($published !== null) {
            $queryParams['published'] = $this->apiClient->getSerializer()->toQueryValue($published);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnSubscriptionbundleIndexResponse',
                '/learn/v1/sub_bundle'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnSubscriptionbundleIndexResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnSubscriptionbundleIndexResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionBundleLearnv1subBundle_0
     *
     * Creates a new subscription bundle
     *
     * @param \Swagger\Client\Model\LearnSubscriptionbundleCreateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnSubscriptionbundleCreateResponse
     */
    public function subscriptionBundleLearnv1subBundle_0($body = null)
    {
        list($response) = $this->subscriptionBundleLearnv1subBundle_0WithHttpInfo($body);
        return $response;
    }

    /**
     * Operation subscriptionBundleLearnv1subBundle_0WithHttpInfo
     *
     * Creates a new subscription bundle
     *
     * @param \Swagger\Client\Model\LearnSubscriptionbundleCreateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnSubscriptionbundleCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionBundleLearnv1subBundle_0WithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/learn/v1/sub_bundle";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnSubscriptionbundleCreateResponse',
                '/learn/v1/sub_bundle'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnSubscriptionbundleCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnSubscriptionbundleCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionBundleLearnv1subBundlebatch
     *
     * Batch import for subscription bundles from CSV
     *
     * @param \Swagger\Client\Model\LearnSubscriptionbundleBatchSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnSubscriptionbundleBatchResponse
     */
    public function subscriptionBundleLearnv1subBundlebatch($body = null)
    {
        list($response) = $this->subscriptionBundleLearnv1subBundlebatchWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation subscriptionBundleLearnv1subBundlebatchWithHttpInfo
     *
     * Batch import for subscription bundles from CSV
     *
     * @param \Swagger\Client\Model\LearnSubscriptionbundleBatchSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnSubscriptionbundleBatchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionBundleLearnv1subBundlebatchWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/learn/v1/sub_bundle/batch";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnSubscriptionbundleBatchResponse',
                '/learn/v1/sub_bundle/batch'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnSubscriptionbundleBatchResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnSubscriptionbundleBatchResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionBundleLearnv1subBundlebundleId
     *
     * View a subscription bundle
     *
     * @param int $bundle_id Subscription bundle id (required)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnSubscriptionbundleViewResponse
     */
    public function subscriptionBundleLearnv1subBundlebundleId($bundle_id, $lang = null)
    {
        list($response) = $this->subscriptionBundleLearnv1subBundlebundleIdWithHttpInfo($bundle_id, $lang);
        return $response;
    }

    /**
     * Operation subscriptionBundleLearnv1subBundlebundleIdWithHttpInfo
     *
     * View a subscription bundle
     *
     * @param int $bundle_id Subscription bundle id (required)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnSubscriptionbundleViewResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionBundleLearnv1subBundlebundleIdWithHttpInfo($bundle_id, $lang = null)
    {
        // verify the required parameter 'bundle_id' is set
        if ($bundle_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $bundle_id when calling subscriptionBundleLearnv1subBundlebundleId');
        }
        // parse inputs
        $resourcePath = "/learn/v1/sub_bundle/{bundle_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // path params
        if ($bundle_id !== null) {
            $resourcePath = str_replace(
                "{" . "bundle_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($bundle_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnSubscriptionbundleViewResponse',
                '/learn/v1/sub_bundle/{bundle_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnSubscriptionbundleViewResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnSubscriptionbundleViewResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionBundleLearnv1subBundlebundleId_0
     *
     * Update a subscription bundle
     *
     * @param int $bundle_id Subscription bundle id (required)
     * @param \Swagger\Client\Model\LearnSubscriptionbundleUpdateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnSubscriptionbundleUpdateResponse
     */
    public function subscriptionBundleLearnv1subBundlebundleId_0($bundle_id, $body = null)
    {
        list($response) = $this->subscriptionBundleLearnv1subBundlebundleId_0WithHttpInfo($bundle_id, $body);
        return $response;
    }

    /**
     * Operation subscriptionBundleLearnv1subBundlebundleId_0WithHttpInfo
     *
     * Update a subscription bundle
     *
     * @param int $bundle_id Subscription bundle id (required)
     * @param \Swagger\Client\Model\LearnSubscriptionbundleUpdateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnSubscriptionbundleUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionBundleLearnv1subBundlebundleId_0WithHttpInfo($bundle_id, $body = null)
    {
        // verify the required parameter 'bundle_id' is set
        if ($bundle_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $bundle_id when calling subscriptionBundleLearnv1subBundlebundleId_0');
        }
        // parse inputs
        $resourcePath = "/learn/v1/sub_bundle/{bundle_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($bundle_id !== null) {
            $resourcePath = str_replace(
                "{" . "bundle_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($bundle_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnSubscriptionbundleUpdateResponse',
                '/learn/v1/sub_bundle/{bundle_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnSubscriptionbundleUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnSubscriptionbundleUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionBundleLearnv1subBundlebundleId_1
     *
     * Deletes one subscription bundle
     *
     * @param int $bundle_id ID of subscription bundle to fetch (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnSubscriptionbundleDeleteResponse
     */
    public function subscriptionBundleLearnv1subBundlebundleId_1($bundle_id)
    {
        list($response) = $this->subscriptionBundleLearnv1subBundlebundleId_1WithHttpInfo($bundle_id);
        return $response;
    }

    /**
     * Operation subscriptionBundleLearnv1subBundlebundleId_1WithHttpInfo
     *
     * Deletes one subscription bundle
     *
     * @param int $bundle_id ID of subscription bundle to fetch (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnSubscriptionbundleDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionBundleLearnv1subBundlebundleId_1WithHttpInfo($bundle_id)
    {
        // verify the required parameter 'bundle_id' is set
        if ($bundle_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $bundle_id when calling subscriptionBundleLearnv1subBundlebundleId_1');
        }
        // parse inputs
        $resourcePath = "/learn/v1/sub_bundle/{bundle_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($bundle_id !== null) {
            $resourcePath = str_replace(
                "{" . "bundle_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($bundle_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnSubscriptionbundleDeleteResponse',
                '/learn/v1/sub_bundle/{bundle_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnSubscriptionbundleDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnSubscriptionbundleDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionBundleLearnv1subBundlebundleIdcourses
     *
     * Get all courses and learning plans for given Subscription bundle
     *
     * @param int $bundle_id ID of the Subscription bundle (required)
     * @param string[] $type Filtering by Type (&amp;quot;classroom&amp;quot;, &amp;quot;elearning&amp;quot;, &amp;quot;mobile&amp;quot;, &amp;quot;webinar&amp;quot;, &amp;quot;learning_plan&amp;quot;) (optional)
     * @param string[] $lang_code Filtering by Language (&amp;quot;en&amp;quot;, &amp;quot;bg&amp;quot;, etc.) (optional)
     * @param int $duration_start Search course with duration equal to or more than given value (n/a for learning plans) (optional)
     * @param int $duration_end Search course with duration equal to or less than given value (n/a for learning plans) (optional)
     * @param int[] $catalog_ids Filter by given Catalog IDs (optional)
     * @param string $search_text Search text in the course/plan name. (optional)
     * @param string $sort_attr Sort by this field, default value - id. Options: name, code, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnSubscriptionbundleGetCoursesLpsResponse
     */
    public function subscriptionBundleLearnv1subBundlebundleIdcourses($bundle_id, $type = null, $lang_code = null, $duration_start = null, $duration_end = null, $catalog_ids = null, $search_text = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $get_total_count = null)
    {
        list($response) = $this->subscriptionBundleLearnv1subBundlebundleIdcoursesWithHttpInfo($bundle_id, $type, $lang_code, $duration_start, $duration_end, $catalog_ids, $search_text, $sort_attr, $sort_dir, $page, $page_size, $get_total_count);
        return $response;
    }

    /**
     * Operation subscriptionBundleLearnv1subBundlebundleIdcoursesWithHttpInfo
     *
     * Get all courses and learning plans for given Subscription bundle
     *
     * @param int $bundle_id ID of the Subscription bundle (required)
     * @param string[] $type Filtering by Type (&amp;quot;classroom&amp;quot;, &amp;quot;elearning&amp;quot;, &amp;quot;mobile&amp;quot;, &amp;quot;webinar&amp;quot;, &amp;quot;learning_plan&amp;quot;) (optional)
     * @param string[] $lang_code Filtering by Language (&amp;quot;en&amp;quot;, &amp;quot;bg&amp;quot;, etc.) (optional)
     * @param int $duration_start Search course with duration equal to or more than given value (n/a for learning plans) (optional)
     * @param int $duration_end Search course with duration equal to or less than given value (n/a for learning plans) (optional)
     * @param int[] $catalog_ids Filter by given Catalog IDs (optional)
     * @param string $search_text Search text in the course/plan name. (optional)
     * @param string $sort_attr Sort by this field, default value - id. Options: name, code, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnSubscriptionbundleGetCoursesLpsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionBundleLearnv1subBundlebundleIdcoursesWithHttpInfo($bundle_id, $type = null, $lang_code = null, $duration_start = null, $duration_end = null, $catalog_ids = null, $search_text = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $get_total_count = null)
    {
        // verify the required parameter 'bundle_id' is set
        if ($bundle_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $bundle_id when calling subscriptionBundleLearnv1subBundlebundleIdcourses');
        }
        // parse inputs
        $resourcePath = "/learn/v1/sub_bundle/{bundle_id}/courses";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if (is_array($type)) {
            $type = $this->apiClient->getSerializer()->serializeCollection($type, 'brackets', true);
        }
        if ($type !== null) {
            $queryParams['type'] = $this->apiClient->getSerializer()->toQueryValue($type);
        }
        // query params
        if (is_array($lang_code)) {
            $lang_code = $this->apiClient->getSerializer()->serializeCollection($lang_code, 'brackets', true);
        }
        if ($lang_code !== null) {
            $queryParams['lang_code'] = $this->apiClient->getSerializer()->toQueryValue($lang_code);
        }
        // query params
        if ($duration_start !== null) {
            $queryParams['duration_start'] = $this->apiClient->getSerializer()->toQueryValue($duration_start);
        }
        // query params
        if ($duration_end !== null) {
            $queryParams['duration_end'] = $this->apiClient->getSerializer()->toQueryValue($duration_end);
        }
        // query params
        if (is_array($catalog_ids)) {
            $catalog_ids = $this->apiClient->getSerializer()->serializeCollection($catalog_ids, 'brackets', true);
        }
        if ($catalog_ids !== null) {
            $queryParams['catalog_ids'] = $this->apiClient->getSerializer()->toQueryValue($catalog_ids);
        }
        // query params
        if ($search_text !== null) {
            $queryParams['search_text'] = $this->apiClient->getSerializer()->toQueryValue($search_text);
        }
        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // path params
        if ($bundle_id !== null) {
            $resourcePath = str_replace(
                "{" . "bundle_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($bundle_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnSubscriptionbundleGetCoursesLpsResponse',
                '/learn/v1/sub_bundle/{bundle_id}/courses'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnSubscriptionbundleGetCoursesLpsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnSubscriptionbundleGetCoursesLpsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionBundleLearnv1subBundlebundleIdfilters
     *
     * Retrieves all filter options by subscription ID
     *
     * @param int $bundle_id Id of the given bundle. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnSubscriptionbundleGetFiltersResponse
     */
    public function subscriptionBundleLearnv1subBundlebundleIdfilters($bundle_id)
    {
        list($response) = $this->subscriptionBundleLearnv1subBundlebundleIdfiltersWithHttpInfo($bundle_id);
        return $response;
    }

    /**
     * Operation subscriptionBundleLearnv1subBundlebundleIdfiltersWithHttpInfo
     *
     * Retrieves all filter options by subscription ID
     *
     * @param int $bundle_id Id of the given bundle. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnSubscriptionbundleGetFiltersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionBundleLearnv1subBundlebundleIdfiltersWithHttpInfo($bundle_id)
    {
        // verify the required parameter 'bundle_id' is set
        if ($bundle_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $bundle_id when calling subscriptionBundleLearnv1subBundlebundleIdfilters');
        }
        // parse inputs
        $resourcePath = "/learn/v1/sub_bundle/{bundle_id}/filters";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($bundle_id !== null) {
            $resourcePath = str_replace(
                "{" . "bundle_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($bundle_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnSubscriptionbundleGetFiltersResponse',
                '/learn/v1/sub_bundle/{bundle_id}/filters'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnSubscriptionbundleGetFiltersResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnSubscriptionbundleGetFiltersResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionBundleLearnv1subBundlebundleIditem
     *
     * Creates a new subscription bundle item
     *
     * @param int $bundle_id Subscription bundle ID (required)
     * @param \Swagger\Client\Model\LearnSubscriptionbundleCreateItemSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnSubscriptionbundleCreateItemResponse
     */
    public function subscriptionBundleLearnv1subBundlebundleIditem($bundle_id, $body = null)
    {
        list($response) = $this->subscriptionBundleLearnv1subBundlebundleIditemWithHttpInfo($bundle_id, $body);
        return $response;
    }

    /**
     * Operation subscriptionBundleLearnv1subBundlebundleIditemWithHttpInfo
     *
     * Creates a new subscription bundle item
     *
     * @param int $bundle_id Subscription bundle ID (required)
     * @param \Swagger\Client\Model\LearnSubscriptionbundleCreateItemSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnSubscriptionbundleCreateItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionBundleLearnv1subBundlebundleIditemWithHttpInfo($bundle_id, $body = null)
    {
        // verify the required parameter 'bundle_id' is set
        if ($bundle_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $bundle_id when calling subscriptionBundleLearnv1subBundlebundleIditem');
        }
        // parse inputs
        $resourcePath = "/learn/v1/sub_bundle/{bundle_id}/item";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($bundle_id !== null) {
            $resourcePath = str_replace(
                "{" . "bundle_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($bundle_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnSubscriptionbundleCreateItemResponse',
                '/learn/v1/sub_bundle/{bundle_id}/item'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnSubscriptionbundleCreateItemResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnSubscriptionbundleCreateItemResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionBundleLearnv1subBundlebundleIditem_0
     *
     * Deletes subscription bundle items
     *
     * @param int $bundle_id ID of subscription bundle to fetch (required)
     * @param \Swagger\Client\Model\LearnSubscriptionbundleDeleteItemsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnSubscriptionbundleDeleteItemsResponse
     */
    public function subscriptionBundleLearnv1subBundlebundleIditem_0($bundle_id, $body = null)
    {
        list($response) = $this->subscriptionBundleLearnv1subBundlebundleIditem_0WithHttpInfo($bundle_id, $body);
        return $response;
    }

    /**
     * Operation subscriptionBundleLearnv1subBundlebundleIditem_0WithHttpInfo
     *
     * Deletes subscription bundle items
     *
     * @param int $bundle_id ID of subscription bundle to fetch (required)
     * @param \Swagger\Client\Model\LearnSubscriptionbundleDeleteItemsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnSubscriptionbundleDeleteItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionBundleLearnv1subBundlebundleIditem_0WithHttpInfo($bundle_id, $body = null)
    {
        // verify the required parameter 'bundle_id' is set
        if ($bundle_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $bundle_id when calling subscriptionBundleLearnv1subBundlebundleIditem_0');
        }
        // parse inputs
        $resourcePath = "/learn/v1/sub_bundle/{bundle_id}/item";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($bundle_id !== null) {
            $resourcePath = str_replace(
                "{" . "bundle_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($bundle_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnSubscriptionbundleDeleteItemsResponse',
                '/learn/v1/sub_bundle/{bundle_id}/item'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnSubscriptionbundleDeleteItemsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnSubscriptionbundleDeleteItemsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionBundleLearnv1subBundlebundleIditemitemId
     *
     * Deletes subscription bundle item
     *
     * @param int $bundle_id ID of subscription bundle to fetch (required)
     * @param int $item_id ID of subscription bundle item to fetch (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnSubscriptionbundleDeleteItemResponse
     */
    public function subscriptionBundleLearnv1subBundlebundleIditemitemId($bundle_id, $item_id)
    {
        list($response) = $this->subscriptionBundleLearnv1subBundlebundleIditemitemIdWithHttpInfo($bundle_id, $item_id);
        return $response;
    }

    /**
     * Operation subscriptionBundleLearnv1subBundlebundleIditemitemIdWithHttpInfo
     *
     * Deletes subscription bundle item
     *
     * @param int $bundle_id ID of subscription bundle to fetch (required)
     * @param int $item_id ID of subscription bundle item to fetch (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnSubscriptionbundleDeleteItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionBundleLearnv1subBundlebundleIditemitemIdWithHttpInfo($bundle_id, $item_id)
    {
        // verify the required parameter 'bundle_id' is set
        if ($bundle_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $bundle_id when calling subscriptionBundleLearnv1subBundlebundleIditemitemId');
        }
        // verify the required parameter 'item_id' is set
        if ($item_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $item_id when calling subscriptionBundleLearnv1subBundlebundleIditemitemId');
        }
        // parse inputs
        $resourcePath = "/learn/v1/sub_bundle/{bundle_id}/item/{item_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($bundle_id !== null) {
            $resourcePath = str_replace(
                "{" . "bundle_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($bundle_id),
                $resourcePath
            );
        }
        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                "{" . "item_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($item_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnSubscriptionbundleDeleteItemResponse',
                '/learn/v1/sub_bundle/{bundle_id}/item/{item_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnSubscriptionbundleDeleteItemResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnSubscriptionbundleDeleteItemResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionBundleLearnv1subBundlebundleIditems
     *
     * Get the subscription bundle items
     *
     * @param int $bundle_id Subscription bundle id (required)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnSubscriptionbundleItemsResponse
     */
    public function subscriptionBundleLearnv1subBundlebundleIditems($bundle_id, $lang = null)
    {
        list($response) = $this->subscriptionBundleLearnv1subBundlebundleIditemsWithHttpInfo($bundle_id, $lang);
        return $response;
    }

    /**
     * Operation subscriptionBundleLearnv1subBundlebundleIditemsWithHttpInfo
     *
     * Get the subscription bundle items
     *
     * @param int $bundle_id Subscription bundle id (required)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnSubscriptionbundleItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionBundleLearnv1subBundlebundleIditemsWithHttpInfo($bundle_id, $lang = null)
    {
        // verify the required parameter 'bundle_id' is set
        if ($bundle_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $bundle_id when calling subscriptionBundleLearnv1subBundlebundleIditems');
        }
        // parse inputs
        $resourcePath = "/learn/v1/sub_bundle/{bundle_id}/items";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // path params
        if ($bundle_id !== null) {
            $resourcePath = str_replace(
                "{" . "bundle_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($bundle_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnSubscriptionbundleItemsResponse',
                '/learn/v1/sub_bundle/{bundle_id}/items'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnSubscriptionbundleItemsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnSubscriptionbundleItemsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionBundleLearnv1subBundlebundleIdvisibility
     *
     * Update a subscription bundle visibility
     *
     * @param int $bundle_id Subscription bundle ID (required)
     * @param \Swagger\Client\Model\LearnSubscriptionbundleUpdateVisibilitySchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnSubscriptionbundleUpdateVisibilityResponse
     */
    public function subscriptionBundleLearnv1subBundlebundleIdvisibility($bundle_id, $body = null)
    {
        list($response) = $this->subscriptionBundleLearnv1subBundlebundleIdvisibilityWithHttpInfo($bundle_id, $body);
        return $response;
    }

    /**
     * Operation subscriptionBundleLearnv1subBundlebundleIdvisibilityWithHttpInfo
     *
     * Update a subscription bundle visibility
     *
     * @param int $bundle_id Subscription bundle ID (required)
     * @param \Swagger\Client\Model\LearnSubscriptionbundleUpdateVisibilitySchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnSubscriptionbundleUpdateVisibilityResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionBundleLearnv1subBundlebundleIdvisibilityWithHttpInfo($bundle_id, $body = null)
    {
        // verify the required parameter 'bundle_id' is set
        if ($bundle_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $bundle_id when calling subscriptionBundleLearnv1subBundlebundleIdvisibility');
        }
        // parse inputs
        $resourcePath = "/learn/v1/sub_bundle/{bundle_id}/visibility";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($bundle_id !== null) {
            $resourcePath = str_replace(
                "{" . "bundle_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($bundle_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnSubscriptionbundleUpdateVisibilityResponse',
                '/learn/v1/sub_bundle/{bundle_id}/visibility'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnSubscriptionbundleUpdateVisibilityResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnSubscriptionbundleUpdateVisibilityResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionBundleLearnv1subBundlebundleIdvisibilityvisibilityId
     *
     * Delete a subscription bundle visibility
     *
     * @param int $bundle_id Subscription bundle ID (required)
     * @param int $visibility_id Subscription bundle visibility ID (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnSubscriptionbundleDeleteVisibilityResponse
     */
    public function subscriptionBundleLearnv1subBundlebundleIdvisibilityvisibilityId($bundle_id, $visibility_id)
    {
        list($response) = $this->subscriptionBundleLearnv1subBundlebundleIdvisibilityvisibilityIdWithHttpInfo($bundle_id, $visibility_id);
        return $response;
    }

    /**
     * Operation subscriptionBundleLearnv1subBundlebundleIdvisibilityvisibilityIdWithHttpInfo
     *
     * Delete a subscription bundle visibility
     *
     * @param int $bundle_id Subscription bundle ID (required)
     * @param int $visibility_id Subscription bundle visibility ID (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnSubscriptionbundleDeleteVisibilityResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionBundleLearnv1subBundlebundleIdvisibilityvisibilityIdWithHttpInfo($bundle_id, $visibility_id)
    {
        // verify the required parameter 'bundle_id' is set
        if ($bundle_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $bundle_id when calling subscriptionBundleLearnv1subBundlebundleIdvisibilityvisibilityId');
        }
        // verify the required parameter 'visibility_id' is set
        if ($visibility_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $visibility_id when calling subscriptionBundleLearnv1subBundlebundleIdvisibilityvisibilityId');
        }
        // parse inputs
        $resourcePath = "/learn/v1/sub_bundle/{bundle_id}/visibility/{visibility_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($bundle_id !== null) {
            $resourcePath = str_replace(
                "{" . "bundle_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($bundle_id),
                $resourcePath
            );
        }
        // path params
        if ($visibility_id !== null) {
            $resourcePath = str_replace(
                "{" . "visibility_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($visibility_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnSubscriptionbundleDeleteVisibilityResponse',
                '/learn/v1/sub_bundle/{bundle_id}/visibility/{visibility_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnSubscriptionbundleDeleteVisibilityResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnSubscriptionbundleDeleteVisibilityResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionBundleLearnv1subBundleitemsbatch
     *
     * Batch import for subscription bundles from CSV
     *
     * @param \Swagger\Client\Model\LearnSubscriptionbundleItemsBatchSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnSubscriptionbundleItemsBatchResponse
     */
    public function subscriptionBundleLearnv1subBundleitemsbatch($body = null)
    {
        list($response) = $this->subscriptionBundleLearnv1subBundleitemsbatchWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation subscriptionBundleLearnv1subBundleitemsbatchWithHttpInfo
     *
     * Batch import for subscription bundles from CSV
     *
     * @param \Swagger\Client\Model\LearnSubscriptionbundleItemsBatchSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnSubscriptionbundleItemsBatchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionBundleLearnv1subBundleitemsbatchWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/learn/v1/sub_bundle/items/batch";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnSubscriptionbundleItemsBatchResponse',
                '/learn/v1/sub_bundle/items/batch'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnSubscriptionbundleItemsBatchResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnSubscriptionbundleItemsBatchResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionBundleLearnv1subBundlevisibilitybatch
     *
     * Batch import for subscription bundles visibility
     *
     * @param \Swagger\Client\Model\LearnSubscriptionbundleVisibilityBatchSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnSubscriptionbundleVisibilityBatchResponse
     */
    public function subscriptionBundleLearnv1subBundlevisibilitybatch($body = null)
    {
        list($response) = $this->subscriptionBundleLearnv1subBundlevisibilitybatchWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation subscriptionBundleLearnv1subBundlevisibilitybatchWithHttpInfo
     *
     * Batch import for subscription bundles visibility
     *
     * @param \Swagger\Client\Model\LearnSubscriptionbundleVisibilityBatchSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnSubscriptionbundleVisibilityBatchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionBundleLearnv1subBundlevisibilitybatchWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/learn/v1/sub_bundle/visibility/batch";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnSubscriptionbundleVisibilityBatchResponse',
                '/learn/v1/sub_bundle/visibility/batch'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnSubscriptionbundleVisibilityBatchResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnSubscriptionbundleVisibilityBatchResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
