<?php
/**
 * AssetsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * AssetsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AssetsApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return AssetsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation assetsSharev1assets
     *
     * Retrieves all assets for user, filtered on input parameters
     *
     * @param string $search_text Search text in the asset title and description. Default empty string (optional)
     * @param string $sort_attr Sort by this field, default value - id. Options: id, title, date (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param int $ignore_private Filter returned assets by is_private. Options 1 - ignore private, 0 - include private. Default: 1 (optional)
     * @param int $exclude_predefined Filter returned assets by is predefined. Options 1 - exclude predefined, 0 - include predefined. Default: 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ShareAssetsListResponse
     */
    public function assetsSharev1assets($search_text = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $get_total_count = null, $ignore_private = null, $exclude_predefined = null)
    {
        list($response) = $this->assetsSharev1assetsWithHttpInfo($search_text, $sort_attr, $sort_dir, $page, $page_size, $get_total_count, $ignore_private, $exclude_predefined);
        return $response;
    }

    /**
     * Operation assetsSharev1assetsWithHttpInfo
     *
     * Retrieves all assets for user, filtered on input parameters
     *
     * @param string $search_text Search text in the asset title and description. Default empty string (optional)
     * @param string $sort_attr Sort by this field, default value - id. Options: id, title, date (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param int $ignore_private Filter returned assets by is_private. Options 1 - ignore private, 0 - include private. Default: 1 (optional)
     * @param int $exclude_predefined Filter returned assets by is predefined. Options 1 - exclude predefined, 0 - include predefined. Default: 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ShareAssetsListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsSharev1assetsWithHttpInfo($search_text = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $get_total_count = null, $ignore_private = null, $exclude_predefined = null)
    {
        // parse inputs
        $resourcePath = "/share/v1/assets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($search_text !== null) {
            $queryParams['search_text'] = $this->apiClient->getSerializer()->toQueryValue($search_text);
        }
        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // query params
        if ($ignore_private !== null) {
            $queryParams['ignore_private'] = $this->apiClient->getSerializer()->toQueryValue($ignore_private);
        }
        // query params
        if ($exclude_predefined !== null) {
            $queryParams['exclude_predefined'] = $this->apiClient->getSerializer()->toQueryValue($exclude_predefined);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ShareAssetsListResponse',
                '/share/v1/assets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ShareAssetsListResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ShareAssetsListResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetsSharev1assets_0
     *
     * Creates a new asset
     *
     * @param \Swagger\Client\Model\ShareAssetsCreateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ShareAssetsCreateResponse
     */
    public function assetsSharev1assets_0($body = null)
    {
        list($response) = $this->assetsSharev1assets_0WithHttpInfo($body);
        return $response;
    }

    /**
     * Operation assetsSharev1assets_0WithHttpInfo
     *
     * Creates a new asset
     *
     * @param \Swagger\Client\Model\ShareAssetsCreateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ShareAssetsCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsSharev1assets_0WithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/share/v1/assets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ShareAssetsCreateResponse',
                '/share/v1/assets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ShareAssetsCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ShareAssetsCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetsSharev1assetsassetIdrating
     *
     * View Asset Rating
     *
     * @param int $asset_id Required ID of asset to fetch (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ShareAssetsViewRatingL2Response
     */
    public function assetsSharev1assetsassetIdrating($asset_id)
    {
        list($response) = $this->assetsSharev1assetsassetIdratingWithHttpInfo($asset_id);
        return $response;
    }

    /**
     * Operation assetsSharev1assetsassetIdratingWithHttpInfo
     *
     * View Asset Rating
     *
     * @param int $asset_id Required ID of asset to fetch (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ShareAssetsViewRatingL2Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsSharev1assetsassetIdratingWithHttpInfo($asset_id)
    {
        // verify the required parameter 'asset_id' is set
        if ($asset_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $asset_id when calling assetsSharev1assetsassetIdrating');
        }
        // parse inputs
        $resourcePath = "/share/v1/assets/{asset_id}/rating";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($asset_id !== null) {
            $resourcePath = str_replace(
                "{" . "asset_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($asset_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ShareAssetsViewRatingL2Response',
                '/share/v1/assets/{asset_id}/rating'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ShareAssetsViewRatingL2Response', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ShareAssetsViewRatingL2Response', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetsSharev1assetsassetIdrating_0
     *
     * Update Asset Rating
     *
     * @param int $asset_id Required ID of asset to fetch (required)
     * @param \Swagger\Client\Model\ShareAssetsUpdateRatingSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ShareAssetsUpdateRatingResponse
     */
    public function assetsSharev1assetsassetIdrating_0($asset_id, $body = null)
    {
        list($response) = $this->assetsSharev1assetsassetIdrating_0WithHttpInfo($asset_id, $body);
        return $response;
    }

    /**
     * Operation assetsSharev1assetsassetIdrating_0WithHttpInfo
     *
     * Update Asset Rating
     *
     * @param int $asset_id Required ID of asset to fetch (required)
     * @param \Swagger\Client\Model\ShareAssetsUpdateRatingSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ShareAssetsUpdateRatingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsSharev1assetsassetIdrating_0WithHttpInfo($asset_id, $body = null)
    {
        // verify the required parameter 'asset_id' is set
        if ($asset_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $asset_id when calling assetsSharev1assetsassetIdrating_0');
        }
        // parse inputs
        $resourcePath = "/share/v1/assets/{asset_id}/rating";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($asset_id !== null) {
            $resourcePath = str_replace(
                "{" . "asset_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($asset_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ShareAssetsUpdateRatingResponse',
                '/share/v1/assets/{asset_id}/rating'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ShareAssetsUpdateRatingResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ShareAssetsUpdateRatingResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetsSharev1assetsidAsset
     *
     * Asset View
     *
     * @param int $id_asset Asset ID (required)
     * @param int $id_playlist ID of the playlist for getting details of it. NOTE: asset must be assigned to this playlist (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ShareAssetsViewResponse
     */
    public function assetsSharev1assetsidAsset($id_asset, $id_playlist = null)
    {
        list($response) = $this->assetsSharev1assetsidAssetWithHttpInfo($id_asset, $id_playlist);
        return $response;
    }

    /**
     * Operation assetsSharev1assetsidAssetWithHttpInfo
     *
     * Asset View
     *
     * @param int $id_asset Asset ID (required)
     * @param int $id_playlist ID of the playlist for getting details of it. NOTE: asset must be assigned to this playlist (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ShareAssetsViewResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsSharev1assetsidAssetWithHttpInfo($id_asset, $id_playlist = null)
    {
        // verify the required parameter 'id_asset' is set
        if ($id_asset === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_asset when calling assetsSharev1assetsidAsset');
        }
        // parse inputs
        $resourcePath = "/share/v1/assets/{id_asset}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($id_playlist !== null) {
            $queryParams['id_playlist'] = $this->apiClient->getSerializer()->toQueryValue($id_playlist);
        }
        // path params
        if ($id_asset !== null) {
            $resourcePath = str_replace(
                "{" . "id_asset" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_asset),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ShareAssetsViewResponse',
                '/share/v1/assets/{id_asset}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ShareAssetsViewResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ShareAssetsViewResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetsSharev1assetsidAsset_0
     *
     * Update asset
     *
     * @param int $id_asset ID of the asset (required)
     * @param \Swagger\Client\Model\ShareAssetsUpdateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ShareAssetsUpdateResponse
     */
    public function assetsSharev1assetsidAsset_0($id_asset, $body = null)
    {
        list($response) = $this->assetsSharev1assetsidAsset_0WithHttpInfo($id_asset, $body);
        return $response;
    }

    /**
     * Operation assetsSharev1assetsidAsset_0WithHttpInfo
     *
     * Update asset
     *
     * @param int $id_asset ID of the asset (required)
     * @param \Swagger\Client\Model\ShareAssetsUpdateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ShareAssetsUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsSharev1assetsidAsset_0WithHttpInfo($id_asset, $body = null)
    {
        // verify the required parameter 'id_asset' is set
        if ($id_asset === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_asset when calling assetsSharev1assetsidAsset_0');
        }
        // parse inputs
        $resourcePath = "/share/v1/assets/{id_asset}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id_asset !== null) {
            $resourcePath = str_replace(
                "{" . "id_asset" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_asset),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ShareAssetsUpdateResponse',
                '/share/v1/assets/{id_asset}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ShareAssetsUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ShareAssetsUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetsSharev1assetsidAsset_1
     *
     * Delete asset
     *
     * @param int $id_asset Asset id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ShareAssetsDeleteResponse
     */
    public function assetsSharev1assetsidAsset_1($id_asset)
    {
        list($response) = $this->assetsSharev1assetsidAsset_1WithHttpInfo($id_asset);
        return $response;
    }

    /**
     * Operation assetsSharev1assetsidAsset_1WithHttpInfo
     *
     * Delete asset
     *
     * @param int $id_asset Asset id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ShareAssetsDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsSharev1assetsidAsset_1WithHttpInfo($id_asset)
    {
        // verify the required parameter 'id_asset' is set
        if ($id_asset === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_asset when calling assetsSharev1assetsidAsset_1');
        }
        // parse inputs
        $resourcePath = "/share/v1/assets/{id_asset}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id_asset !== null) {
            $resourcePath = str_replace(
                "{" . "id_asset" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_asset),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ShareAssetsDeleteResponse',
                '/share/v1/assets/{id_asset}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ShareAssetsDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ShareAssetsDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetsSharev1assetsidAssetchannels
     *
     * View Asset assigned Channels
     *
     * @param int $id_asset ID of the asset (required)
     * @param string $sort_attr Sort by this field, default value - id. Options: name, code, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200, if value is -1 -&amp;gt; all items are displayed (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ShareAssetsViewChannelsL2Response
     */
    public function assetsSharev1assetsidAssetchannels($id_asset, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null)
    {
        list($response) = $this->assetsSharev1assetsidAssetchannelsWithHttpInfo($id_asset, $sort_attr, $sort_dir, $page, $page_size, $lang, $get_total_count);
        return $response;
    }

    /**
     * Operation assetsSharev1assetsidAssetchannelsWithHttpInfo
     *
     * View Asset assigned Channels
     *
     * @param int $id_asset ID of the asset (required)
     * @param string $sort_attr Sort by this field, default value - id. Options: name, code, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200, if value is -1 -&amp;gt; all items are displayed (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ShareAssetsViewChannelsL2Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsSharev1assetsidAssetchannelsWithHttpInfo($id_asset, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null)
    {
        // verify the required parameter 'id_asset' is set
        if ($id_asset === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_asset when calling assetsSharev1assetsidAssetchannels');
        }
        // parse inputs
        $resourcePath = "/share/v1/assets/{id_asset}/channels";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // path params
        if ($id_asset !== null) {
            $resourcePath = str_replace(
                "{" . "id_asset" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_asset),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ShareAssetsViewChannelsL2Response',
                '/share/v1/assets/{id_asset}/channels'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ShareAssetsViewChannelsL2Response', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ShareAssetsViewChannelsL2Response', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetsSharev1assetsidAssetchannels_0
     *
     * Assign channels to asset
     *
     * @param int $id_asset ID of asset to fetch (required)
     * @param \Swagger\Client\Model\ShareAssetsAssignChannelsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ShareAssetsAssignChannelsResponse
     */
    public function assetsSharev1assetsidAssetchannels_0($id_asset, $body = null)
    {
        list($response) = $this->assetsSharev1assetsidAssetchannels_0WithHttpInfo($id_asset, $body);
        return $response;
    }

    /**
     * Operation assetsSharev1assetsidAssetchannels_0WithHttpInfo
     *
     * Assign channels to asset
     *
     * @param int $id_asset ID of asset to fetch (required)
     * @param \Swagger\Client\Model\ShareAssetsAssignChannelsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ShareAssetsAssignChannelsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsSharev1assetsidAssetchannels_0WithHttpInfo($id_asset, $body = null)
    {
        // verify the required parameter 'id_asset' is set
        if ($id_asset === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_asset when calling assetsSharev1assetsidAssetchannels_0');
        }
        // parse inputs
        $resourcePath = "/share/v1/assets/{id_asset}/channels";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id_asset !== null) {
            $resourcePath = str_replace(
                "{" . "id_asset" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_asset),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ShareAssetsAssignChannelsResponse',
                '/share/v1/assets/{id_asset}/channels'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ShareAssetsAssignChannelsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ShareAssetsAssignChannelsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetsSharev1assetsidAssetcomments
     *
     * View Asset Comments
     *
     * @param int $id_asset Required ID of asset to fetch (required)
     * @param string $sort_attr Sort by this field, default value - id. Options: title, date, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200, if value is -1 -&amp;gt; all items are displayed (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ShareAssetsViewCommentsResponse
     */
    public function assetsSharev1assetsidAssetcomments($id_asset, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null)
    {
        list($response) = $this->assetsSharev1assetsidAssetcommentsWithHttpInfo($id_asset, $sort_attr, $sort_dir, $page, $page_size, $lang, $get_total_count);
        return $response;
    }

    /**
     * Operation assetsSharev1assetsidAssetcommentsWithHttpInfo
     *
     * View Asset Comments
     *
     * @param int $id_asset Required ID of asset to fetch (required)
     * @param string $sort_attr Sort by this field, default value - id. Options: title, date, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200, if value is -1 -&amp;gt; all items are displayed (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ShareAssetsViewCommentsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsSharev1assetsidAssetcommentsWithHttpInfo($id_asset, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null)
    {
        // verify the required parameter 'id_asset' is set
        if ($id_asset === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_asset when calling assetsSharev1assetsidAssetcomments');
        }
        // parse inputs
        $resourcePath = "/share/v1/assets/{id_asset}/comments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // path params
        if ($id_asset !== null) {
            $resourcePath = str_replace(
                "{" . "id_asset" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_asset),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ShareAssetsViewCommentsResponse',
                '/share/v1/assets/{id_asset}/comments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ShareAssetsViewCommentsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ShareAssetsViewCommentsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetsSharev1assetsidAssetdetails
     *
     * Asset Details
     *
     * @param int $id_asset Asset id/details (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ShareAssetsAssetDetailsResponse
     */
    public function assetsSharev1assetsidAssetdetails($id_asset)
    {
        list($response) = $this->assetsSharev1assetsidAssetdetailsWithHttpInfo($id_asset);
        return $response;
    }

    /**
     * Operation assetsSharev1assetsidAssetdetailsWithHttpInfo
     *
     * Asset Details
     *
     * @param int $id_asset Asset id/details (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ShareAssetsAssetDetailsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsSharev1assetsidAssetdetailsWithHttpInfo($id_asset)
    {
        // verify the required parameter 'id_asset' is set
        if ($id_asset === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_asset when calling assetsSharev1assetsidAssetdetails');
        }
        // parse inputs
        $resourcePath = "/share/v1/assets/{id_asset}/details";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id_asset !== null) {
            $resourcePath = str_replace(
                "{" . "id_asset" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_asset),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ShareAssetsAssetDetailsResponse',
                '/share/v1/assets/{id_asset}/details'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ShareAssetsAssetDetailsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ShareAssetsAssetDetailsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetsSharev1assetsidAssetplayer
     *
     * Retrieves config for the player
     *
     * @param int $id_asset Asset ID (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ShareAssetsPlayerConfigResponse
     */
    public function assetsSharev1assetsidAssetplayer($id_asset)
    {
        list($response) = $this->assetsSharev1assetsidAssetplayerWithHttpInfo($id_asset);
        return $response;
    }

    /**
     * Operation assetsSharev1assetsidAssetplayerWithHttpInfo
     *
     * Retrieves config for the player
     *
     * @param int $id_asset Asset ID (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ShareAssetsPlayerConfigResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsSharev1assetsidAssetplayerWithHttpInfo($id_asset)
    {
        // verify the required parameter 'id_asset' is set
        if ($id_asset === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_asset when calling assetsSharev1assetsidAssetplayer');
        }
        // parse inputs
        $resourcePath = "/share/v1/assets/{id_asset}/player";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id_asset !== null) {
            $resourcePath = str_replace(
                "{" . "id_asset" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_asset),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ShareAssetsPlayerConfigResponse',
                '/share/v1/assets/{id_asset}/player'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ShareAssetsPlayerConfigResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ShareAssetsPlayerConfigResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetsSharev1assetsidAssetplaylists
     *
     * Assign playlists to asset
     *
     * @param int $id_asset Asset id (required)
     * @param \Swagger\Client\Model\ShareAssetsAssignPlaylistsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ShareAssetsAssignPlaylistsResponse
     */
    public function assetsSharev1assetsidAssetplaylists($id_asset, $body = null)
    {
        list($response) = $this->assetsSharev1assetsidAssetplaylistsWithHttpInfo($id_asset, $body);
        return $response;
    }

    /**
     * Operation assetsSharev1assetsidAssetplaylistsWithHttpInfo
     *
     * Assign playlists to asset
     *
     * @param int $id_asset Asset id (required)
     * @param \Swagger\Client\Model\ShareAssetsAssignPlaylistsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ShareAssetsAssignPlaylistsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsSharev1assetsidAssetplaylistsWithHttpInfo($id_asset, $body = null)
    {
        // verify the required parameter 'id_asset' is set
        if ($id_asset === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_asset when calling assetsSharev1assetsidAssetplaylists');
        }
        // parse inputs
        $resourcePath = "/share/v1/assets/{id_asset}/playlists";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id_asset !== null) {
            $resourcePath = str_replace(
                "{" . "id_asset" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_asset),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ShareAssetsAssignPlaylistsResponse',
                '/share/v1/assets/{id_asset}/playlists'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ShareAssetsAssignPlaylistsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ShareAssetsAssignPlaylistsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetsSharev1assetsidAssetquestions
     *
     * View Asset Questions
     *
     * @param int $id_asset Required ID of asset to fetch (required)
     * @param string $sort_attr Sort by this field, default value - id. Options: title, date, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200, if value is -1 -&amp;gt; all items are displayed (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ShareAssetsViewQuestionsResponse
     */
    public function assetsSharev1assetsidAssetquestions($id_asset, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null)
    {
        list($response) = $this->assetsSharev1assetsidAssetquestionsWithHttpInfo($id_asset, $sort_attr, $sort_dir, $page, $page_size, $lang, $get_total_count);
        return $response;
    }

    /**
     * Operation assetsSharev1assetsidAssetquestionsWithHttpInfo
     *
     * View Asset Questions
     *
     * @param int $id_asset Required ID of asset to fetch (required)
     * @param string $sort_attr Sort by this field, default value - id. Options: title, date, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200, if value is -1 -&amp;gt; all items are displayed (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ShareAssetsViewQuestionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsSharev1assetsidAssetquestionsWithHttpInfo($id_asset, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null)
    {
        // verify the required parameter 'id_asset' is set
        if ($id_asset === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_asset when calling assetsSharev1assetsidAssetquestions');
        }
        // parse inputs
        $resourcePath = "/share/v1/assets/{id_asset}/questions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // path params
        if ($id_asset !== null) {
            $resourcePath = str_replace(
                "{" . "id_asset" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_asset),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ShareAssetsViewQuestionsResponse',
                '/share/v1/assets/{id_asset}/questions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ShareAssetsViewQuestionsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ShareAssetsViewQuestionsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetsSharev1assetsidAssetspendTime
     *
     * View spent time for specific asset
     *
     * @param int $id_asset Asset id (required)
     * @param int $time Time in seconds - specifies the spent time in an asset (required)
     * @param int $id_user ID of the user (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ShareAssetsViewSpentTimeL2Response
     */
    public function assetsSharev1assetsidAssetspendTime($id_asset, $time, $id_user)
    {
        list($response) = $this->assetsSharev1assetsidAssetspendTimeWithHttpInfo($id_asset, $time, $id_user);
        return $response;
    }

    /**
     * Operation assetsSharev1assetsidAssetspendTimeWithHttpInfo
     *
     * View spent time for specific asset
     *
     * @param int $id_asset Asset id (required)
     * @param int $time Time in seconds - specifies the spent time in an asset (required)
     * @param int $id_user ID of the user (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ShareAssetsViewSpentTimeL2Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsSharev1assetsidAssetspendTimeWithHttpInfo($id_asset, $time, $id_user)
    {
        // verify the required parameter 'id_asset' is set
        if ($id_asset === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_asset when calling assetsSharev1assetsidAssetspendTime');
        }
        // verify the required parameter 'time' is set
        if ($time === null) {
            throw new \InvalidArgumentException('Missing the required parameter $time when calling assetsSharev1assetsidAssetspendTime');
        }
        // verify the required parameter 'id_user' is set
        if ($id_user === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_user when calling assetsSharev1assetsidAssetspendTime');
        }
        // parse inputs
        $resourcePath = "/share/v1/assets/{id_asset}/spend_time";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($time !== null) {
            $queryParams['time'] = $this->apiClient->getSerializer()->toQueryValue($time);
        }
        // query params
        if ($id_user !== null) {
            $queryParams['id_user'] = $this->apiClient->getSerializer()->toQueryValue($id_user);
        }
        // path params
        if ($id_asset !== null) {
            $resourcePath = str_replace(
                "{" . "id_asset" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_asset),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ShareAssetsViewSpentTimeL2Response',
                '/share/v1/assets/{id_asset}/spend_time'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ShareAssetsViewSpentTimeL2Response', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ShareAssetsViewSpentTimeL2Response', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetsSharev1assetsidAssetspendTime_0
     *
     * Spent time over the asset
     *
     * @param int $id_asset Asset id (required)
     * @param \Swagger\Client\Model\ShareAssetsSpentTimeSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ShareAssetsSpentTimeResponse
     */
    public function assetsSharev1assetsidAssetspendTime_0($id_asset, $body = null)
    {
        list($response) = $this->assetsSharev1assetsidAssetspendTime_0WithHttpInfo($id_asset, $body);
        return $response;
    }

    /**
     * Operation assetsSharev1assetsidAssetspendTime_0WithHttpInfo
     *
     * Spent time over the asset
     *
     * @param int $id_asset Asset id (required)
     * @param \Swagger\Client\Model\ShareAssetsSpentTimeSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ShareAssetsSpentTimeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsSharev1assetsidAssetspendTime_0WithHttpInfo($id_asset, $body = null)
    {
        // verify the required parameter 'id_asset' is set
        if ($id_asset === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_asset when calling assetsSharev1assetsidAssetspendTime_0');
        }
        // parse inputs
        $resourcePath = "/share/v1/assets/{id_asset}/spend_time";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id_asset !== null) {
            $resourcePath = str_replace(
                "{" . "id_asset" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_asset),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ShareAssetsSpentTimeResponse',
                '/share/v1/assets/{id_asset}/spend_time'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ShareAssetsSpentTimeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ShareAssetsSpentTimeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetsSharev1assetsidAssettags
     *
     * View Asset assigned tags
     *
     * @param int $id_asset ID of the asset (required)
     * @param string $sort_attr Sort by this field, default value - id. Options: id, name (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200, if value is -1 -&amp;gt; all items are displayed (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ShareAssetsViewTagsL2Response
     */
    public function assetsSharev1assetsidAssettags($id_asset, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $get_total_count = null)
    {
        list($response) = $this->assetsSharev1assetsidAssettagsWithHttpInfo($id_asset, $sort_attr, $sort_dir, $page, $page_size, $get_total_count);
        return $response;
    }

    /**
     * Operation assetsSharev1assetsidAssettagsWithHttpInfo
     *
     * View Asset assigned tags
     *
     * @param int $id_asset ID of the asset (required)
     * @param string $sort_attr Sort by this field, default value - id. Options: id, name (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200, if value is -1 -&amp;gt; all items are displayed (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ShareAssetsViewTagsL2Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsSharev1assetsidAssettagsWithHttpInfo($id_asset, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $get_total_count = null)
    {
        // verify the required parameter 'id_asset' is set
        if ($id_asset === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_asset when calling assetsSharev1assetsidAssettags');
        }
        // parse inputs
        $resourcePath = "/share/v1/assets/{id_asset}/tags";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // path params
        if ($id_asset !== null) {
            $resourcePath = str_replace(
                "{" . "id_asset" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_asset),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ShareAssetsViewTagsL2Response',
                '/share/v1/assets/{id_asset}/tags'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ShareAssetsViewTagsL2Response', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ShareAssetsViewTagsL2Response', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetsSharev1assetsidAssettags_0
     *
     * Assign tags to asset
     *
     * @param int $id_asset ID of asset to fetch (required)
     * @param \Swagger\Client\Model\ShareAssetsAssignTagsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ShareAssetsAssignTagsResponse
     */
    public function assetsSharev1assetsidAssettags_0($id_asset, $body = null)
    {
        list($response) = $this->assetsSharev1assetsidAssettags_0WithHttpInfo($id_asset, $body);
        return $response;
    }

    /**
     * Operation assetsSharev1assetsidAssettags_0WithHttpInfo
     *
     * Assign tags to asset
     *
     * @param int $id_asset ID of asset to fetch (required)
     * @param \Swagger\Client\Model\ShareAssetsAssignTagsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ShareAssetsAssignTagsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsSharev1assetsidAssettags_0WithHttpInfo($id_asset, $body = null)
    {
        // verify the required parameter 'id_asset' is set
        if ($id_asset === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_asset when calling assetsSharev1assetsidAssettags_0');
        }
        // parse inputs
        $resourcePath = "/share/v1/assets/{id_asset}/tags";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id_asset !== null) {
            $resourcePath = str_replace(
                "{" . "id_asset" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_asset),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ShareAssetsAssignTagsResponse',
                '/share/v1/assets/{id_asset}/tags'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ShareAssetsAssignTagsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ShareAssetsAssignTagsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetsSharev1assetsidAssettooltips
     *
     * View Asset assigned tooltips
     *
     * @param int $id_asset ID of the asset (required)
     * @param string $sort_attr Sort by this field, default value - id. Options: name, code, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200, if value is -1 -&amp;gt; all items are displayed (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ShareAssetsViewTooltipsL2Response
     */
    public function assetsSharev1assetsidAssettooltips($id_asset, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $get_total_count = null)
    {
        list($response) = $this->assetsSharev1assetsidAssettooltipsWithHttpInfo($id_asset, $sort_attr, $sort_dir, $page, $page_size, $get_total_count);
        return $response;
    }

    /**
     * Operation assetsSharev1assetsidAssettooltipsWithHttpInfo
     *
     * View Asset assigned tooltips
     *
     * @param int $id_asset ID of the asset (required)
     * @param string $sort_attr Sort by this field, default value - id. Options: name, code, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200, if value is -1 -&amp;gt; all items are displayed (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ShareAssetsViewTooltipsL2Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsSharev1assetsidAssettooltipsWithHttpInfo($id_asset, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $get_total_count = null)
    {
        // verify the required parameter 'id_asset' is set
        if ($id_asset === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_asset when calling assetsSharev1assetsidAssettooltips');
        }
        // parse inputs
        $resourcePath = "/share/v1/assets/{id_asset}/tooltips";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // path params
        if ($id_asset !== null) {
            $resourcePath = str_replace(
                "{" . "id_asset" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_asset),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ShareAssetsViewTooltipsL2Response',
                '/share/v1/assets/{id_asset}/tooltips'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ShareAssetsViewTooltipsL2Response', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ShareAssetsViewTooltipsL2Response', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetsSharev1assetsidAssettrack
     *
     * Track asset as viewed
     *
     * @param int $id_asset Required ID of asset to fetch (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ShareAssetsUpdateTrackingResponse
     */
    public function assetsSharev1assetsidAssettrack($id_asset)
    {
        list($response) = $this->assetsSharev1assetsidAssettrackWithHttpInfo($id_asset);
        return $response;
    }

    /**
     * Operation assetsSharev1assetsidAssettrackWithHttpInfo
     *
     * Track asset as viewed
     *
     * @param int $id_asset Required ID of asset to fetch (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ShareAssetsUpdateTrackingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsSharev1assetsidAssettrackWithHttpInfo($id_asset)
    {
        // verify the required parameter 'id_asset' is set
        if ($id_asset === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_asset when calling assetsSharev1assetsidAssettrack');
        }
        // parse inputs
        $resourcePath = "/share/v1/assets/{id_asset}/track";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id_asset !== null) {
            $resourcePath = str_replace(
                "{" . "id_asset" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_asset),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ShareAssetsUpdateTrackingResponse',
                '/share/v1/assets/{id_asset}/track'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ShareAssetsUpdateTrackingResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ShareAssetsUpdateTrackingResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetsSharev1assetsidAssetuploadfinish
     *
     * Finish Upload Asset
     *
     * @param int $id_asset ID of the asset (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ShareAssetsFinishUploadResponse
     */
    public function assetsSharev1assetsidAssetuploadfinish($id_asset)
    {
        list($response) = $this->assetsSharev1assetsidAssetuploadfinishWithHttpInfo($id_asset);
        return $response;
    }

    /**
     * Operation assetsSharev1assetsidAssetuploadfinishWithHttpInfo
     *
     * Finish Upload Asset
     *
     * @param int $id_asset ID of the asset (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ShareAssetsFinishUploadResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsSharev1assetsidAssetuploadfinishWithHttpInfo($id_asset)
    {
        // verify the required parameter 'id_asset' is set
        if ($id_asset === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_asset when calling assetsSharev1assetsidAssetuploadfinish');
        }
        // parse inputs
        $resourcePath = "/share/v1/assets/{id_asset}/upload/finish";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id_asset !== null) {
            $resourcePath = str_replace(
                "{" . "id_asset" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_asset),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ShareAssetsFinishUploadResponse',
                '/share/v1/assets/{id_asset}/upload/finish'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ShareAssetsFinishUploadResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ShareAssetsFinishUploadResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetsSharev1assetsidAssetuploadsns
     *
     * Upload SNS Asset
     *
     * @param int $id_asset ID of the asset (required)
     * @param \Swagger\Client\Model\ShareAssetsUploadSnsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ShareAssetsUploadSnsResponse
     */
    public function assetsSharev1assetsidAssetuploadsns($id_asset, $body = null)
    {
        list($response) = $this->assetsSharev1assetsidAssetuploadsnsWithHttpInfo($id_asset, $body);
        return $response;
    }

    /**
     * Operation assetsSharev1assetsidAssetuploadsnsWithHttpInfo
     *
     * Upload SNS Asset
     *
     * @param int $id_asset ID of the asset (required)
     * @param \Swagger\Client\Model\ShareAssetsUploadSnsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ShareAssetsUploadSnsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsSharev1assetsidAssetuploadsnsWithHttpInfo($id_asset, $body = null)
    {
        // verify the required parameter 'id_asset' is set
        if ($id_asset === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_asset when calling assetsSharev1assetsidAssetuploadsns');
        }
        // parse inputs
        $resourcePath = "/share/v1/assets/{id_asset}/upload/sns";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id_asset !== null) {
            $resourcePath = str_replace(
                "{" . "id_asset" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_asset),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ShareAssetsUploadSnsResponse',
                '/share/v1/assets/{id_asset}/upload/sns'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ShareAssetsUploadSnsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ShareAssetsUploadSnsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetsSharev1assetsidAssetuploadstart
     *
     * Start Upload Asset
     *
     * @param int $id_asset ID of the asset (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ShareAssetsStartUploadResponse
     */
    public function assetsSharev1assetsidAssetuploadstart($id_asset)
    {
        list($response) = $this->assetsSharev1assetsidAssetuploadstartWithHttpInfo($id_asset);
        return $response;
    }

    /**
     * Operation assetsSharev1assetsidAssetuploadstartWithHttpInfo
     *
     * Start Upload Asset
     *
     * @param int $id_asset ID of the asset (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ShareAssetsStartUploadResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsSharev1assetsidAssetuploadstartWithHttpInfo($id_asset)
    {
        // verify the required parameter 'id_asset' is set
        if ($id_asset === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_asset when calling assetsSharev1assetsidAssetuploadstart');
        }
        // parse inputs
        $resourcePath = "/share/v1/assets/{id_asset}/upload/start";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id_asset !== null) {
            $resourcePath = str_replace(
                "{" . "id_asset" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_asset),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ShareAssetsStartUploadResponse',
                '/share/v1/assets/{id_asset}/upload/start'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ShareAssetsStartUploadResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ShareAssetsStartUploadResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetsSharev1assetsupload
     *
     * Upload asset
     *
     * @param \Swagger\Client\Model\ShareAssetsUploadSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ShareAssetsUploadResponse
     */
    public function assetsSharev1assetsupload($body = null)
    {
        list($response) = $this->assetsSharev1assetsuploadWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation assetsSharev1assetsuploadWithHttpInfo
     *
     * Upload asset
     *
     * @param \Swagger\Client\Model\ShareAssetsUploadSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ShareAssetsUploadResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsSharev1assetsuploadWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/share/v1/assets/upload";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ShareAssetsUploadResponse',
                '/share/v1/assets/upload'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ShareAssetsUploadResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ShareAssetsUploadResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetsSkillv1assetsassetIdprograms
     *
     * Assigns a Coach&Share Asset to a Program
     *
     * @param int $asset_id asset id (required)
     * @param \Swagger\Client\Model\SkillAssetsAssignProgramsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillAssetsAssignProgramsResponse
     */
    public function assetsSkillv1assetsassetIdprograms($asset_id, $body = null)
    {
        list($response) = $this->assetsSkillv1assetsassetIdprogramsWithHttpInfo($asset_id, $body);
        return $response;
    }

    /**
     * Operation assetsSkillv1assetsassetIdprogramsWithHttpInfo
     *
     * Assigns a Coach&Share Asset to a Program
     *
     * @param int $asset_id asset id (required)
     * @param \Swagger\Client\Model\SkillAssetsAssignProgramsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillAssetsAssignProgramsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsSkillv1assetsassetIdprogramsWithHttpInfo($asset_id, $body = null)
    {
        // verify the required parameter 'asset_id' is set
        if ($asset_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $asset_id when calling assetsSkillv1assetsassetIdprograms');
        }
        // parse inputs
        $resourcePath = "/skill/v1/assets/{asset_id}/programs";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($asset_id !== null) {
            $resourcePath = str_replace(
                "{" . "asset_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($asset_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillAssetsAssignProgramsResponse',
                '/skill/v1/assets/{asset_id}/programs'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillAssetsAssignProgramsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillAssetsAssignProgramsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetsSkillv1assetsassetIdprograms_0
     *
     * Unassigns an Asset from a Program
     *
     * @param int $asset_id asset id (required)
     * @param \Swagger\Client\Model\SkillAssetsUnassignProgramsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillAssetsUnassignProgramsResponse
     */
    public function assetsSkillv1assetsassetIdprograms_0($asset_id, $body = null)
    {
        list($response) = $this->assetsSkillv1assetsassetIdprograms_0WithHttpInfo($asset_id, $body);
        return $response;
    }

    /**
     * Operation assetsSkillv1assetsassetIdprograms_0WithHttpInfo
     *
     * Unassigns an Asset from a Program
     *
     * @param int $asset_id asset id (required)
     * @param \Swagger\Client\Model\SkillAssetsUnassignProgramsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillAssetsUnassignProgramsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsSkillv1assetsassetIdprograms_0WithHttpInfo($asset_id, $body = null)
    {
        // verify the required parameter 'asset_id' is set
        if ($asset_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $asset_id when calling assetsSkillv1assetsassetIdprograms_0');
        }
        // parse inputs
        $resourcePath = "/skill/v1/assets/{asset_id}/programs";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($asset_id !== null) {
            $resourcePath = str_replace(
                "{" . "asset_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($asset_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillAssetsUnassignProgramsResponse',
                '/skill/v1/assets/{asset_id}/programs'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillAssetsUnassignProgramsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillAssetsUnassignProgramsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetsSkillv1assetsassetIdskills
     *
     * Retrieves the list of Skills, that are assigned to a Coach&Share Asset
     *
     * @param int $asset_id Asset id (required)
     * @param string $sort_attr Sort by this field, default value - title. Options: title, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillAssetsListSkillsResponse
     */
    public function assetsSkillv1assetsassetIdskills($asset_id, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null)
    {
        list($response) = $this->assetsSkillv1assetsassetIdskillsWithHttpInfo($asset_id, $sort_attr, $sort_dir, $page, $page_size, $lang, $get_total_count);
        return $response;
    }

    /**
     * Operation assetsSkillv1assetsassetIdskillsWithHttpInfo
     *
     * Retrieves the list of Skills, that are assigned to a Coach&Share Asset
     *
     * @param int $asset_id Asset id (required)
     * @param string $sort_attr Sort by this field, default value - title. Options: title, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillAssetsListSkillsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsSkillv1assetsassetIdskillsWithHttpInfo($asset_id, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null)
    {
        // verify the required parameter 'asset_id' is set
        if ($asset_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $asset_id when calling assetsSkillv1assetsassetIdskills');
        }
        // parse inputs
        $resourcePath = "/skill/v1/assets/{asset_id}/skills";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // path params
        if ($asset_id !== null) {
            $resourcePath = str_replace(
                "{" . "asset_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($asset_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillAssetsListSkillsResponse',
                '/skill/v1/assets/{asset_id}/skills'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillAssetsListSkillsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillAssetsListSkillsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetsSkillv1assetsassetIdskills_0
     *
     * Assigns Skill(s) to a Coach&Share Asset
     *
     * @param int $asset_id Asset id (required)
     * @param \Swagger\Client\Model\SkillAssetsCreateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillAssetsCreateResponse
     */
    public function assetsSkillv1assetsassetIdskills_0($asset_id, $body = null)
    {
        list($response) = $this->assetsSkillv1assetsassetIdskills_0WithHttpInfo($asset_id, $body);
        return $response;
    }

    /**
     * Operation assetsSkillv1assetsassetIdskills_0WithHttpInfo
     *
     * Assigns Skill(s) to a Coach&Share Asset
     *
     * @param int $asset_id Asset id (required)
     * @param \Swagger\Client\Model\SkillAssetsCreateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillAssetsCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsSkillv1assetsassetIdskills_0WithHttpInfo($asset_id, $body = null)
    {
        // verify the required parameter 'asset_id' is set
        if ($asset_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $asset_id when calling assetsSkillv1assetsassetIdskills_0');
        }
        // parse inputs
        $resourcePath = "/skill/v1/assets/{asset_id}/skills";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($asset_id !== null) {
            $resourcePath = str_replace(
                "{" . "asset_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($asset_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillAssetsCreateResponse',
                '/skill/v1/assets/{asset_id}/skills'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillAssetsCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillAssetsCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation assetsSkillv1assetsassetIdskills_1
     *
     * Unassigns an existing skill(s) from a Coach&Share asset
     *
     * @param int $asset_id ID of an asset to delete (required)
     * @param \Swagger\Client\Model\SkillAssetsDeleteSkillsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillAssetsDeleteSkillsResponse
     */
    public function assetsSkillv1assetsassetIdskills_1($asset_id, $body = null)
    {
        list($response) = $this->assetsSkillv1assetsassetIdskills_1WithHttpInfo($asset_id, $body);
        return $response;
    }

    /**
     * Operation assetsSkillv1assetsassetIdskills_1WithHttpInfo
     *
     * Unassigns an existing skill(s) from a Coach&Share asset
     *
     * @param int $asset_id ID of an asset to delete (required)
     * @param \Swagger\Client\Model\SkillAssetsDeleteSkillsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillAssetsDeleteSkillsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsSkillv1assetsassetIdskills_1WithHttpInfo($asset_id, $body = null)
    {
        // verify the required parameter 'asset_id' is set
        if ($asset_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $asset_id when calling assetsSkillv1assetsassetIdskills_1');
        }
        // parse inputs
        $resourcePath = "/skill/v1/assets/{asset_id}/skills";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($asset_id !== null) {
            $resourcePath = str_replace(
                "{" . "asset_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($asset_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillAssetsDeleteSkillsResponse',
                '/skill/v1/assets/{asset_id}/skills'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillAssetsDeleteSkillsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillAssetsDeleteSkillsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
