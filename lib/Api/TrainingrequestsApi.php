<?php
/**
 * TrainingrequestsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * TrainingrequestsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TrainingrequestsApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return TrainingrequestsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation trainingrequestsSkillv1requests
     *
     * Returns a summary List the Training Requests filtered by input parameters
     *
     * @param int[] $employee_id Employees IDs - It&#39;s required to provide employee_id OR branch_id OR role_id (required)
     * @param int $branch_id ID branch - It&#39;s required to provide employee_id OR branch_id OR role_id (required)
     * @param int[] $role_id Role ID - It&#39;s required to provide employee_id OR branch_id OR role_id (required)
     * @param string $request_type M|E|H Manager, Employee or HR request (can be multiple, default &#x3D; search for all) (optional)
     * @param int $skill_id Skill ID - Used for filter training requests information (optional)
     * @param int $threshold_date Return requests only from last N days (optional)
     * @param string $sort_attr Sort by this field, default value - title. Options: title, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillTrainingrequestsListByResponse
     */
    public function trainingrequestsSkillv1requests($employee_id, $branch_id, $role_id, $request_type = null, $skill_id = null, $threshold_date = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null)
    {
        list($response) = $this->trainingrequestsSkillv1requestsWithHttpInfo($employee_id, $branch_id, $role_id, $request_type, $skill_id, $threshold_date, $sort_attr, $sort_dir, $page, $page_size, $lang, $get_total_count);
        return $response;
    }

    /**
     * Operation trainingrequestsSkillv1requestsWithHttpInfo
     *
     * Returns a summary List the Training Requests filtered by input parameters
     *
     * @param int[] $employee_id Employees IDs - It&#39;s required to provide employee_id OR branch_id OR role_id (required)
     * @param int $branch_id ID branch - It&#39;s required to provide employee_id OR branch_id OR role_id (required)
     * @param int[] $role_id Role ID - It&#39;s required to provide employee_id OR branch_id OR role_id (required)
     * @param string $request_type M|E|H Manager, Employee or HR request (can be multiple, default &#x3D; search for all) (optional)
     * @param int $skill_id Skill ID - Used for filter training requests information (optional)
     * @param int $threshold_date Return requests only from last N days (optional)
     * @param string $sort_attr Sort by this field, default value - title. Options: title, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillTrainingrequestsListByResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function trainingrequestsSkillv1requestsWithHttpInfo($employee_id, $branch_id, $role_id, $request_type = null, $skill_id = null, $threshold_date = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null)
    {
        // verify the required parameter 'employee_id' is set
        if ($employee_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $employee_id when calling trainingrequestsSkillv1requests');
        }
        // verify the required parameter 'branch_id' is set
        if ($branch_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $branch_id when calling trainingrequestsSkillv1requests');
        }
        // verify the required parameter 'role_id' is set
        if ($role_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $role_id when calling trainingrequestsSkillv1requests');
        }
        // parse inputs
        $resourcePath = "/skill/v1/requests";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if (is_array($employee_id)) {
            $employee_id = $this->apiClient->getSerializer()->serializeCollection($employee_id, 'brackets', true);
        }
        if ($employee_id !== null) {
            $queryParams['employee_id'] = $this->apiClient->getSerializer()->toQueryValue($employee_id);
        }
        // query params
        if ($branch_id !== null) {
            $queryParams['branch_id'] = $this->apiClient->getSerializer()->toQueryValue($branch_id);
        }
        // query params
        if (is_array($role_id)) {
            $role_id = $this->apiClient->getSerializer()->serializeCollection($role_id, 'brackets', true);
        }
        if ($role_id !== null) {
            $queryParams['role_id'] = $this->apiClient->getSerializer()->toQueryValue($role_id);
        }
        // query params
        if ($request_type !== null) {
            $queryParams['request_type'] = $this->apiClient->getSerializer()->toQueryValue($request_type);
        }
        // query params
        if ($skill_id !== null) {
            $queryParams['skill_id'] = $this->apiClient->getSerializer()->toQueryValue($skill_id);
        }
        // query params
        if ($threshold_date !== null) {
            $queryParams['threshold_date'] = $this->apiClient->getSerializer()->toQueryValue($threshold_date);
        }
        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillTrainingrequestsListByResponse',
                '/skill/v1/requests'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillTrainingrequestsListByResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillTrainingrequestsListByResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation trainingrequestsSkillv1requests_0
     *
     * Creates a new Training Request for an User
     *
     * @param \Swagger\Client\Model\SkillTrainingrequestsCreateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillTrainingrequestsCreateResponse
     */
    public function trainingrequestsSkillv1requests_0($body = null)
    {
        list($response) = $this->trainingrequestsSkillv1requests_0WithHttpInfo($body);
        return $response;
    }

    /**
     * Operation trainingrequestsSkillv1requests_0WithHttpInfo
     *
     * Creates a new Training Request for an User
     *
     * @param \Swagger\Client\Model\SkillTrainingrequestsCreateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillTrainingrequestsCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function trainingrequestsSkillv1requests_0WithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/skill/v1/requests";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillTrainingrequestsCreateResponse',
                '/skill/v1/requests'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillTrainingrequestsCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillTrainingrequestsCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation trainingrequestsSkillv1requestsskillId
     *
     * Returns a detailed list of Training Requests filtered by input parameters
     *
     * @param int $skill_id Skill ID - Used for filter training requests information (required)
     * @param int[] $employee_id Employees IDs - It&#39;s required to provide employee_id OR branch_id OR role_id (required)
     * @param int $branch_id ID branch - It&#39;s required to provide employee_id OR branch_id OR role_id (required)
     * @param int[] $role_id Role ID - It&#39;s required to provide employee_id OR branch_id OR role_id (required)
     * @param string $request_type M|E|H Manager, Employee or HR request (can be multiple, default &#x3D; search for all) (optional)
     * @param int $threshold_date Return requests only from last N days (optional)
     * @param string $sort_attr Sort by this field, default value - title. Options: title, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillTrainingrequestsListByDetailResponse
     */
    public function trainingrequestsSkillv1requestsskillId($skill_id, $employee_id, $branch_id, $role_id, $request_type = null, $threshold_date = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null)
    {
        list($response) = $this->trainingrequestsSkillv1requestsskillIdWithHttpInfo($skill_id, $employee_id, $branch_id, $role_id, $request_type, $threshold_date, $sort_attr, $sort_dir, $page, $page_size, $lang, $get_total_count);
        return $response;
    }

    /**
     * Operation trainingrequestsSkillv1requestsskillIdWithHttpInfo
     *
     * Returns a detailed list of Training Requests filtered by input parameters
     *
     * @param int $skill_id Skill ID - Used for filter training requests information (required)
     * @param int[] $employee_id Employees IDs - It&#39;s required to provide employee_id OR branch_id OR role_id (required)
     * @param int $branch_id ID branch - It&#39;s required to provide employee_id OR branch_id OR role_id (required)
     * @param int[] $role_id Role ID - It&#39;s required to provide employee_id OR branch_id OR role_id (required)
     * @param string $request_type M|E|H Manager, Employee or HR request (can be multiple, default &#x3D; search for all) (optional)
     * @param int $threshold_date Return requests only from last N days (optional)
     * @param string $sort_attr Sort by this field, default value - title. Options: title, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillTrainingrequestsListByDetailResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function trainingrequestsSkillv1requestsskillIdWithHttpInfo($skill_id, $employee_id, $branch_id, $role_id, $request_type = null, $threshold_date = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null)
    {
        // verify the required parameter 'skill_id' is set
        if ($skill_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $skill_id when calling trainingrequestsSkillv1requestsskillId');
        }
        // verify the required parameter 'employee_id' is set
        if ($employee_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $employee_id when calling trainingrequestsSkillv1requestsskillId');
        }
        // verify the required parameter 'branch_id' is set
        if ($branch_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $branch_id when calling trainingrequestsSkillv1requestsskillId');
        }
        // verify the required parameter 'role_id' is set
        if ($role_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $role_id when calling trainingrequestsSkillv1requestsskillId');
        }
        // parse inputs
        $resourcePath = "/skill/v1/requests/{skill_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if (is_array($employee_id)) {
            $employee_id = $this->apiClient->getSerializer()->serializeCollection($employee_id, 'brackets', true);
        }
        if ($employee_id !== null) {
            $queryParams['employee_id'] = $this->apiClient->getSerializer()->toQueryValue($employee_id);
        }
        // query params
        if ($branch_id !== null) {
            $queryParams['branch_id'] = $this->apiClient->getSerializer()->toQueryValue($branch_id);
        }
        // query params
        if (is_array($role_id)) {
            $role_id = $this->apiClient->getSerializer()->serializeCollection($role_id, 'brackets', true);
        }
        if ($role_id !== null) {
            $queryParams['role_id'] = $this->apiClient->getSerializer()->toQueryValue($role_id);
        }
        // query params
        if ($request_type !== null) {
            $queryParams['request_type'] = $this->apiClient->getSerializer()->toQueryValue($request_type);
        }
        // query params
        if ($threshold_date !== null) {
            $queryParams['threshold_date'] = $this->apiClient->getSerializer()->toQueryValue($threshold_date);
        }
        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // path params
        if ($skill_id !== null) {
            $resourcePath = str_replace(
                "{" . "skill_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($skill_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillTrainingrequestsListByDetailResponse',
                '/skill/v1/requests/{skill_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillTrainingrequestsListByDetailResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillTrainingrequestsListByDetailResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
