<?php
/**
 * OrgchartApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * OrgchartApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrgchartApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return OrgchartApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation orgchartManagev1orgchart
     *
     * List of branches of given or root level
     *
     * @param int $node_id ID ot the idOrg of the branch (optional)
     * @param string $lang Language for translating name of branches(browser code) (optional)
     * @param string $search_text Search text in the branch title. (optional)
     * @param string[] $preselected Array of preselected nodes (optional)
     * @param bool $get_actions Identify if the actions should be returned in the response (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageOrgchartIndexResponse
     */
    public function orgchartManagev1orgchart($node_id = null, $lang = null, $search_text = null, $preselected = null, $get_actions = null)
    {
        list($response) = $this->orgchartManagev1orgchartWithHttpInfo($node_id, $lang, $search_text, $preselected, $get_actions);
        return $response;
    }

    /**
     * Operation orgchartManagev1orgchartWithHttpInfo
     *
     * List of branches of given or root level
     *
     * @param int $node_id ID ot the idOrg of the branch (optional)
     * @param string $lang Language for translating name of branches(browser code) (optional)
     * @param string $search_text Search text in the branch title. (optional)
     * @param string[] $preselected Array of preselected nodes (optional)
     * @param bool $get_actions Identify if the actions should be returned in the response (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageOrgchartIndexResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function orgchartManagev1orgchartWithHttpInfo($node_id = null, $lang = null, $search_text = null, $preselected = null, $get_actions = null)
    {
        // parse inputs
        $resourcePath = "/manage/v1/orgchart";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($node_id !== null) {
            $queryParams['node_id'] = $this->apiClient->getSerializer()->toQueryValue($node_id);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($search_text !== null) {
            $queryParams['search_text'] = $this->apiClient->getSerializer()->toQueryValue($search_text);
        }
        // query params
        if (is_array($preselected)) {
            $preselected = $this->apiClient->getSerializer()->serializeCollection($preselected, 'csv', true);
        }
        if ($preselected !== null) {
            $queryParams['preselected'] = $this->apiClient->getSerializer()->toQueryValue($preselected);
        }
        // query params
        if ($get_actions !== null) {
            $queryParams['get_actions'] = $this->apiClient->getSerializer()->toQueryValue($get_actions);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageOrgchartIndexResponse',
                '/manage/v1/orgchart'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageOrgchartIndexResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageOrgchartIndexResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation orgchartManagev1orgchart_0
     *
     * Create a org chart node.
     *
     * @param \Swagger\Client\Model\ManageOrgchartCreateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageOrgchartCreateResponse
     */
    public function orgchartManagev1orgchart_0($body = null)
    {
        list($response) = $this->orgchartManagev1orgchart_0WithHttpInfo($body);
        return $response;
    }

    /**
     * Operation orgchartManagev1orgchart_0WithHttpInfo
     *
     * Create a org chart node.
     *
     * @param \Swagger\Client\Model\ManageOrgchartCreateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageOrgchartCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function orgchartManagev1orgchart_0WithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/manage/v1/orgchart";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageOrgchartCreateResponse',
                '/manage/v1/orgchart'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageOrgchartCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageOrgchartCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation orgchartManagev1orgchartassignUsers
     *
     * Assigns a collection of user ids to the specified node.
     *
     * @param \Swagger\Client\Model\ManageOrgchartAssignUsersSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageOrgchartAssignUsersResponse
     */
    public function orgchartManagev1orgchartassignUsers($body = null)
    {
        list($response) = $this->orgchartManagev1orgchartassignUsersWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation orgchartManagev1orgchartassignUsersWithHttpInfo
     *
     * Assigns a collection of user ids to the specified node.
     *
     * @param \Swagger\Client\Model\ManageOrgchartAssignUsersSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageOrgchartAssignUsersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function orgchartManagev1orgchartassignUsersWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/manage/v1/orgchart/assign_users";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageOrgchartAssignUsersResponse',
                '/manage/v1/orgchart/assign_users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageOrgchartAssignUsersResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageOrgchartAssignUsersResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation orgchartManagev1orgchartbranchId
     *
     * Update selected branch.
     *
     * @param int $branch_id Id of selected branch. (required)
     * @param \Swagger\Client\Model\ManageOrgchartUpdateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageOrgchartUpdateResponse
     */
    public function orgchartManagev1orgchartbranchId($branch_id, $body = null)
    {
        list($response) = $this->orgchartManagev1orgchartbranchIdWithHttpInfo($branch_id, $body);
        return $response;
    }

    /**
     * Operation orgchartManagev1orgchartbranchIdWithHttpInfo
     *
     * Update selected branch.
     *
     * @param int $branch_id Id of selected branch. (required)
     * @param \Swagger\Client\Model\ManageOrgchartUpdateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageOrgchartUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function orgchartManagev1orgchartbranchIdWithHttpInfo($branch_id, $body = null)
    {
        // verify the required parameter 'branch_id' is set
        if ($branch_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $branch_id when calling orgchartManagev1orgchartbranchId');
        }
        // parse inputs
        $resourcePath = "/manage/v1/orgchart/{branch_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($branch_id !== null) {
            $resourcePath = str_replace(
                "{" . "branch_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($branch_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageOrgchartUpdateResponse',
                '/manage/v1/orgchart/{branch_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageOrgchartUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageOrgchartUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation orgchartManagev1orgchartbranchId_0
     *
     * Get details of a selected branch.
     *
     * @param int $branch_id ID of the branch (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageOrgchartViewResponse
     */
    public function orgchartManagev1orgchartbranchId_0($branch_id)
    {
        list($response) = $this->orgchartManagev1orgchartbranchId_0WithHttpInfo($branch_id);
        return $response;
    }

    /**
     * Operation orgchartManagev1orgchartbranchId_0WithHttpInfo
     *
     * Get details of a selected branch.
     *
     * @param int $branch_id ID of the branch (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageOrgchartViewResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function orgchartManagev1orgchartbranchId_0WithHttpInfo($branch_id)
    {
        // verify the required parameter 'branch_id' is set
        if ($branch_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $branch_id when calling orgchartManagev1orgchartbranchId_0');
        }
        // parse inputs
        $resourcePath = "/manage/v1/orgchart/{branch_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($branch_id !== null) {
            $resourcePath = str_replace(
                "{" . "branch_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($branch_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageOrgchartViewResponse',
                '/manage/v1/orgchart/{branch_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageOrgchartViewResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageOrgchartViewResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation orgchartManagev1orgchartbranchIdfieldVisibility
     *
     * Assign user fields to branch/group
     *
     * @param int $branch_id ID of the branch or ID of the group (required)
     * @param \Swagger\Client\Model\ManageOrgchartAssignFieldSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageOrgchartAssignFieldResponse
     */
    public function orgchartManagev1orgchartbranchIdfieldVisibility($branch_id, $body = null)
    {
        list($response) = $this->orgchartManagev1orgchartbranchIdfieldVisibilityWithHttpInfo($branch_id, $body);
        return $response;
    }

    /**
     * Operation orgchartManagev1orgchartbranchIdfieldVisibilityWithHttpInfo
     *
     * Assign user fields to branch/group
     *
     * @param int $branch_id ID of the branch or ID of the group (required)
     * @param \Swagger\Client\Model\ManageOrgchartAssignFieldSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageOrgchartAssignFieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function orgchartManagev1orgchartbranchIdfieldVisibilityWithHttpInfo($branch_id, $body = null)
    {
        // verify the required parameter 'branch_id' is set
        if ($branch_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $branch_id when calling orgchartManagev1orgchartbranchIdfieldVisibility');
        }
        // parse inputs
        $resourcePath = "/manage/v1/orgchart/{branch_id}/field_visibility";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($branch_id !== null) {
            $resourcePath = str_replace(
                "{" . "branch_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($branch_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageOrgchartAssignFieldResponse',
                '/manage/v1/orgchart/{branch_id}/field_visibility'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageOrgchartAssignFieldResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageOrgchartAssignFieldResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation orgchartManagev1orgchartbranchIdusers
     *
     * Retrieve information about a branch's users.
     *
     * @param int $branch_id ID of the branch (required)
     * @param int $only_first_level If this parameter is not provided then api will get also users in child branches (optional)
     * @param string $sort_attr Sort by this field, default value - first_name. Options: username, first_name, status, level, email, last_access_date, expiration_date, language, email_validation_status (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageOrgchartGetUsersInBranchResponse
     */
    public function orgchartManagev1orgchartbranchIdusers($branch_id, $only_first_level = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $get_total_count = null)
    {
        list($response) = $this->orgchartManagev1orgchartbranchIdusersWithHttpInfo($branch_id, $only_first_level, $sort_attr, $sort_dir, $page, $page_size, $get_total_count);
        return $response;
    }

    /**
     * Operation orgchartManagev1orgchartbranchIdusersWithHttpInfo
     *
     * Retrieve information about a branch's users.
     *
     * @param int $branch_id ID of the branch (required)
     * @param int $only_first_level If this parameter is not provided then api will get also users in child branches (optional)
     * @param string $sort_attr Sort by this field, default value - first_name. Options: username, first_name, status, level, email, last_access_date, expiration_date, language, email_validation_status (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageOrgchartGetUsersInBranchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function orgchartManagev1orgchartbranchIdusersWithHttpInfo($branch_id, $only_first_level = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $get_total_count = null)
    {
        // verify the required parameter 'branch_id' is set
        if ($branch_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $branch_id when calling orgchartManagev1orgchartbranchIdusers');
        }
        // parse inputs
        $resourcePath = "/manage/v1/orgchart/{branch_id}/users";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($only_first_level !== null) {
            $queryParams['only_first_level'] = $this->apiClient->getSerializer()->toQueryValue($only_first_level);
        }
        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // path params
        if ($branch_id !== null) {
            $resourcePath = str_replace(
                "{" . "branch_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($branch_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageOrgchartGetUsersInBranchResponse',
                '/manage/v1/orgchart/{branch_id}/users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageOrgchartGetUsersInBranchResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageOrgchartGetUsersInBranchResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation orgchartManagev1orgchartid
     *
     * Deletes the branch.
     *
     * @param int $id ID of the branch to delete (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageOrgchartDeleteResponse
     */
    public function orgchartManagev1orgchartid($id)
    {
        list($response) = $this->orgchartManagev1orgchartidWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation orgchartManagev1orgchartidWithHttpInfo
     *
     * Deletes the branch.
     *
     * @param int $id ID of the branch to delete (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageOrgchartDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function orgchartManagev1orgchartidWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling orgchartManagev1orgchartid');
        }
        // parse inputs
        $resourcePath = "/manage/v1/orgchart/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageOrgchartDeleteResponse',
                '/manage/v1/orgchart/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageOrgchartDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageOrgchartDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation orgchartManagev1orgchartidmove
     *
     * Move and org chart under a new parent node.
     *
     * @param int $id Id of selected branch. (required)
     * @param \Swagger\Client\Model\ManageOrgchartMoveSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageOrgchartMoveResponse
     */
    public function orgchartManagev1orgchartidmove($id, $body = null)
    {
        list($response) = $this->orgchartManagev1orgchartidmoveWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation orgchartManagev1orgchartidmoveWithHttpInfo
     *
     * Move and org chart under a new parent node.
     *
     * @param int $id Id of selected branch. (required)
     * @param \Swagger\Client\Model\ManageOrgchartMoveSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageOrgchartMoveResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function orgchartManagev1orgchartidmoveWithHttpInfo($id, $body = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling orgchartManagev1orgchartidmove');
        }
        // parse inputs
        $resourcePath = "/manage/v1/orgchart/{id}/move";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageOrgchartMoveResponse',
                '/manage/v1/orgchart/{id}/move'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageOrgchartMoveResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageOrgchartMoveResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
