<?php
/**
 * JobApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * JobApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class JobApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return JobApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation jobManagev1job
     *
     * Returns a paginated array of job descriptors matching the specified filters.
     *
     * @param int $id_author A user ID used to filter returned job records. If not provided, the API will only return jobs belonging to the logged in user. (optional)
     * @param string $status A status identifier user to filter jobs. Possible values: &amp;quot;queued&amp;quot;, &amp;quot;running&amp;quot;, &amp;quot;aborted&amp;quot;, &amp;quot;completed&amp;quot;. (optional)
     * @param int $page Determines the page number [job_descriptor pagination] and limits the amount of results to that of the corresponding page. (optional)
     * @param int $page_size Maximum number of results per page, default will be the system setting for elements per page (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageJobViewJobsResponse
     */
    public function jobManagev1job($id_author = null, $status = null, $page = null, $page_size = null)
    {
        list($response) = $this->jobManagev1jobWithHttpInfo($id_author, $status, $page, $page_size);
        return $response;
    }

    /**
     * Operation jobManagev1jobWithHttpInfo
     *
     * Returns a paginated array of job descriptors matching the specified filters.
     *
     * @param int $id_author A user ID used to filter returned job records. If not provided, the API will only return jobs belonging to the logged in user. (optional)
     * @param string $status A status identifier user to filter jobs. Possible values: &amp;quot;queued&amp;quot;, &amp;quot;running&amp;quot;, &amp;quot;aborted&amp;quot;, &amp;quot;completed&amp;quot;. (optional)
     * @param int $page Determines the page number [job_descriptor pagination] and limits the amount of results to that of the corresponding page. (optional)
     * @param int $page_size Maximum number of results per page, default will be the system setting for elements per page (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageJobViewJobsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function jobManagev1jobWithHttpInfo($id_author = null, $status = null, $page = null, $page_size = null)
    {
        // parse inputs
        $resourcePath = "/manage/v1/job";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($id_author !== null) {
            $queryParams['id_author'] = $this->apiClient->getSerializer()->toQueryValue($id_author);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageJobViewJobsResponse',
                '/manage/v1/job'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageJobViewJobsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageJobViewJobsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation jobManagev1job_0
     *
     * Pushes a new background job for immediate handling and execution.
     *
     * @param \Swagger\Client\Model\ManageJobCreateJobSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageJobCreateJobResponse
     */
    public function jobManagev1job_0($body = null)
    {
        list($response) = $this->jobManagev1job_0WithHttpInfo($body);
        return $response;
    }

    /**
     * Operation jobManagev1job_0WithHttpInfo
     *
     * Pushes a new background job for immediate handling and execution.
     *
     * @param \Swagger\Client\Model\ManageJobCreateJobSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageJobCreateJobResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function jobManagev1job_0WithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/manage/v1/job";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageJobCreateJobResponse',
                '/manage/v1/job'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageJobCreateJobResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageJobCreateJobResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation jobManagev1jobhash
     *
     * Returns the descriptor of the requested job.
     *
     * @param string $hash Hash of the background job. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageJobViewJobResponse
     */
    public function jobManagev1jobhash($hash)
    {
        list($response) = $this->jobManagev1jobhashWithHttpInfo($hash);
        return $response;
    }

    /**
     * Operation jobManagev1jobhashWithHttpInfo
     *
     * Returns the descriptor of the requested job.
     *
     * @param string $hash Hash of the background job. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageJobViewJobResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function jobManagev1jobhashWithHttpInfo($hash)
    {
        // verify the required parameter 'hash' is set
        if ($hash === null) {
            throw new \InvalidArgumentException('Missing the required parameter $hash when calling jobManagev1jobhash');
        }
        // parse inputs
        $resourcePath = "/manage/v1/job/{hash}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($hash !== null) {
            $resourcePath = str_replace(
                "{" . "hash" . "}",
                $this->apiClient->getSerializer()->toPathValue($hash),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageJobViewJobResponse',
                '/manage/v1/job/{hash}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageJobViewJobResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageJobViewJobResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation jobManagev1jobhash_0
     *
     * Updates a subset of information of a given job.
     *
     * @param string $hash Hash of the background job. (required)
     * @param \Swagger\Client\Model\ManageJobUpdateJobSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageJobUpdateJobResponse
     */
    public function jobManagev1jobhash_0($hash, $body = null)
    {
        list($response) = $this->jobManagev1jobhash_0WithHttpInfo($hash, $body);
        return $response;
    }

    /**
     * Operation jobManagev1jobhash_0WithHttpInfo
     *
     * Updates a subset of information of a given job.
     *
     * @param string $hash Hash of the background job. (required)
     * @param \Swagger\Client\Model\ManageJobUpdateJobSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageJobUpdateJobResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function jobManagev1jobhash_0WithHttpInfo($hash, $body = null)
    {
        // verify the required parameter 'hash' is set
        if ($hash === null) {
            throw new \InvalidArgumentException('Missing the required parameter $hash when calling jobManagev1jobhash_0');
        }
        // parse inputs
        $resourcePath = "/manage/v1/job/{hash}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($hash !== null) {
            $resourcePath = str_replace(
                "{" . "hash" . "}",
                $this->apiClient->getSerializer()->toPathValue($hash),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageJobUpdateJobResponse',
                '/manage/v1/job/{hash}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageJobUpdateJobResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageJobUpdateJobResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation jobManagev1jobhash_1
     *
     * Deletes the passed job. This operation is only possible if the job is in the \"aborted\" or \"completed\" state.
     *
     * @param string $hash Hash of the background job. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageJobDeleteJobResponse
     */
    public function jobManagev1jobhash_1($hash)
    {
        list($response) = $this->jobManagev1jobhash_1WithHttpInfo($hash);
        return $response;
    }

    /**
     * Operation jobManagev1jobhash_1WithHttpInfo
     *
     * Deletes the passed job. This operation is only possible if the job is in the \"aborted\" or \"completed\" state.
     *
     * @param string $hash Hash of the background job. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageJobDeleteJobResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function jobManagev1jobhash_1WithHttpInfo($hash)
    {
        // verify the required parameter 'hash' is set
        if ($hash === null) {
            throw new \InvalidArgumentException('Missing the required parameter $hash when calling jobManagev1jobhash_1');
        }
        // parse inputs
        $resourcePath = "/manage/v1/job/{hash}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($hash !== null) {
            $resourcePath = str_replace(
                "{" . "hash" . "}",
                $this->apiClient->getSerializer()->toPathValue($hash),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageJobDeleteJobResponse',
                '/manage/v1/job/{hash}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageJobDeleteJobResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageJobDeleteJobResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
