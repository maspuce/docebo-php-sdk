<?php
/**
 * FilerepoApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * FilerepoApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FilerepoApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return FilerepoApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation filerepoLearnv1filerepocreateNewFolder
     *
     * Create New Folder API
     *
     * @param \Swagger\Client\Model\LearnFilerepoCreateNewFolderSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnFilerepoCreateNewFolderResponse
     */
    public function filerepoLearnv1filerepocreateNewFolder($body = null)
    {
        list($response) = $this->filerepoLearnv1filerepocreateNewFolderWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation filerepoLearnv1filerepocreateNewFolderWithHttpInfo
     *
     * Create New Folder API
     *
     * @param \Swagger\Client\Model\LearnFilerepoCreateNewFolderSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnFilerepoCreateNewFolderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function filerepoLearnv1filerepocreateNewFolderWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/learn/v1/filerepo/createNewFolder";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnFilerepoCreateNewFolderResponse',
                '/learn/v1/filerepo/createNewFolder'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnFilerepoCreateNewFolderResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnFilerepoCreateNewFolderResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation filerepoLearnv1filerepodownloadCourseFile
     *
     * Download Course action
     *
     * @param int $file_id The id of the file to be downloaded (required)
     * @param int $course_id The id of the Course (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnFilerepoDownloadCourseFileResponse
     */
    public function filerepoLearnv1filerepodownloadCourseFile($file_id, $course_id)
    {
        list($response) = $this->filerepoLearnv1filerepodownloadCourseFileWithHttpInfo($file_id, $course_id);
        return $response;
    }

    /**
     * Operation filerepoLearnv1filerepodownloadCourseFileWithHttpInfo
     *
     * Download Course action
     *
     * @param int $file_id The id of the file to be downloaded (required)
     * @param int $course_id The id of the Course (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnFilerepoDownloadCourseFileResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function filerepoLearnv1filerepodownloadCourseFileWithHttpInfo($file_id, $course_id)
    {
        // verify the required parameter 'file_id' is set
        if ($file_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file_id when calling filerepoLearnv1filerepodownloadCourseFile');
        }
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling filerepoLearnv1filerepodownloadCourseFile');
        }
        // parse inputs
        $resourcePath = "/learn/v1/filerepo/downloadCourseFile";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($file_id !== null) {
            $queryParams['file_id'] = $this->apiClient->getSerializer()->toQueryValue($file_id);
        }
        // query params
        if ($course_id !== null) {
            $queryParams['course_id'] = $this->apiClient->getSerializer()->toQueryValue($course_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnFilerepoDownloadCourseFileResponse',
                '/learn/v1/filerepo/downloadCourseFile'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnFilerepoDownloadCourseFileResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnFilerepoDownloadCourseFileResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation filerepoLearnv1filerepogetCourseFile
     *
     * Get Course File information action
     *
     * @param int $file_id The id of the file to be downloaded (required)
     * @param int $course_id The id of the Course (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnFilerepoGetCourseFileResponse
     */
    public function filerepoLearnv1filerepogetCourseFile($file_id, $course_id)
    {
        list($response) = $this->filerepoLearnv1filerepogetCourseFileWithHttpInfo($file_id, $course_id);
        return $response;
    }

    /**
     * Operation filerepoLearnv1filerepogetCourseFileWithHttpInfo
     *
     * Get Course File information action
     *
     * @param int $file_id The id of the file to be downloaded (required)
     * @param int $course_id The id of the Course (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnFilerepoGetCourseFileResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function filerepoLearnv1filerepogetCourseFileWithHttpInfo($file_id, $course_id)
    {
        // verify the required parameter 'file_id' is set
        if ($file_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file_id when calling filerepoLearnv1filerepogetCourseFile');
        }
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling filerepoLearnv1filerepogetCourseFile');
        }
        // parse inputs
        $resourcePath = "/learn/v1/filerepo/getCourseFile";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($file_id !== null) {
            $queryParams['file_id'] = $this->apiClient->getSerializer()->toQueryValue($file_id);
        }
        // query params
        if ($course_id !== null) {
            $queryParams['course_id'] = $this->apiClient->getSerializer()->toQueryValue($course_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnFilerepoGetCourseFileResponse',
                '/learn/v1/filerepo/getCourseFile'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnFilerepoGetCourseFileResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnFilerepoGetCourseFileResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation filerepoLearnv1filerepogetCourseFiles
     *
     * Get Course Files information action
     *
     * @param int $user_id The id of the user who wants to get the list of files (required)
     * @param int $course_id The id of the Course (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnFilerepoGetCourseFilesResponse
     */
    public function filerepoLearnv1filerepogetCourseFiles($user_id, $course_id)
    {
        list($response) = $this->filerepoLearnv1filerepogetCourseFilesWithHttpInfo($user_id, $course_id);
        return $response;
    }

    /**
     * Operation filerepoLearnv1filerepogetCourseFilesWithHttpInfo
     *
     * Get Course Files information action
     *
     * @param int $user_id The id of the user who wants to get the list of files (required)
     * @param int $course_id The id of the Course (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnFilerepoGetCourseFilesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function filerepoLearnv1filerepogetCourseFilesWithHttpInfo($user_id, $course_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling filerepoLearnv1filerepogetCourseFiles');
        }
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling filerepoLearnv1filerepogetCourseFiles');
        }
        // parse inputs
        $resourcePath = "/learn/v1/filerepo/getCourseFiles";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($user_id !== null) {
            $queryParams['user_id'] = $this->apiClient->getSerializer()->toQueryValue($user_id);
        }
        // query params
        if ($course_id !== null) {
            $queryParams['course_id'] = $this->apiClient->getSerializer()->toQueryValue($course_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnFilerepoGetCourseFilesResponse',
                '/learn/v1/filerepo/getCourseFiles'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnFilerepoGetCourseFilesResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnFilerepoGetCourseFilesResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation filerepoLearnv1filerepogetCourseFilesTree
     *
     * Get Course Files Tree information action
     *
     * @param int $user_id The id of the user who wants to get the list of files (required)
     * @param int $course_id The id of the Course (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnFilerepoGetCourseFilesTreeResponse
     */
    public function filerepoLearnv1filerepogetCourseFilesTree($user_id, $course_id)
    {
        list($response) = $this->filerepoLearnv1filerepogetCourseFilesTreeWithHttpInfo($user_id, $course_id);
        return $response;
    }

    /**
     * Operation filerepoLearnv1filerepogetCourseFilesTreeWithHttpInfo
     *
     * Get Course Files Tree information action
     *
     * @param int $user_id The id of the user who wants to get the list of files (required)
     * @param int $course_id The id of the Course (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnFilerepoGetCourseFilesTreeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function filerepoLearnv1filerepogetCourseFilesTreeWithHttpInfo($user_id, $course_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling filerepoLearnv1filerepogetCourseFilesTree');
        }
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling filerepoLearnv1filerepogetCourseFilesTree');
        }
        // parse inputs
        $resourcePath = "/learn/v1/filerepo/getCourseFilesTree";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($user_id !== null) {
            $queryParams['user_id'] = $this->apiClient->getSerializer()->toQueryValue($user_id);
        }
        // query params
        if ($course_id !== null) {
            $queryParams['course_id'] = $this->apiClient->getSerializer()->toQueryValue($course_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnFilerepoGetCourseFilesTreeResponse',
                '/learn/v1/filerepo/getCourseFilesTree'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnFilerepoGetCourseFilesTreeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnFilerepoGetCourseFilesTreeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation filerepoLearnv1filerepogetCourseFoldersTree
     *
     * Get Course Folders Tree information action
     *
     * @param int $user_id The id of the user who wants to get the list of files (required)
     * @param int $course_id The id of the Course (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnFilerepoGetCourseFoldersTreeResponse
     */
    public function filerepoLearnv1filerepogetCourseFoldersTree($user_id, $course_id)
    {
        list($response) = $this->filerepoLearnv1filerepogetCourseFoldersTreeWithHttpInfo($user_id, $course_id);
        return $response;
    }

    /**
     * Operation filerepoLearnv1filerepogetCourseFoldersTreeWithHttpInfo
     *
     * Get Course Folders Tree information action
     *
     * @param int $user_id The id of the user who wants to get the list of files (required)
     * @param int $course_id The id of the Course (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnFilerepoGetCourseFoldersTreeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function filerepoLearnv1filerepogetCourseFoldersTreeWithHttpInfo($user_id, $course_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling filerepoLearnv1filerepogetCourseFoldersTree');
        }
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling filerepoLearnv1filerepogetCourseFoldersTree');
        }
        // parse inputs
        $resourcePath = "/learn/v1/filerepo/getCourseFoldersTree";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($user_id !== null) {
            $queryParams['user_id'] = $this->apiClient->getSerializer()->toQueryValue($user_id);
        }
        // query params
        if ($course_id !== null) {
            $queryParams['course_id'] = $this->apiClient->getSerializer()->toQueryValue($course_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnFilerepoGetCourseFoldersTreeResponse',
                '/learn/v1/filerepo/getCourseFoldersTree'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnFilerepoGetCourseFoldersTreeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnFilerepoGetCourseFoldersTreeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation filerepoLearnv1filerepogetFileSessions
     *
     * get the sessions that are selected for a certain file.
     *
     * @param int $file_id The id of the file. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnFilerepoGetFileSessionsResponse
     */
    public function filerepoLearnv1filerepogetFileSessions($file_id)
    {
        list($response) = $this->filerepoLearnv1filerepogetFileSessionsWithHttpInfo($file_id);
        return $response;
    }

    /**
     * Operation filerepoLearnv1filerepogetFileSessionsWithHttpInfo
     *
     * get the sessions that are selected for a certain file.
     *
     * @param int $file_id The id of the file. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnFilerepoGetFileSessionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function filerepoLearnv1filerepogetFileSessionsWithHttpInfo($file_id)
    {
        // verify the required parameter 'file_id' is set
        if ($file_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file_id when calling filerepoLearnv1filerepogetFileSessions');
        }
        // parse inputs
        $resourcePath = "/learn/v1/filerepo/getFileSessions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($file_id !== null) {
            $queryParams['file_id'] = $this->apiClient->getSerializer()->toQueryValue($file_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnFilerepoGetFileSessionsResponse',
                '/learn/v1/filerepo/getFileSessions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnFilerepoGetFileSessionsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnFilerepoGetFileSessionsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation filerepoLearnv1filerepogetSessions
     *
     * get the sessions of the course related to the repo area.
     *
     * @param \Swagger\Client\Model\LearnFilerepoGetSessionsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnFilerepoGetSessionsResponse
     */
    public function filerepoLearnv1filerepogetSessions($body = null)
    {
        list($response) = $this->filerepoLearnv1filerepogetSessionsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation filerepoLearnv1filerepogetSessionsWithHttpInfo
     *
     * get the sessions of the course related to the repo area.
     *
     * @param \Swagger\Client\Model\LearnFilerepoGetSessionsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnFilerepoGetSessionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function filerepoLearnv1filerepogetSessionsWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/learn/v1/filerepo/getSessions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnFilerepoGetSessionsResponse',
                '/learn/v1/filerepo/getSessions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnFilerepoGetSessionsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnFilerepoGetSessionsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation filerepoLearnv1filerepolinkByURL
     *
     * link a file by url to the repo area.
     *
     * @param \Swagger\Client\Model\LearnFilerepoLinkByURLSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnFilerepoLinkByURLResponse
     */
    public function filerepoLearnv1filerepolinkByURL($body = null)
    {
        list($response) = $this->filerepoLearnv1filerepolinkByURLWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation filerepoLearnv1filerepolinkByURLWithHttpInfo
     *
     * link a file by url to the repo area.
     *
     * @param \Swagger\Client\Model\LearnFilerepoLinkByURLSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnFilerepoLinkByURLResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function filerepoLearnv1filerepolinkByURLWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/learn/v1/filerepo/linkByURL";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnFilerepoLinkByURLResponse',
                '/learn/v1/filerepo/linkByURL'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnFilerepoLinkByURLResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnFilerepoLinkByURLResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation filerepoLearnv1filerepouploadNewFile
     *
     * upload new file to the repo area
     *
     * @param \Swagger\Client\Model\LearnFilerepoUploadNewFileSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LearnFilerepoUploadNewFileResponse
     */
    public function filerepoLearnv1filerepouploadNewFile($body = null)
    {
        list($response) = $this->filerepoLearnv1filerepouploadNewFileWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation filerepoLearnv1filerepouploadNewFileWithHttpInfo
     *
     * upload new file to the repo area
     *
     * @param \Swagger\Client\Model\LearnFilerepoUploadNewFileSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LearnFilerepoUploadNewFileResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function filerepoLearnv1filerepouploadNewFileWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/learn/v1/filerepo/uploadNewFile";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LearnFilerepoUploadNewFileResponse',
                '/learn/v1/filerepo/uploadNewFile'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LearnFilerepoUploadNewFileResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LearnFilerepoUploadNewFileResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
