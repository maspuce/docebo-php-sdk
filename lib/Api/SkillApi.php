<?php
/**
 * SkillApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * SkillApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SkillApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return SkillApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation skillSkillv1skills
     *
     * Retrieves all Skills, filtered on input parameters
     *
     * @param string[] $skill_title Search text in the skill title. Default empty array. OR is performed across array items (optional)
     * @param string[] $skill_description Search text in the skill description. Default empty array. OR is performed across array items (optional)
     * @param string $sort_attr Sort by this field, default value - title. Options: title, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int[] $active Options: active skills -&amp;gt; [1], inactive skills-&amp;gt; [0], both-&amp;gt; [0,1]. Default value-&amp;gt;[0,1] (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param int $industry_id Filter returned skills by industry (optional)
     * @param int $area_id Filter returned skills by area (optional)
     * @param int $predefined Options: list predefined skills -&amp;gt; [1], list not predefined skills-&amp;gt; [0], both-&amp;gt; [2]. Default value-&amp;gt;[2] (optional)
     * @param string $search_operator Options: &#39;AND&#39; or &#39;OR&#39;. Default - &#39;AND&#39; (optional)
     * @param int $assigned_to_role ID of a role (optional)
     * @param int $exclude_assigned Filter to not show assigned skills, required value 1. (optional)
     * @param string $filters URL encoded filter by: associated_content(&#39;&#x3D;&#39;, &#39;!&#x3D;&#39;), roles_count(&#39;&#x3D;&#39;, &#39;!&#x3D;&#39;) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillSkillListResponse
     */
    public function skillSkillv1skills($skill_title = null, $skill_description = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $active = null, $get_total_count = null, $industry_id = null, $area_id = null, $predefined = null, $search_operator = null, $assigned_to_role = null, $exclude_assigned = null, $filters = null)
    {
        list($response) = $this->skillSkillv1skillsWithHttpInfo($skill_title, $skill_description, $sort_attr, $sort_dir, $page, $page_size, $lang, $active, $get_total_count, $industry_id, $area_id, $predefined, $search_operator, $assigned_to_role, $exclude_assigned, $filters);
        return $response;
    }

    /**
     * Operation skillSkillv1skillsWithHttpInfo
     *
     * Retrieves all Skills, filtered on input parameters
     *
     * @param string[] $skill_title Search text in the skill title. Default empty array. OR is performed across array items (optional)
     * @param string[] $skill_description Search text in the skill description. Default empty array. OR is performed across array items (optional)
     * @param string $sort_attr Sort by this field, default value - title. Options: title, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int[] $active Options: active skills -&amp;gt; [1], inactive skills-&amp;gt; [0], both-&amp;gt; [0,1]. Default value-&amp;gt;[0,1] (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param int $industry_id Filter returned skills by industry (optional)
     * @param int $area_id Filter returned skills by area (optional)
     * @param int $predefined Options: list predefined skills -&amp;gt; [1], list not predefined skills-&amp;gt; [0], both-&amp;gt; [2]. Default value-&amp;gt;[2] (optional)
     * @param string $search_operator Options: &#39;AND&#39; or &#39;OR&#39;. Default - &#39;AND&#39; (optional)
     * @param int $assigned_to_role ID of a role (optional)
     * @param int $exclude_assigned Filter to not show assigned skills, required value 1. (optional)
     * @param string $filters URL encoded filter by: associated_content(&#39;&#x3D;&#39;, &#39;!&#x3D;&#39;), roles_count(&#39;&#x3D;&#39;, &#39;!&#x3D;&#39;) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillSkillListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function skillSkillv1skillsWithHttpInfo($skill_title = null, $skill_description = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $active = null, $get_total_count = null, $industry_id = null, $area_id = null, $predefined = null, $search_operator = null, $assigned_to_role = null, $exclude_assigned = null, $filters = null)
    {
        // parse inputs
        $resourcePath = "/skill/v1/skills";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if (is_array($skill_title)) {
            $skill_title = $this->apiClient->getSerializer()->serializeCollection($skill_title, 'brackets', true);
        }
        if ($skill_title !== null) {
            $queryParams['skill_title'] = $this->apiClient->getSerializer()->toQueryValue($skill_title);
        }
        // query params
        if (is_array($skill_description)) {
            $skill_description = $this->apiClient->getSerializer()->serializeCollection($skill_description, 'brackets', true);
        }
        if ($skill_description !== null) {
            $queryParams['skill_description'] = $this->apiClient->getSerializer()->toQueryValue($skill_description);
        }
        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if (is_array($active)) {
            $active = $this->apiClient->getSerializer()->serializeCollection($active, 'brackets', true);
        }
        if ($active !== null) {
            $queryParams['active'] = $this->apiClient->getSerializer()->toQueryValue($active);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // query params
        if ($industry_id !== null) {
            $queryParams['industry_id'] = $this->apiClient->getSerializer()->toQueryValue($industry_id);
        }
        // query params
        if ($area_id !== null) {
            $queryParams['area_id'] = $this->apiClient->getSerializer()->toQueryValue($area_id);
        }
        // query params
        if ($predefined !== null) {
            $queryParams['predefined'] = $this->apiClient->getSerializer()->toQueryValue($predefined);
        }
        // query params
        if ($search_operator !== null) {
            $queryParams['search_operator'] = $this->apiClient->getSerializer()->toQueryValue($search_operator);
        }
        // query params
        if ($assigned_to_role !== null) {
            $queryParams['assigned_to_role'] = $this->apiClient->getSerializer()->toQueryValue($assigned_to_role);
        }
        // query params
        if ($exclude_assigned !== null) {
            $queryParams['exclude_assigned'] = $this->apiClient->getSerializer()->toQueryValue($exclude_assigned);
        }
        // query params
        if ($filters !== null) {
            $queryParams['filters'] = $this->apiClient->getSerializer()->toQueryValue($filters);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillSkillListResponse',
                '/skill/v1/skills'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillSkillListResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillSkillListResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation skillSkillv1skills_0
     *
     * Creates a new Skill
     *
     * @param \Swagger\Client\Model\SkillSkillCreateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillSkillCreateResponse
     */
    public function skillSkillv1skills_0($body = null)
    {
        list($response) = $this->skillSkillv1skills_0WithHttpInfo($body);
        return $response;
    }

    /**
     * Operation skillSkillv1skills_0WithHttpInfo
     *
     * Creates a new Skill
     *
     * @param \Swagger\Client\Model\SkillSkillCreateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillSkillCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function skillSkillv1skills_0WithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/skill/v1/skills";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillSkillCreateResponse',
                '/skill/v1/skills'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillSkillCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillSkillCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation skillSkillv1skills_1
     *
     * Deletes one or more Skills
     *
     * @param \Swagger\Client\Model\SkillSkillDeleteSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillSkillDeleteResponse
     */
    public function skillSkillv1skills_1($body = null)
    {
        list($response) = $this->skillSkillv1skills_1WithHttpInfo($body);
        return $response;
    }

    /**
     * Operation skillSkillv1skills_1WithHttpInfo
     *
     * Deletes one or more Skills
     *
     * @param \Swagger\Client\Model\SkillSkillDeleteSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillSkillDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function skillSkillv1skills_1WithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/skill/v1/skills";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillSkillDeleteResponse',
                '/skill/v1/skills'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillSkillDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillSkillDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation skillSkillv1skillsclone
     *
     * Copy skill(-s) from the predefined once
     *
     * @param \Swagger\Client\Model\SkillSkillCloneSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillSkillCloneResponse
     */
    public function skillSkillv1skillsclone($body = null)
    {
        list($response) = $this->skillSkillv1skillscloneWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation skillSkillv1skillscloneWithHttpInfo
     *
     * Copy skill(-s) from the predefined once
     *
     * @param \Swagger\Client\Model\SkillSkillCloneSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillSkillCloneResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function skillSkillv1skillscloneWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/skill/v1/skills/clone";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillSkillCloneResponse',
                '/skill/v1/skills/clone'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillSkillCloneResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillSkillCloneResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation skillSkillv1skillscontentcontentId
     *
     * Updates a Development Object
     *
     * @param int $content_id ID of the skill object (required)
     * @param \Swagger\Client\Model\SkillSkillUpdateStatusSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillSkillUpdateStatusResponse
     */
    public function skillSkillv1skillscontentcontentId($content_id, $body = null)
    {
        list($response) = $this->skillSkillv1skillscontentcontentIdWithHttpInfo($content_id, $body);
        return $response;
    }

    /**
     * Operation skillSkillv1skillscontentcontentIdWithHttpInfo
     *
     * Updates a Development Object
     *
     * @param int $content_id ID of the skill object (required)
     * @param \Swagger\Client\Model\SkillSkillUpdateStatusSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillSkillUpdateStatusResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function skillSkillv1skillscontentcontentIdWithHttpInfo($content_id, $body = null)
    {
        // verify the required parameter 'content_id' is set
        if ($content_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $content_id when calling skillSkillv1skillscontentcontentId');
        }
        // parse inputs
        $resourcePath = "/skill/v1/skills/content/{content_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($content_id !== null) {
            $resourcePath = str_replace(
                "{" . "content_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($content_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillSkillUpdateStatusResponse',
                '/skill/v1/skills/content/{content_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillSkillUpdateStatusResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillSkillUpdateStatusResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation skillSkillv1skillsformalcontent
     *
     * Get list courses and learning plans
     *
     * @param string $sort_attr Sort by this field, default value - title. Options: title, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param int $exclude the ID of a skill - return all courses and learning plans which aren&#39;t assigned to the given skill (optional)
     * @param string $search_text Search by text given(a text to search in name or description) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillSkillFormalcontentResponse
     */
    public function skillSkillv1skillsformalcontent($sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null, $exclude = null, $search_text = null)
    {
        list($response) = $this->skillSkillv1skillsformalcontentWithHttpInfo($sort_attr, $sort_dir, $page, $page_size, $lang, $get_total_count, $exclude, $search_text);
        return $response;
    }

    /**
     * Operation skillSkillv1skillsformalcontentWithHttpInfo
     *
     * Get list courses and learning plans
     *
     * @param string $sort_attr Sort by this field, default value - title. Options: title, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param int $exclude the ID of a skill - return all courses and learning plans which aren&#39;t assigned to the given skill (optional)
     * @param string $search_text Search by text given(a text to search in name or description) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillSkillFormalcontentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function skillSkillv1skillsformalcontentWithHttpInfo($sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null, $exclude = null, $search_text = null)
    {
        // parse inputs
        $resourcePath = "/skill/v1/skills/formalcontent";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // query params
        if ($exclude !== null) {
            $queryParams['exclude'] = $this->apiClient->getSerializer()->toQueryValue($exclude);
        }
        // query params
        if ($search_text !== null) {
            $queryParams['search_text'] = $this->apiClient->getSerializer()->toQueryValue($search_text);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillSkillFormalcontentResponse',
                '/skill/v1/skills/formalcontent'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillSkillFormalcontentResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillSkillFormalcontentResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation skillSkillv1skillsidroles
     *
     * Retrieves the list of Roles by Skill(id), filtered on input parameters
     *
     * @param int $id Skill id (required)
     * @param string[] $role_title Search text in the role title. Default empty array. OR is performed among multiple array items (optional)
     * @param string[] $role_description Search text in the role description. Default empty array. OR is performed among multiple array items (optional)
     * @param string $sort_attr Sort by this field, default value - title. Options: role_title, role_id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int[] $role_status Options: active roles -&amp;gt; [1], inactive roles-&amp;gt; [0], both-&amp;gt; [0,1]. Default value-&amp;gt;[0,1] (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param int[] $role_id Filter returned roles by role_id (optional)
     * @param int[] $user_id Filter returned roles by employees (optional)
     * @param int[] $branch_id Filter returned roles by branches (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillSkillListRolesL2Response
     */
    public function skillSkillv1skillsidroles($id, $role_title = null, $role_description = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $role_status = null, $get_total_count = null, $role_id = null, $user_id = null, $branch_id = null)
    {
        list($response) = $this->skillSkillv1skillsidrolesWithHttpInfo($id, $role_title, $role_description, $sort_attr, $sort_dir, $page, $page_size, $lang, $role_status, $get_total_count, $role_id, $user_id, $branch_id);
        return $response;
    }

    /**
     * Operation skillSkillv1skillsidrolesWithHttpInfo
     *
     * Retrieves the list of Roles by Skill(id), filtered on input parameters
     *
     * @param int $id Skill id (required)
     * @param string[] $role_title Search text in the role title. Default empty array. OR is performed among multiple array items (optional)
     * @param string[] $role_description Search text in the role description. Default empty array. OR is performed among multiple array items (optional)
     * @param string $sort_attr Sort by this field, default value - title. Options: role_title, role_id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int[] $role_status Options: active roles -&amp;gt; [1], inactive roles-&amp;gt; [0], both-&amp;gt; [0,1]. Default value-&amp;gt;[0,1] (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param int[] $role_id Filter returned roles by role_id (optional)
     * @param int[] $user_id Filter returned roles by employees (optional)
     * @param int[] $branch_id Filter returned roles by branches (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillSkillListRolesL2Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function skillSkillv1skillsidrolesWithHttpInfo($id, $role_title = null, $role_description = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $role_status = null, $get_total_count = null, $role_id = null, $user_id = null, $branch_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling skillSkillv1skillsidroles');
        }
        // parse inputs
        $resourcePath = "/skill/v1/skills/{id}/roles";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if (is_array($role_title)) {
            $role_title = $this->apiClient->getSerializer()->serializeCollection($role_title, 'brackets', true);
        }
        if ($role_title !== null) {
            $queryParams['role_title'] = $this->apiClient->getSerializer()->toQueryValue($role_title);
        }
        // query params
        if (is_array($role_description)) {
            $role_description = $this->apiClient->getSerializer()->serializeCollection($role_description, 'brackets', true);
        }
        if ($role_description !== null) {
            $queryParams['role_description'] = $this->apiClient->getSerializer()->toQueryValue($role_description);
        }
        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if (is_array($role_status)) {
            $role_status = $this->apiClient->getSerializer()->serializeCollection($role_status, 'brackets', true);
        }
        if ($role_status !== null) {
            $queryParams['role_status'] = $this->apiClient->getSerializer()->toQueryValue($role_status);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // query params
        if (is_array($role_id)) {
            $role_id = $this->apiClient->getSerializer()->serializeCollection($role_id, 'brackets', true);
        }
        if ($role_id !== null) {
            $queryParams['role_id'] = $this->apiClient->getSerializer()->toQueryValue($role_id);
        }
        // query params
        if (is_array($user_id)) {
            $user_id = $this->apiClient->getSerializer()->serializeCollection($user_id, 'brackets', true);
        }
        if ($user_id !== null) {
            $queryParams['user_id'] = $this->apiClient->getSerializer()->toQueryValue($user_id);
        }
        // query params
        if (is_array($branch_id)) {
            $branch_id = $this->apiClient->getSerializer()->serializeCollection($branch_id, 'brackets', true);
        }
        if ($branch_id !== null) {
            $queryParams['branch_id'] = $this->apiClient->getSerializer()->toQueryValue($branch_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillSkillListRolesL2Response',
                '/skill/v1/skills/{id}/roles'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillSkillListRolesL2Response', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillSkillListRolesL2Response', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation skillSkillv1skillsidroles_0
     *
     * Assigns one or more required Roles to a Skill
     *
     * @param int $id Id of a skill (required)
     * @param \Swagger\Client\Model\SkillSkillAssignRolesSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillSkillAssignRolesResponse
     */
    public function skillSkillv1skillsidroles_0($id, $body = null)
    {
        list($response) = $this->skillSkillv1skillsidroles_0WithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation skillSkillv1skillsidroles_0WithHttpInfo
     *
     * Assigns one or more required Roles to a Skill
     *
     * @param int $id Id of a skill (required)
     * @param \Swagger\Client\Model\SkillSkillAssignRolesSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillSkillAssignRolesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function skillSkillv1skillsidroles_0WithHttpInfo($id, $body = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling skillSkillv1skillsidroles_0');
        }
        // parse inputs
        $resourcePath = "/skill/v1/skills/{id}/roles";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillSkillAssignRolesResponse',
                '/skill/v1/skills/{id}/roles'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillSkillAssignRolesResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillSkillAssignRolesResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation skillSkillv1skillsidtype
     *
     * List skill objects by given skill id and object type
     *
     * @param string $type Objects type to get. Options: courses, plans, los, assets, playlists, channels, devobjects, all (required)
     * @param int $id Skill id (required)
     * @param string $sort_attr Sort by this field, default value - title. Options: name, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param string $name If provided filter by name/title (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param string $filters URL encoded filter by: auto_enroll(&#39;&#x3D;&#39;, &#39;Unable to render embedded object: File (&#x3D;&#39;), auto_suggest(&#39;&#x3D;&#39;, &#39;) not found.&#x3D;&#39;) (optional)
     * @param string $search_text Search by text given(a text to search in name or description) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillSkillListObjectsResponse
     */
    public function skillSkillv1skillsidtype($type, $id, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $name = null, $get_total_count = null, $filters = null, $search_text = null)
    {
        list($response) = $this->skillSkillv1skillsidtypeWithHttpInfo($type, $id, $sort_attr, $sort_dir, $page, $page_size, $lang, $name, $get_total_count, $filters, $search_text);
        return $response;
    }

    /**
     * Operation skillSkillv1skillsidtypeWithHttpInfo
     *
     * List skill objects by given skill id and object type
     *
     * @param string $type Objects type to get. Options: courses, plans, los, assets, playlists, channels, devobjects, all (required)
     * @param int $id Skill id (required)
     * @param string $sort_attr Sort by this field, default value - title. Options: name, id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param string $name If provided filter by name/title (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param string $filters URL encoded filter by: auto_enroll(&#39;&#x3D;&#39;, &#39;Unable to render embedded object: File (&#x3D;&#39;), auto_suggest(&#39;&#x3D;&#39;, &#39;) not found.&#x3D;&#39;) (optional)
     * @param string $search_text Search by text given(a text to search in name or description) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillSkillListObjectsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function skillSkillv1skillsidtypeWithHttpInfo($type, $id, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $name = null, $get_total_count = null, $filters = null, $search_text = null)
    {
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling skillSkillv1skillsidtype');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling skillSkillv1skillsidtype');
        }
        // parse inputs
        $resourcePath = "/skill/v1/skills/{id}/{type}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // query params
        if ($filters !== null) {
            $queryParams['filters'] = $this->apiClient->getSerializer()->toQueryValue($filters);
        }
        // query params
        if ($search_text !== null) {
            $queryParams['search_text'] = $this->apiClient->getSerializer()->toQueryValue($search_text);
        }
        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                "{" . "type" . "}",
                $this->apiClient->getSerializer()->toPathValue($type),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillSkillListObjectsResponse',
                '/skill/v1/skills/{id}/{type}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillSkillListObjectsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillSkillListObjectsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation skillSkillv1skillsinformalcontent
     *
     * Get list of Coach & Share Assets
     *
     * @param string $sort_attr Sort by this field, default value - title. Options: title, id, created (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param int $exclude the ID of a skill - return all assets which aren&#39;t assigned to the given skill (optional)
     * @param string $search_text Search by text given(a text to search in title or description) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillSkillInformalcontentResponse
     */
    public function skillSkillv1skillsinformalcontent($sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null, $exclude = null, $search_text = null)
    {
        list($response) = $this->skillSkillv1skillsinformalcontentWithHttpInfo($sort_attr, $sort_dir, $page, $page_size, $lang, $get_total_count, $exclude, $search_text);
        return $response;
    }

    /**
     * Operation skillSkillv1skillsinformalcontentWithHttpInfo
     *
     * Get list of Coach & Share Assets
     *
     * @param string $sort_attr Sort by this field, default value - title. Options: title, id, created (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param int $exclude the ID of a skill - return all assets which aren&#39;t assigned to the given skill (optional)
     * @param string $search_text Search by text given(a text to search in title or description) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillSkillInformalcontentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function skillSkillv1skillsinformalcontentWithHttpInfo($sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null, $exclude = null, $search_text = null)
    {
        // parse inputs
        $resourcePath = "/skill/v1/skills/informalcontent";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // query params
        if ($exclude !== null) {
            $queryParams['exclude'] = $this->apiClient->getSerializer()->toQueryValue($exclude);
        }
        // query params
        if ($search_text !== null) {
            $queryParams['search_text'] = $this->apiClient->getSerializer()->toQueryValue($search_text);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillSkillInformalcontentResponse',
                '/skill/v1/skills/informalcontent'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillSkillInformalcontentResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillSkillInformalcontentResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation skillSkillv1skillsskillId
     *
     * Returns the details of a Skill
     *
     * @param int $skill_id ID of the skill (required)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillSkillViewResponse
     */
    public function skillSkillv1skillsskillId($skill_id, $lang = null)
    {
        list($response) = $this->skillSkillv1skillsskillIdWithHttpInfo($skill_id, $lang);
        return $response;
    }

    /**
     * Operation skillSkillv1skillsskillIdWithHttpInfo
     *
     * Returns the details of a Skill
     *
     * @param int $skill_id ID of the skill (required)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillSkillViewResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function skillSkillv1skillsskillIdWithHttpInfo($skill_id, $lang = null)
    {
        // verify the required parameter 'skill_id' is set
        if ($skill_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $skill_id when calling skillSkillv1skillsskillId');
        }
        // parse inputs
        $resourcePath = "/skill/v1/skills/{skill_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // path params
        if ($skill_id !== null) {
            $resourcePath = str_replace(
                "{" . "skill_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($skill_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillSkillViewResponse',
                '/skill/v1/skills/{skill_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillSkillViewResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillSkillViewResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation skillSkillv1skillsskillId_0
     *
     * Updates the details of a Skill
     *
     * @param int $skill_id ID of the skill to update (required)
     * @param \Swagger\Client\Model\SkillSkillUpdateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SkillSkillUpdateResponse
     */
    public function skillSkillv1skillsskillId_0($skill_id, $body = null)
    {
        list($response) = $this->skillSkillv1skillsskillId_0WithHttpInfo($skill_id, $body);
        return $response;
    }

    /**
     * Operation skillSkillv1skillsskillId_0WithHttpInfo
     *
     * Updates the details of a Skill
     *
     * @param int $skill_id ID of the skill to update (required)
     * @param \Swagger\Client\Model\SkillSkillUpdateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SkillSkillUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function skillSkillv1skillsskillId_0WithHttpInfo($skill_id, $body = null)
    {
        // verify the required parameter 'skill_id' is set
        if ($skill_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $skill_id when calling skillSkillv1skillsskillId_0');
        }
        // parse inputs
        $resourcePath = "/skill/v1/skills/{skill_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($skill_id !== null) {
            $resourcePath = str_replace(
                "{" . "skill_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($skill_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SkillSkillUpdateResponse',
                '/skill/v1/skills/{skill_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SkillSkillUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SkillSkillUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
