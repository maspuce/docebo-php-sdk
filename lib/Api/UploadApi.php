<?php
/**
 * UploadApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * UploadApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UploadApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return UploadApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation uploadManagev1upload
     *
     * Delete File from Amazon S3
     *
     * @param \Swagger\Client\Model\ManageUploadDeleteSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageUploadDeleteResponse
     */
    public function uploadManagev1upload($body = null)
    {
        list($response) = $this->uploadManagev1uploadWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation uploadManagev1uploadWithHttpInfo
     *
     * Delete File from Amazon S3
     *
     * @param \Swagger\Client\Model\ManageUploadDeleteSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageUploadDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadManagev1uploadWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/manage/v1/upload";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageUploadDeleteResponse',
                '/manage/v1/upload'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageUploadDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageUploadDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation uploadManagev1uploadpresignedUrl
     *
     * Generate Amazon S3 Pre-Signed URL for given File
     *
     * @param string $filename The name of the File (required)
     * @param string $mime The mimetype of the file being processed (required)
     * @param string $collection collection name (required)
     * @param string $subfolder sub-folder to place the file in (optional)
     * @param bool $keep_original_filename whether to keep the given filename instead of generating a random hash (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageUploadPresignedUrlResponse
     */
    public function uploadManagev1uploadpresignedUrl($filename, $mime, $collection, $subfolder = null, $keep_original_filename = null)
    {
        list($response) = $this->uploadManagev1uploadpresignedUrlWithHttpInfo($filename, $mime, $collection, $subfolder, $keep_original_filename);
        return $response;
    }

    /**
     * Operation uploadManagev1uploadpresignedUrlWithHttpInfo
     *
     * Generate Amazon S3 Pre-Signed URL for given File
     *
     * @param string $filename The name of the File (required)
     * @param string $mime The mimetype of the file being processed (required)
     * @param string $collection collection name (required)
     * @param string $subfolder sub-folder to place the file in (optional)
     * @param bool $keep_original_filename whether to keep the given filename instead of generating a random hash (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageUploadPresignedUrlResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadManagev1uploadpresignedUrlWithHttpInfo($filename, $mime, $collection, $subfolder = null, $keep_original_filename = null)
    {
        // verify the required parameter 'filename' is set
        if ($filename === null) {
            throw new \InvalidArgumentException('Missing the required parameter $filename when calling uploadManagev1uploadpresignedUrl');
        }
        // verify the required parameter 'mime' is set
        if ($mime === null) {
            throw new \InvalidArgumentException('Missing the required parameter $mime when calling uploadManagev1uploadpresignedUrl');
        }
        // verify the required parameter 'collection' is set
        if ($collection === null) {
            throw new \InvalidArgumentException('Missing the required parameter $collection when calling uploadManagev1uploadpresignedUrl');
        }
        // parse inputs
        $resourcePath = "/manage/v1/upload/presigned_url";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($filename !== null) {
            $queryParams['filename'] = $this->apiClient->getSerializer()->toQueryValue($filename);
        }
        // query params
        if ($mime !== null) {
            $queryParams['mime'] = $this->apiClient->getSerializer()->toQueryValue($mime);
        }
        // query params
        if ($collection !== null) {
            $queryParams['collection'] = $this->apiClient->getSerializer()->toQueryValue($collection);
        }
        // query params
        if ($subfolder !== null) {
            $queryParams['subfolder'] = $this->apiClient->getSerializer()->toQueryValue($subfolder);
        }
        // query params
        if ($keep_original_filename !== null) {
            $queryParams['keep_original_filename'] = $this->apiClient->getSerializer()->toQueryValue($keep_original_filename);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageUploadPresignedUrlResponse',
                '/manage/v1/upload/presigned_url'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageUploadPresignedUrlResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageUploadPresignedUrlResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
