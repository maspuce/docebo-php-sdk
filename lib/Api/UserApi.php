<?php
/**
 * UserApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * UserApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return UserApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation userManagev1managersmanagerIdusers
     *
     * Assigns subordinates to an User
     *
     * @param int $manager_id Id of manager (required)
     * @param \Swagger\Client\Model\ManageUserAssignSubordinatesSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageUserAssignSubordinatesResponse
     */
    public function userManagev1managersmanagerIdusers($manager_id, $body = null)
    {
        list($response) = $this->userManagev1managersmanagerIdusersWithHttpInfo($manager_id, $body);
        return $response;
    }

    /**
     * Operation userManagev1managersmanagerIdusersWithHttpInfo
     *
     * Assigns subordinates to an User
     *
     * @param int $manager_id Id of manager (required)
     * @param \Swagger\Client\Model\ManageUserAssignSubordinatesSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageUserAssignSubordinatesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userManagev1managersmanagerIdusersWithHttpInfo($manager_id, $body = null)
    {
        // verify the required parameter 'manager_id' is set
        if ($manager_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $manager_id when calling userManagev1managersmanagerIdusers');
        }
        // parse inputs
        $resourcePath = "/manage/v1/managers/{manager_id}/users";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($manager_id !== null) {
            $resourcePath = str_replace(
                "{" . "manager_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($manager_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageUserAssignSubordinatesResponse',
                '/manage/v1/managers/{manager_id}/users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageUserAssignSubordinatesResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageUserAssignSubordinatesResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userManagev1user
     *
     * Returns list of Users
     *
     * @param int $pending Get &amp;quot;pending&amp;quot; users OR all others. Options: 0 - false, 1 - true. Default value: false (optional)
     * @param int $branch_id Filtering by branch ID (optional)
     * @param int $selection_status Branches with children or not. Options: 1 - without children, 2 - with children. Default: 1 (optional)
     * @param string $sort_attr Sort by this field, default value - first_name. Options: username, first_name, status, level, email, last_access_date, expiration_date, language, email_validation_status (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param string $search_text Text to search in first name, last name and username of the users (optional)
     * @param string $filters serialize object containing list of filters and their options. List of filters - ( code:{like, contains, not_equal, ends_with, starts_with, is_empty, not_empty, not_start_with, not_end_with, not_contains}, sold_to:{like, contains, not_equal, ends_with, starts_with, is_empty, not_empty, not_start_with, not_end_with, not_contains}, bundle_name:{like, contains, not_equal, ends_with, starts_with, is_empty, not_empty, not_start_with, not_end_with, not_contains}, plan_name:{like, contains, not_equal, ends_with, starts_with, is_empty, not_empty, not_start_with, not_end_with, not_contains} ) (optional)
     * @param int[] $exclude List of user IDs to exclude from result (optional)
     * @param int $exclude_power_users_and_super_admins Exclude all power users and super admins from result. Default: disabled (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageUserIndexResponse
     */
    public function userManagev1user($pending = null, $branch_id = null, $selection_status = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $get_total_count = null, $search_text = null, $filters = null, $exclude = null, $exclude_power_users_and_super_admins = null)
    {
        list($response) = $this->userManagev1userWithHttpInfo($pending, $branch_id, $selection_status, $sort_attr, $sort_dir, $page, $page_size, $get_total_count, $search_text, $filters, $exclude, $exclude_power_users_and_super_admins);
        return $response;
    }

    /**
     * Operation userManagev1userWithHttpInfo
     *
     * Returns list of Users
     *
     * @param int $pending Get &amp;quot;pending&amp;quot; users OR all others. Options: 0 - false, 1 - true. Default value: false (optional)
     * @param int $branch_id Filtering by branch ID (optional)
     * @param int $selection_status Branches with children or not. Options: 1 - without children, 2 - with children. Default: 1 (optional)
     * @param string $sort_attr Sort by this field, default value - first_name. Options: username, first_name, status, level, email, last_access_date, expiration_date, language, email_validation_status (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @param string $search_text Text to search in first name, last name and username of the users (optional)
     * @param string $filters serialize object containing list of filters and their options. List of filters - ( code:{like, contains, not_equal, ends_with, starts_with, is_empty, not_empty, not_start_with, not_end_with, not_contains}, sold_to:{like, contains, not_equal, ends_with, starts_with, is_empty, not_empty, not_start_with, not_end_with, not_contains}, bundle_name:{like, contains, not_equal, ends_with, starts_with, is_empty, not_empty, not_start_with, not_end_with, not_contains}, plan_name:{like, contains, not_equal, ends_with, starts_with, is_empty, not_empty, not_start_with, not_end_with, not_contains} ) (optional)
     * @param int[] $exclude List of user IDs to exclude from result (optional)
     * @param int $exclude_power_users_and_super_admins Exclude all power users and super admins from result. Default: disabled (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageUserIndexResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userManagev1userWithHttpInfo($pending = null, $branch_id = null, $selection_status = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $get_total_count = null, $search_text = null, $filters = null, $exclude = null, $exclude_power_users_and_super_admins = null)
    {
        // parse inputs
        $resourcePath = "/manage/v1/user";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($pending !== null) {
            $queryParams['pending'] = $this->apiClient->getSerializer()->toQueryValue($pending);
        }
        // query params
        if ($branch_id !== null) {
            $queryParams['branch_id'] = $this->apiClient->getSerializer()->toQueryValue($branch_id);
        }
        // query params
        if ($selection_status !== null) {
            $queryParams['selection_status'] = $this->apiClient->getSerializer()->toQueryValue($selection_status);
        }
        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // query params
        if ($search_text !== null) {
            $queryParams['search_text'] = $this->apiClient->getSerializer()->toQueryValue($search_text);
        }
        // query params
        if ($filters !== null) {
            $queryParams['filters'] = $this->apiClient->getSerializer()->toQueryValue($filters);
        }
        // query params
        if (is_array($exclude)) {
            $exclude = $this->apiClient->getSerializer()->serializeCollection($exclude, 'brackets', true);
        }
        if ($exclude !== null) {
            $queryParams['exclude'] = $this->apiClient->getSerializer()->toQueryValue($exclude);
        }
        // query params
        if ($exclude_power_users_and_super_admins !== null) {
            $queryParams['exclude_power_users_and_super_admins'] = $this->apiClient->getSerializer()->toQueryValue($exclude_power_users_and_super_admins);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageUserIndexResponse',
                '/manage/v1/user'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageUserIndexResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageUserIndexResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userManagev1user_0
     *
     * Create user
     *
     * @param \Swagger\Client\Model\ManageUserCreateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageUserCreateResponse
     */
    public function userManagev1user_0($body = null)
    {
        list($response) = $this->userManagev1user_0WithHttpInfo($body);
        return $response;
    }

    /**
     * Operation userManagev1user_0WithHttpInfo
     *
     * Create user
     *
     * @param \Swagger\Client\Model\ManageUserCreateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageUserCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userManagev1user_0WithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/manage/v1/user";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageUserCreateResponse',
                '/manage/v1/user'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageUserCreateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageUserCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userManagev1useraddToBranch
     *
     * Adds users to branches
     *
     * @param \Swagger\Client\Model\ManageUserAddToBranchSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageUserAddToBranchResponse
     */
    public function userManagev1useraddToBranch($body = null)
    {
        list($response) = $this->userManagev1useraddToBranchWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation userManagev1useraddToBranchWithHttpInfo
     *
     * Adds users to branches
     *
     * @param \Swagger\Client\Model\ManageUserAddToBranchSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageUserAddToBranchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userManagev1useraddToBranchWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/manage/v1/user/add_to_branch";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageUserAddToBranchResponse',
                '/manage/v1/user/add_to_branch'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageUserAddToBranchResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageUserAddToBranchResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userManagev1userapprove
     *
     * Approve temporary users
     *
     * @param \Swagger\Client\Model\ManageUserApproveUserSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageUserApproveUserResponse
     */
    public function userManagev1userapprove($body = null)
    {
        list($response) = $this->userManagev1userapproveWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation userManagev1userapproveWithHttpInfo
     *
     * Approve temporary users
     *
     * @param \Swagger\Client\Model\ManageUserApproveUserSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageUserApproveUserResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userManagev1userapproveWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/manage/v1/user/approve";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageUserApproveUserResponse',
                '/manage/v1/user/approve'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageUserApproveUserResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageUserApproveUserResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userManagev1userbatch
     *
     * Batch import users
     *
     * @param \Swagger\Client\Model\ManageUserBatchSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageUserBatchResponse
     */
    public function userManagev1userbatch($body = null)
    {
        list($response) = $this->userManagev1userbatchWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation userManagev1userbatchWithHttpInfo
     *
     * Batch import users
     *
     * @param \Swagger\Client\Model\ManageUserBatchSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageUserBatchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userManagev1userbatchWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/manage/v1/user/batch";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageUserBatchResponse',
                '/manage/v1/user/batch'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageUserBatchResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageUserBatchResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userManagev1userchangeStatus
     *
     * Updates an user status
     *
     * @param \Swagger\Client\Model\ManageUserChangeStatusSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageUserChangeStatusResponse
     */
    public function userManagev1userchangeStatus($body = null)
    {
        list($response) = $this->userManagev1userchangeStatusWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation userManagev1userchangeStatusWithHttpInfo
     *
     * Updates an user status
     *
     * @param \Swagger\Client\Model\ManageUserChangeStatusSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageUserChangeStatusResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userManagev1userchangeStatusWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/manage/v1/user/change_status";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageUserChangeStatusResponse',
                '/manage/v1/user/change_status'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageUserChangeStatusResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageUserChangeStatusResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userManagev1usercheckUsernameuserid
     *
     * Check if given username is free
     *
     * @param int $userid Username (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageUserCheckUsernameResponse
     */
    public function userManagev1usercheckUsernameuserid($userid)
    {
        list($response) = $this->userManagev1usercheckUsernameuseridWithHttpInfo($userid);
        return $response;
    }

    /**
     * Operation userManagev1usercheckUsernameuseridWithHttpInfo
     *
     * Check if given username is free
     *
     * @param int $userid Username (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageUserCheckUsernameResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userManagev1usercheckUsernameuseridWithHttpInfo($userid)
    {
        // verify the required parameter 'userid' is set
        if ($userid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $userid when calling userManagev1usercheckUsernameuserid');
        }
        // parse inputs
        $resourcePath = "/manage/v1/user/check_username/{userid}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($userid !== null) {
            $resourcePath = str_replace(
                "{" . "userid" . "}",
                $this->apiClient->getSerializer()->toPathValue($userid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageUserCheckUsernameResponse',
                '/manage/v1/user/check_username/{userid}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageUserCheckUsernameResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageUserCheckUsernameResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userManagev1userconfirmEmail
     *
     * Registration confirmation email
     *
     * @param \Swagger\Client\Model\ManageUserConfirmEmailSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageUserConfirmEmailResponse
     */
    public function userManagev1userconfirmEmail($body = null)
    {
        list($response) = $this->userManagev1userconfirmEmailWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation userManagev1userconfirmEmailWithHttpInfo
     *
     * Registration confirmation email
     *
     * @param \Swagger\Client\Model\ManageUserConfirmEmailSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageUserConfirmEmailResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userManagev1userconfirmEmailWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/manage/v1/user/confirm_email";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageUserConfirmEmailResponse',
                '/manage/v1/user/confirm_email'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageUserConfirmEmailResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageUserConfirmEmailResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userManagev1userdelete
     *
     * Deletes an user
     *
     * @param \Swagger\Client\Model\ManageUserDeleteSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageUserDeleteResponse
     */
    public function userManagev1userdelete($body = null)
    {
        list($response) = $this->userManagev1userdeleteWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation userManagev1userdeleteWithHttpInfo
     *
     * Deletes an user
     *
     * @param \Swagger\Client\Model\ManageUserDeleteSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageUserDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userManagev1userdeleteWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/manage/v1/user/delete";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageUserDeleteResponse',
                '/manage/v1/user/delete'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageUserDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageUserDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userManagev1userexport
     *
     * Export users
     *
     * @param int[] $user_ids User IDs to be exported (required)
     * @param int[] $additional_field_ids Additional fields IDs to be included in export (optional)
     * @param int $user_id If user ID must be included in export (optional)
     * @param int $username If username must be included in export (optional)
     * @param int $first_name If user first name must be included in export (optional)
     * @param int $last_name If user last name must be included in export (optional)
     * @param int $email If user email must be included in export (optional)
     * @param int $creation_date If user creation date must be included in export (optional)
     * @param int $expiration_date If user expiration date must be included in export (optional)
     * @param int $email_validation_status If user expiration date must be included in export (optional)
     * @param int $last_access_date If user last access date must be included in export (optional)
     * @param int $language If user last access date must be included in export (optional)
     * @param int $include_header Include or NOT naming of columns in csv/xls file (optional)
     * @param string $export_format Format of exported file csv/xls file. Options: &amp;quot;csv&amp;quot; or &amp;quot;xls&amp;quot;. Default: &amp;quot;xls&amp;quot; (optional)
     * @param string $delimiter Delimiter for exported csv file/ Default: &amp;quot;,&amp;quot; (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageUserExportResponse
     */
    public function userManagev1userexport($user_ids, $additional_field_ids = null, $user_id = null, $username = null, $first_name = null, $last_name = null, $email = null, $creation_date = null, $expiration_date = null, $email_validation_status = null, $last_access_date = null, $language = null, $include_header = null, $export_format = null, $delimiter = null)
    {
        list($response) = $this->userManagev1userexportWithHttpInfo($user_ids, $additional_field_ids, $user_id, $username, $first_name, $last_name, $email, $creation_date, $expiration_date, $email_validation_status, $last_access_date, $language, $include_header, $export_format, $delimiter);
        return $response;
    }

    /**
     * Operation userManagev1userexportWithHttpInfo
     *
     * Export users
     *
     * @param int[] $user_ids User IDs to be exported (required)
     * @param int[] $additional_field_ids Additional fields IDs to be included in export (optional)
     * @param int $user_id If user ID must be included in export (optional)
     * @param int $username If username must be included in export (optional)
     * @param int $first_name If user first name must be included in export (optional)
     * @param int $last_name If user last name must be included in export (optional)
     * @param int $email If user email must be included in export (optional)
     * @param int $creation_date If user creation date must be included in export (optional)
     * @param int $expiration_date If user expiration date must be included in export (optional)
     * @param int $email_validation_status If user expiration date must be included in export (optional)
     * @param int $last_access_date If user last access date must be included in export (optional)
     * @param int $language If user last access date must be included in export (optional)
     * @param int $include_header Include or NOT naming of columns in csv/xls file (optional)
     * @param string $export_format Format of exported file csv/xls file. Options: &amp;quot;csv&amp;quot; or &amp;quot;xls&amp;quot;. Default: &amp;quot;xls&amp;quot; (optional)
     * @param string $delimiter Delimiter for exported csv file/ Default: &amp;quot;,&amp;quot; (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageUserExportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userManagev1userexportWithHttpInfo($user_ids, $additional_field_ids = null, $user_id = null, $username = null, $first_name = null, $last_name = null, $email = null, $creation_date = null, $expiration_date = null, $email_validation_status = null, $last_access_date = null, $language = null, $include_header = null, $export_format = null, $delimiter = null)
    {
        // verify the required parameter 'user_ids' is set
        if ($user_ids === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_ids when calling userManagev1userexport');
        }
        // parse inputs
        $resourcePath = "/manage/v1/user/export";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if (is_array($user_ids)) {
            $user_ids = $this->apiClient->getSerializer()->serializeCollection($user_ids, 'brackets', true);
        }
        if ($user_ids !== null) {
            $queryParams['user_ids'] = $this->apiClient->getSerializer()->toQueryValue($user_ids);
        }
        // query params
        if (is_array($additional_field_ids)) {
            $additional_field_ids = $this->apiClient->getSerializer()->serializeCollection($additional_field_ids, 'brackets', true);
        }
        if ($additional_field_ids !== null) {
            $queryParams['additional_field_ids'] = $this->apiClient->getSerializer()->toQueryValue($additional_field_ids);
        }
        // query params
        if ($user_id !== null) {
            $queryParams['user_id'] = $this->apiClient->getSerializer()->toQueryValue($user_id);
        }
        // query params
        if ($username !== null) {
            $queryParams['username'] = $this->apiClient->getSerializer()->toQueryValue($username);
        }
        // query params
        if ($first_name !== null) {
            $queryParams['first_name'] = $this->apiClient->getSerializer()->toQueryValue($first_name);
        }
        // query params
        if ($last_name !== null) {
            $queryParams['last_name'] = $this->apiClient->getSerializer()->toQueryValue($last_name);
        }
        // query params
        if ($email !== null) {
            $queryParams['email'] = $this->apiClient->getSerializer()->toQueryValue($email);
        }
        // query params
        if ($creation_date !== null) {
            $queryParams['creation_date'] = $this->apiClient->getSerializer()->toQueryValue($creation_date);
        }
        // query params
        if ($expiration_date !== null) {
            $queryParams['expiration_date'] = $this->apiClient->getSerializer()->toQueryValue($expiration_date);
        }
        // query params
        if ($email_validation_status !== null) {
            $queryParams['email_validation_status'] = $this->apiClient->getSerializer()->toQueryValue($email_validation_status);
        }
        // query params
        if ($last_access_date !== null) {
            $queryParams['last_access_date'] = $this->apiClient->getSerializer()->toQueryValue($last_access_date);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = $this->apiClient->getSerializer()->toQueryValue($language);
        }
        // query params
        if ($include_header !== null) {
            $queryParams['include_header'] = $this->apiClient->getSerializer()->toQueryValue($include_header);
        }
        // query params
        if ($export_format !== null) {
            $queryParams['export_format'] = $this->apiClient->getSerializer()->toQueryValue($export_format);
        }
        // query params
        if ($delimiter !== null) {
            $queryParams['delimiter'] = $this->apiClient->getSerializer()->toQueryValue($delimiter);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageUserExportResponse',
                '/manage/v1/user/export'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageUserExportResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageUserExportResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userManagev1userid
     *
     * Updates an existing user with the provided account information
     *
     * @param int $id Id of selected user. (required)
     * @param \Swagger\Client\Model\ManageUserUpdateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageUserUpdateResponse
     */
    public function userManagev1userid($id, $body = null)
    {
        list($response) = $this->userManagev1useridWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation userManagev1useridWithHttpInfo
     *
     * Updates an existing user with the provided account information
     *
     * @param int $id Id of selected user. (required)
     * @param \Swagger\Client\Model\ManageUserUpdateSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageUserUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userManagev1useridWithHttpInfo($id, $body = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling userManagev1userid');
        }
        // parse inputs
        $resourcePath = "/manage/v1/user/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageUserUpdateResponse',
                '/manage/v1/user/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageUserUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageUserUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userManagev1useridUsersettings
     *
     * Get setting information about specific user.
     *
     * @param int $id_user ID of user to get settings (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageUserGetUserSettingsResponse
     */
    public function userManagev1useridUsersettings($id_user)
    {
        list($response) = $this->userManagev1useridUsersettingsWithHttpInfo($id_user);
        return $response;
    }

    /**
     * Operation userManagev1useridUsersettingsWithHttpInfo
     *
     * Get setting information about specific user.
     *
     * @param int $id_user ID of user to get settings (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageUserGetUserSettingsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userManagev1useridUsersettingsWithHttpInfo($id_user)
    {
        // verify the required parameter 'id_user' is set
        if ($id_user === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_user when calling userManagev1useridUsersettings');
        }
        // parse inputs
        $resourcePath = "/manage/v1/user/{id_user}/settings";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id_user !== null) {
            $resourcePath = str_replace(
                "{" . "id_user" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_user),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageUserGetUserSettingsResponse',
                '/manage/v1/user/{id_user}/settings'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageUserGetUserSettingsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageUserGetUserSettingsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userManagev1useridUsersettings_0
     *
     * Set setting information about specific user.
     *
     * @param int $id_user ID of user to save settings (required)
     * @param \Swagger\Client\Model\ManageUserSetUserSettingsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageUserSetUserSettingsResponse
     */
    public function userManagev1useridUsersettings_0($id_user, $body = null)
    {
        list($response) = $this->userManagev1useridUsersettings_0WithHttpInfo($id_user, $body);
        return $response;
    }

    /**
     * Operation userManagev1useridUsersettings_0WithHttpInfo
     *
     * Set setting information about specific user.
     *
     * @param int $id_user ID of user to save settings (required)
     * @param \Swagger\Client\Model\ManageUserSetUserSettingsSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageUserSetUserSettingsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userManagev1useridUsersettings_0WithHttpInfo($id_user, $body = null)
    {
        // verify the required parameter 'id_user' is set
        if ($id_user === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_user when calling userManagev1useridUsersettings_0');
        }
        // parse inputs
        $resourcePath = "/manage/v1/user/{id_user}/settings";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id_user !== null) {
            $resourcePath = str_replace(
                "{" . "id_user" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_user),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageUserSetUserSettingsResponse',
                '/manage/v1/user/{id_user}/settings'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageUserSetUserSettingsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageUserSetUserSettingsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userManagev1useridresend
     *
     * Resend registration email to a pending user
     *
     * @param int $id Id of selected user. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageUserResendResponse
     */
    public function userManagev1useridresend($id)
    {
        list($response) = $this->userManagev1useridresendWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation userManagev1useridresendWithHttpInfo
     *
     * Resend registration email to a pending user
     *
     * @param int $id Id of selected user. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageUserResendResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userManagev1useridresendWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling userManagev1useridresend');
        }
        // parse inputs
        $resourcePath = "/manage/v1/user/{id}/resend";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageUserResendResponse',
                '/manage/v1/user/{id}/resend'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageUserResendResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageUserResendResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userManagev1userimporterFields
     *
     * Returns list of mappable fields for the data importer
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageUserImporterFieldsResponse
     */
    public function userManagev1userimporterFields()
    {
        list($response) = $this->userManagev1userimporterFieldsWithHttpInfo();
        return $response;
    }

    /**
     * Operation userManagev1userimporterFieldsWithHttpInfo
     *
     * Returns list of mappable fields for the data importer
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageUserImporterFieldsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userManagev1userimporterFieldsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/manage/v1/user/importer_fields";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageUserImporterFieldsResponse',
                '/manage/v1/user/importer_fields'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageUserImporterFieldsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageUserImporterFieldsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userManagev1userkeepAlive
     *
     * Keep user session alive
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageUserKeepAliveResponse
     */
    public function userManagev1userkeepAlive()
    {
        list($response) = $this->userManagev1userkeepAliveWithHttpInfo();
        return $response;
    }

    /**
     * Operation userManagev1userkeepAliveWithHttpInfo
     *
     * Keep user session alive
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageUserKeepAliveResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userManagev1userkeepAliveWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/manage/v1/user/keep_alive";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageUserKeepAliveResponse',
                '/manage/v1/user/keep_alive'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageUserKeepAliveResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageUserKeepAliveResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userManagev1userlogin
     *
     * Generate access token for user, by provided username and password
     *
     * @param \Swagger\Client\Model\ManageUserLoginSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageUserLoginResponse
     */
    public function userManagev1userlogin($body = null)
    {
        list($response) = $this->userManagev1userloginWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation userManagev1userloginWithHttpInfo
     *
     * Generate access token for user, by provided username and password
     *
     * @param \Swagger\Client\Model\ManageUserLoginSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageUserLoginResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userManagev1userloginWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/manage/v1/user/login";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageUserLoginResponse',
                '/manage/v1/user/login'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageUserLoginResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageUserLoginResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userManagev1userlogout
     *
     * User logout
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageUserLogoutResponse
     */
    public function userManagev1userlogout()
    {
        list($response) = $this->userManagev1userlogoutWithHttpInfo();
        return $response;
    }

    /**
     * Operation userManagev1userlogoutWithHttpInfo
     *
     * User logout
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageUserLogoutResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userManagev1userlogoutWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/manage/v1/user/logout";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageUserLogoutResponse',
                '/manage/v1/user/logout'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageUserLogoutResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageUserLogoutResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userManagev1usermanagerIdsubordinates
     *
     * Retrieves all the subordinates of a Manager
     *
     * @param int $manager_id ID of manager to get subordinates (required)
     * @param int $hierarchy Type of manager (1 for Direct manager, other codes reserved for future improvements). Default - 1 (optional)
     * @param string $sort_attr Sort by id, username, name, or email of user. Default - id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageUserGetSubordinatesResponse
     */
    public function userManagev1usermanagerIdsubordinates($manager_id, $hierarchy = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null)
    {
        list($response) = $this->userManagev1usermanagerIdsubordinatesWithHttpInfo($manager_id, $hierarchy, $sort_attr, $sort_dir, $page, $page_size, $lang, $get_total_count);
        return $response;
    }

    /**
     * Operation userManagev1usermanagerIdsubordinatesWithHttpInfo
     *
     * Retrieves all the subordinates of a Manager
     *
     * @param int $manager_id ID of manager to get subordinates (required)
     * @param int $hierarchy Type of manager (1 for Direct manager, other codes reserved for future improvements). Default - 1 (optional)
     * @param string $sort_attr Sort by id, username, name, or email of user. Default - id (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param string $lang Language code. Language used to process input parameters, sort data, and provide the output. Default - Platform default language (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageUserGetSubordinatesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userManagev1usermanagerIdsubordinatesWithHttpInfo($manager_id, $hierarchy = null, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $lang = null, $get_total_count = null)
    {
        // verify the required parameter 'manager_id' is set
        if ($manager_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $manager_id when calling userManagev1usermanagerIdsubordinates');
        }
        // parse inputs
        $resourcePath = "/manage/v1/user/{manager_id}/subordinates";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($hierarchy !== null) {
            $queryParams['hierarchy'] = $this->apiClient->getSerializer()->toQueryValue($hierarchy);
        }
        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // path params
        if ($manager_id !== null) {
            $resourcePath = str_replace(
                "{" . "manager_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($manager_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageUserGetSubordinatesResponse',
                '/manage/v1/user/{manager_id}/subordinates'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageUserGetSubordinatesResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageUserGetSubordinatesResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userManagev1usermassEdit
     *
     * Updates an existing users with the provided account information
     *
     * @param \Swagger\Client\Model\ManageUserMassEditSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageUserMassEditResponse
     */
    public function userManagev1usermassEdit($body = null)
    {
        list($response) = $this->userManagev1usermassEditWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation userManagev1usermassEditWithHttpInfo
     *
     * Updates an existing users with the provided account information
     *
     * @param \Swagger\Client\Model\ManageUserMassEditSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageUserMassEditResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userManagev1usermassEditWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/manage/v1/user/mass_edit";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageUserMassEditResponse',
                '/manage/v1/user/mass_edit'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageUserMassEditResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageUserMassEditResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userManagev1usermoveToBranch
     *
     * Move users from given branches to an other ones
     *
     * @param \Swagger\Client\Model\ManageUserMoveToBranchSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageUserMoveToBranchResponse
     */
    public function userManagev1usermoveToBranch($body = null)
    {
        list($response) = $this->userManagev1usermoveToBranchWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation userManagev1usermoveToBranchWithHttpInfo
     *
     * Move users from given branches to an other ones
     *
     * @param \Swagger\Client\Model\ManageUserMoveToBranchSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageUserMoveToBranchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userManagev1usermoveToBranchWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/manage/v1/user/move_to_branch";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageUserMoveToBranchResponse',
                '/manage/v1/user/move_to_branch'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageUserMoveToBranchResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageUserMoveToBranchResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userManagev1userregister
     *
     * User registration
     *
     * @param \Swagger\Client\Model\ManageUserRegisterSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageUserRegisterResponse
     */
    public function userManagev1userregister($body = null)
    {
        list($response) = $this->userManagev1userregisterWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation userManagev1userregisterWithHttpInfo
     *
     * User registration
     *
     * @param \Swagger\Client\Model\ManageUserRegisterSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageUserRegisterResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userManagev1userregisterWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/manage/v1/user/register";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageUserRegisterResponse',
                '/manage/v1/user/register'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageUserRegisterResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageUserRegisterResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userManagev1userreject
     *
     * Reject temporary user
     *
     * @param \Swagger\Client\Model\ManageUserRejectUserSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageUserRejectUserResponse
     */
    public function userManagev1userreject($body = null)
    {
        list($response) = $this->userManagev1userrejectWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation userManagev1userrejectWithHttpInfo
     *
     * Reject temporary user
     *
     * @param \Swagger\Client\Model\ManageUserRejectUserSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageUserRejectUserResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userManagev1userrejectWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/manage/v1/user/reject";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageUserRejectUserResponse',
                '/manage/v1/user/reject'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageUserRejectUserResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageUserRejectUserResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userManagev1userremoveFromBranch
     *
     * Adds users to branches
     *
     * @param \Swagger\Client\Model\ManageUserRemoveFromBranchSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageUserRemoveFromBranchResponse
     */
    public function userManagev1userremoveFromBranch($body = null)
    {
        list($response) = $this->userManagev1userremoveFromBranchWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation userManagev1userremoveFromBranchWithHttpInfo
     *
     * Adds users to branches
     *
     * @param \Swagger\Client\Model\ManageUserRemoveFromBranchSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageUserRemoveFromBranchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userManagev1userremoveFromBranchWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/manage/v1/user/remove_from_branch";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageUserRemoveFromBranchResponse',
                '/manage/v1/user/remove_from_branch'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageUserRemoveFromBranchResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageUserRemoveFromBranchResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userManagev1usersession
     *
     * Get specific information about currently logged user.
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageUserSessionResponse
     */
    public function userManagev1usersession()
    {
        list($response) = $this->userManagev1usersessionWithHttpInfo();
        return $response;
    }

    /**
     * Operation userManagev1usersessionWithHttpInfo
     *
     * Get specific information about currently logged user.
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageUserSessionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userManagev1usersessionWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/manage/v1/user/session";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageUserSessionResponse',
                '/manage/v1/user/session'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageUserSessionResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageUserSessionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userManagev1usersuserIdmanagers
     *
     * Returns the manager of an employee
     *
     * @param int $hierarchy Type of manager  (1 for Direct manager, other codes reserved for future improvements), default - 1 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageUserGetManagerResponse
     */
    public function userManagev1usersuserIdmanagers($hierarchy = null)
    {
        list($response) = $this->userManagev1usersuserIdmanagersWithHttpInfo($hierarchy);
        return $response;
    }

    /**
     * Operation userManagev1usersuserIdmanagersWithHttpInfo
     *
     * Returns the manager of an employee
     *
     * @param int $hierarchy Type of manager  (1 for Direct manager, other codes reserved for future improvements), default - 1 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageUserGetManagerResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userManagev1usersuserIdmanagersWithHttpInfo($hierarchy = null)
    {
        // parse inputs
        $resourcePath = "/manage/v1/users/{user_id}/managers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($hierarchy !== null) {
            $queryParams['hierarchy'] = $this->apiClient->getSerializer()->toQueryValue($hierarchy);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageUserGetManagerResponse',
                '/manage/v1/users/{user_id}/managers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageUserGetManagerResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageUserGetManagerResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userManagev1usertempDetailsidUser
     *
     * Get information from temporary user.
     *
     * @param int $id_user ID of user (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageUserTempDetailsResponse
     */
    public function userManagev1usertempDetailsidUser($id_user)
    {
        list($response) = $this->userManagev1usertempDetailsidUserWithHttpInfo($id_user);
        return $response;
    }

    /**
     * Operation userManagev1usertempDetailsidUserWithHttpInfo
     *
     * Get information from temporary user.
     *
     * @param int $id_user ID of user (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageUserTempDetailsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userManagev1usertempDetailsidUserWithHttpInfo($id_user)
    {
        // verify the required parameter 'id_user' is set
        if ($id_user === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_user when calling userManagev1usertempDetailsidUser');
        }
        // parse inputs
        $resourcePath = "/manage/v1/user/temp_details/{id_user}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id_user !== null) {
            $resourcePath = str_replace(
                "{" . "id_user" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_user),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageUserTempDetailsResponse',
                '/manage/v1/user/temp_details/{id_user}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageUserTempDetailsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageUserTempDetailsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userManagev1useruserId
     *
     * View an User info
     *
     * @param int $user_id ID of the user (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageUserViewResponse
     */
    public function userManagev1useruserId($user_id)
    {
        list($response) = $this->userManagev1useruserIdWithHttpInfo($user_id);
        return $response;
    }

    /**
     * Operation userManagev1useruserIdWithHttpInfo
     *
     * View an User info
     *
     * @param int $user_id ID of the user (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageUserViewResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userManagev1useruserIdWithHttpInfo($user_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling userManagev1useruserId');
        }
        // parse inputs
        $resourcePath = "/manage/v1/user/{user_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageUserViewResponse',
                '/manage/v1/user/{user_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageUserViewResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageUserViewResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userManagev1useruserIdmergeuserId2
     *
     * Retrieve merge users detailed information included first chunk of enrollments, subscriptions, badges, transactions
     *
     * @param int $user_id ID of the source user (required)
     * @param int $user_id_2 ID of the destination user (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageUserDetailsResponse
     */
    public function userManagev1useruserIdmergeuserId2($user_id, $user_id_2)
    {
        list($response) = $this->userManagev1useruserIdmergeuserId2WithHttpInfo($user_id, $user_id_2);
        return $response;
    }

    /**
     * Operation userManagev1useruserIdmergeuserId2WithHttpInfo
     *
     * Retrieve merge users detailed information included first chunk of enrollments, subscriptions, badges, transactions
     *
     * @param int $user_id ID of the source user (required)
     * @param int $user_id_2 ID of the destination user (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageUserDetailsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userManagev1useruserIdmergeuserId2WithHttpInfo($user_id, $user_id_2)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling userManagev1useruserIdmergeuserId2');
        }
        // verify the required parameter 'user_id_2' is set
        if ($user_id_2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id_2 when calling userManagev1useruserIdmergeuserId2');
        }
        // parse inputs
        $resourcePath = "/manage/v1/user/{user_id}/merge/{user_id_2}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($user_id_2 !== null) {
            $resourcePath = str_replace(
                "{" . "user_id_2" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id_2),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageUserDetailsResponse',
                '/manage/v1/user/{user_id}/merge/{user_id_2}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageUserDetailsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageUserDetailsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userManagev1useruserIdmergeuserId2_0
     *
     * Merge the data from one user to another
     *
     * @param int $user_id ID of the source user (required)
     * @param int $user_id_2 ID of the destination user (required)
     * @param \Swagger\Client\Model\ManageUserMergeUsersSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageUserMergeUsersResponse
     */
    public function userManagev1useruserIdmergeuserId2_0($user_id, $user_id_2, $body = null)
    {
        list($response) = $this->userManagev1useruserIdmergeuserId2_0WithHttpInfo($user_id, $user_id_2, $body);
        return $response;
    }

    /**
     * Operation userManagev1useruserIdmergeuserId2_0WithHttpInfo
     *
     * Merge the data from one user to another
     *
     * @param int $user_id ID of the source user (required)
     * @param int $user_id_2 ID of the destination user (required)
     * @param \Swagger\Client\Model\ManageUserMergeUsersSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageUserMergeUsersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userManagev1useruserIdmergeuserId2_0WithHttpInfo($user_id, $user_id_2, $body = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling userManagev1useruserIdmergeuserId2_0');
        }
        // verify the required parameter 'user_id_2' is set
        if ($user_id_2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id_2 when calling userManagev1useruserIdmergeuserId2_0');
        }
        // parse inputs
        $resourcePath = "/manage/v1/user/{user_id}/merge/{user_id_2}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($user_id_2 !== null) {
            $resourcePath = str_replace(
                "{" . "user_id_2" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id_2),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageUserMergeUsersResponse',
                '/manage/v1/user/{user_id}/merge/{user_id_2}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageUserMergeUsersResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageUserMergeUsersResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userManagev1useruserIdmergeuserId2badges
     *
     * List merge users badges
     *
     * @param int $user_id ID of the source user (required)
     * @param int $user_id_2 ID of the destination user (required)
     * @param string $sort_attr Sort by this field, default value - id. Options: id, badge_name (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageUserListBadgesResponse
     */
    public function userManagev1useruserIdmergeuserId2badges($user_id, $user_id_2, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $get_total_count = null)
    {
        list($response) = $this->userManagev1useruserIdmergeuserId2badgesWithHttpInfo($user_id, $user_id_2, $sort_attr, $sort_dir, $page, $page_size, $get_total_count);
        return $response;
    }

    /**
     * Operation userManagev1useruserIdmergeuserId2badgesWithHttpInfo
     *
     * List merge users badges
     *
     * @param int $user_id ID of the source user (required)
     * @param int $user_id_2 ID of the destination user (required)
     * @param string $sort_attr Sort by this field, default value - id. Options: id, badge_name (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageUserListBadgesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userManagev1useruserIdmergeuserId2badgesWithHttpInfo($user_id, $user_id_2, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $get_total_count = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling userManagev1useruserIdmergeuserId2badges');
        }
        // verify the required parameter 'user_id_2' is set
        if ($user_id_2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id_2 when calling userManagev1useruserIdmergeuserId2badges');
        }
        // parse inputs
        $resourcePath = "/manage/v1/user/{user_id}/merge/{user_id_2}/badges";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($user_id_2 !== null) {
            $resourcePath = str_replace(
                "{" . "user_id_2" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id_2),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageUserListBadgesResponse',
                '/manage/v1/user/{user_id}/merge/{user_id_2}/badges'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageUserListBadgesResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageUserListBadgesResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userManagev1useruserIdmergeuserId2enrollments
     *
     * Retrieve all course enrollments for users to merge
     *
     * @param int $user_id ID of the source user (required)
     * @param int $user_id_2 ID of the destination user (required)
     * @param string $sort_attr Sort by this field, default value - id. Options: id, course_name (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageUserListEnrollmentsResponse
     */
    public function userManagev1useruserIdmergeuserId2enrollments($user_id, $user_id_2, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $get_total_count = null)
    {
        list($response) = $this->userManagev1useruserIdmergeuserId2enrollmentsWithHttpInfo($user_id, $user_id_2, $sort_attr, $sort_dir, $page, $page_size, $get_total_count);
        return $response;
    }

    /**
     * Operation userManagev1useruserIdmergeuserId2enrollmentsWithHttpInfo
     *
     * Retrieve all course enrollments for users to merge
     *
     * @param int $user_id ID of the source user (required)
     * @param int $user_id_2 ID of the destination user (required)
     * @param string $sort_attr Sort by this field, default value - id. Options: id, course_name (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageUserListEnrollmentsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userManagev1useruserIdmergeuserId2enrollmentsWithHttpInfo($user_id, $user_id_2, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $get_total_count = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling userManagev1useruserIdmergeuserId2enrollments');
        }
        // verify the required parameter 'user_id_2' is set
        if ($user_id_2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id_2 when calling userManagev1useruserIdmergeuserId2enrollments');
        }
        // parse inputs
        $resourcePath = "/manage/v1/user/{user_id}/merge/{user_id_2}/enrollments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($user_id_2 !== null) {
            $resourcePath = str_replace(
                "{" . "user_id_2" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id_2),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageUserListEnrollmentsResponse',
                '/manage/v1/user/{user_id}/merge/{user_id_2}/enrollments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageUserListEnrollmentsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageUserListEnrollmentsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userManagev1useruserIdmergeuserId2subscriptions
     *
     * Retrieve all subscriptions for users to merge
     *
     * @param int $user_id ID of the source user (required)
     * @param int $user_id_2 ID of the destination user (required)
     * @param string $sort_attr Sort by this field, default value - id. Options: id, bundle_name (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageUserListSubscriptionsResponse
     */
    public function userManagev1useruserIdmergeuserId2subscriptions($user_id, $user_id_2, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $get_total_count = null)
    {
        list($response) = $this->userManagev1useruserIdmergeuserId2subscriptionsWithHttpInfo($user_id, $user_id_2, $sort_attr, $sort_dir, $page, $page_size, $get_total_count);
        return $response;
    }

    /**
     * Operation userManagev1useruserIdmergeuserId2subscriptionsWithHttpInfo
     *
     * Retrieve all subscriptions for users to merge
     *
     * @param int $user_id ID of the source user (required)
     * @param int $user_id_2 ID of the destination user (required)
     * @param string $sort_attr Sort by this field, default value - id. Options: id, bundle_name (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageUserListSubscriptionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userManagev1useruserIdmergeuserId2subscriptionsWithHttpInfo($user_id, $user_id_2, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $get_total_count = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling userManagev1useruserIdmergeuserId2subscriptions');
        }
        // verify the required parameter 'user_id_2' is set
        if ($user_id_2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id_2 when calling userManagev1useruserIdmergeuserId2subscriptions');
        }
        // parse inputs
        $resourcePath = "/manage/v1/user/{user_id}/merge/{user_id_2}/subscriptions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($user_id_2 !== null) {
            $resourcePath = str_replace(
                "{" . "user_id_2" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id_2),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageUserListSubscriptionsResponse',
                '/manage/v1/user/{user_id}/merge/{user_id_2}/subscriptions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageUserListSubscriptionsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageUserListSubscriptionsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userManagev1useruserIdmergeuserId2transactions
     *
     * List merge users transactions
     *
     * @param int $user_id ID of the source user (required)
     * @param int $user_id_2 ID of the destination user (required)
     * @param string $sort_attr Sort by this field, default value - id. Options: id, date_creation (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageUserListTransactionsResponse
     */
    public function userManagev1useruserIdmergeuserId2transactions($user_id, $user_id_2, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $get_total_count = null)
    {
        list($response) = $this->userManagev1useruserIdmergeuserId2transactionsWithHttpInfo($user_id, $user_id_2, $sort_attr, $sort_dir, $page, $page_size, $get_total_count);
        return $response;
    }

    /**
     * Operation userManagev1useruserIdmergeuserId2transactionsWithHttpInfo
     *
     * List merge users transactions
     *
     * @param int $user_id ID of the source user (required)
     * @param int $user_id_2 ID of the destination user (required)
     * @param string $sort_attr Sort by this field, default value - id. Options: id, date_creation (optional)
     * @param string $sort_dir Sorting Direction: asc &#x3D; Ascending, desc &#x3D; descending, default - desc (optional)
     * @param int $page Page to return, default 1 (optional)
     * @param int $page_size Maximum number of results per page, default 200 (optional)
     * @param int $get_total_count If 1 the count of found items will be returned. Options: 0, 1 default 0 (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageUserListTransactionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userManagev1useruserIdmergeuserId2transactionsWithHttpInfo($user_id, $user_id_2, $sort_attr = null, $sort_dir = null, $page = null, $page_size = null, $get_total_count = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling userManagev1useruserIdmergeuserId2transactions');
        }
        // verify the required parameter 'user_id_2' is set
        if ($user_id_2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id_2 when calling userManagev1useruserIdmergeuserId2transactions');
        }
        // parse inputs
        $resourcePath = "/manage/v1/user/{user_id}/merge/{user_id_2}/transactions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($sort_attr !== null) {
            $queryParams['sort_attr'] = $this->apiClient->getSerializer()->toQueryValue($sort_attr);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sort_dir'] = $this->apiClient->getSerializer()->toQueryValue($sort_dir);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($get_total_count !== null) {
            $queryParams['get_total_count'] = $this->apiClient->getSerializer()->toQueryValue($get_total_count);
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($user_id_2 !== null) {
            $resourcePath = str_replace(
                "{" . "user_id_2" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id_2),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageUserListTransactionsResponse',
                '/manage/v1/user/{user_id}/merge/{user_id_2}/transactions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageUserListTransactionsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageUserListTransactionsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userManagev1useruseridpassword
     *
     * Change user password
     *
     * @param string $userid The id of the user (required)
     * @param \Swagger\Client\Model\ManageUserPasswordSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ManageUserPasswordResponse
     */
    public function userManagev1useruseridpassword($userid, $body = null)
    {
        list($response) = $this->userManagev1useruseridpasswordWithHttpInfo($userid, $body);
        return $response;
    }

    /**
     * Operation userManagev1useruseridpasswordWithHttpInfo
     *
     * Change user password
     *
     * @param string $userid The id of the user (required)
     * @param \Swagger\Client\Model\ManageUserPasswordSchema $body Raw Body (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ManageUserPasswordResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userManagev1useruseridpasswordWithHttpInfo($userid, $body = null)
    {
        // verify the required parameter 'userid' is set
        if ($userid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $userid when calling userManagev1useruseridpassword');
        }
        // parse inputs
        $resourcePath = "/manage/v1/user/{userid}/password";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($userid !== null) {
            $resourcePath = str_replace(
                "{" . "userid" . "}",
                $this->apiClient->getSerializer()->toPathValue($userid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ManageUserPasswordResponse',
                '/manage/v1/user/{userid}/password'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ManageUserPasswordResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ManageUserPasswordResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
