<?php
/**
 * SkillReportsJohariEmployeeData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * SkillReportsJohariEmployeeData Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SkillReportsJohariEmployeeData implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SkillReportsJohariEmployeeData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'missing_evaluation' => '\Swagger\Client\Model\SkillReportsJohariEmployeeMissingEvaluation',
        'missing_evaluation_count' => 'int',
        'manager_evaluation_date' => 'int',
        'self_evaluation_date' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'missing_evaluation' => 'missing_evaluation',
        'missing_evaluation_count' => 'missing_evaluation_count',
        'manager_evaluation_date' => 'manager_evaluation_date',
        'self_evaluation_date' => 'self_evaluation_date'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'missing_evaluation' => 'setMissingEvaluation',
        'missing_evaluation_count' => 'setMissingEvaluationCount',
        'manager_evaluation_date' => 'setManagerEvaluationDate',
        'self_evaluation_date' => 'setSelfEvaluationDate'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'missing_evaluation' => 'getMissingEvaluation',
        'missing_evaluation_count' => 'getMissingEvaluationCount',
        'manager_evaluation_date' => 'getManagerEvaluationDate',
        'self_evaluation_date' => 'getSelfEvaluationDate'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['missing_evaluation'] = isset($data['missing_evaluation']) ? $data['missing_evaluation'] : null;
        $this->container['missing_evaluation_count'] = isset($data['missing_evaluation_count']) ? $data['missing_evaluation_count'] : null;
        $this->container['manager_evaluation_date'] = isset($data['manager_evaluation_date']) ? $data['manager_evaluation_date'] : null;
        $this->container['self_evaluation_date'] = isset($data['self_evaluation_date']) ? $data['self_evaluation_date'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['missing_evaluation'] === null) {
            $invalid_properties[] = "'missing_evaluation' can't be null";
        }
        if ($this->container['missing_evaluation_count'] === null) {
            $invalid_properties[] = "'missing_evaluation_count' can't be null";
        }
        if ($this->container['manager_evaluation_date'] === null) {
            $invalid_properties[] = "'manager_evaluation_date' can't be null";
        }
        if ($this->container['self_evaluation_date'] === null) {
            $invalid_properties[] = "'self_evaluation_date' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['missing_evaluation'] === null) {
            return false;
        }
        if ($this->container['missing_evaluation_count'] === null) {
            return false;
        }
        if ($this->container['manager_evaluation_date'] === null) {
            return false;
        }
        if ($this->container['self_evaluation_date'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets missing_evaluation
     * @return \Swagger\Client\Model\SkillReportsJohariEmployeeMissingEvaluation
     */
    public function getMissingEvaluation()
    {
        return $this->container['missing_evaluation'];
    }

    /**
     * Sets missing_evaluation
     * @param \Swagger\Client\Model\SkillReportsJohariEmployeeMissingEvaluation $missing_evaluation Array of not evaluated skills
     * @return $this
     */
    public function setMissingEvaluation($missing_evaluation)
    {
        $this->container['missing_evaluation'] = $missing_evaluation;

        return $this;
    }

    /**
     * Gets missing_evaluation_count
     * @return int
     */
    public function getMissingEvaluationCount()
    {
        return $this->container['missing_evaluation_count'];
    }

    /**
     * Sets missing_evaluation_count
     * @param int $missing_evaluation_count Number of missing evaluations
     * @return $this
     */
    public function setMissingEvaluationCount($missing_evaluation_count)
    {
        $this->container['missing_evaluation_count'] = $missing_evaluation_count;

        return $this;
    }

    /**
     * Gets manager_evaluation_date
     * @return int
     */
    public function getManagerEvaluationDate()
    {
        return $this->container['manager_evaluation_date'];
    }

    /**
     * Sets manager_evaluation_date
     * @param int $manager_evaluation_date Number of days of the oldest user manager evaluation used
     * @return $this
     */
    public function setManagerEvaluationDate($manager_evaluation_date)
    {
        $this->container['manager_evaluation_date'] = $manager_evaluation_date;

        return $this;
    }

    /**
     * Gets self_evaluation_date
     * @return int
     */
    public function getSelfEvaluationDate()
    {
        return $this->container['self_evaluation_date'];
    }

    /**
     * Sets self_evaluation_date
     * @param int $self_evaluation_date Number of days of the oldest user self evaluation used
     * @return $this
     */
    public function setSelfEvaluationDate($self_evaluation_date)
    {
        $this->container['self_evaluation_date'] = $self_evaluation_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


