<?php
/**
 * LearnLpViewData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * LearnLpViewData Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class LearnLpViewData implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'LearnLpViewData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'settings' => '\Swagger\Client\Model\LearnLpViewSettings',
        'total_duration' => 'int',
        'deeplink' => 'string',
        'enrollment' => '\Swagger\Client\Model\LearnLpViewEnrollment',
        'courses' => '\Swagger\Client\Model\LearnLpViewCourses[]',
        'id' => 'int',
        'create_date' => 'string',
        'last_played_course' => 'int',
        'image' => 'string',
        'subscription' => '\Swagger\Client\Model\LearnLpViewSubscription[]',
        'ecommerce' => '\Swagger\Client\Model\LearnLpViewEcommerce',
        'status' => 'string',
        'shopify_product_meaningful_id' => 'string',
        'name' => 'string',
        'complete_percent' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'settings' => 'settings',
        'total_duration' => 'total_duration',
        'deeplink' => 'deeplink',
        'enrollment' => 'enrollment',
        'courses' => 'courses',
        'id' => 'id',
        'create_date' => 'create_date',
        'last_played_course' => 'last_played_course',
        'image' => 'image',
        'subscription' => 'subscription',
        'ecommerce' => 'ecommerce',
        'status' => 'status',
        'shopify_product_meaningful_id' => 'shopify_product_meaningful_id',
        'name' => 'name',
        'complete_percent' => 'complete_percent'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'settings' => 'setSettings',
        'total_duration' => 'setTotalDuration',
        'deeplink' => 'setDeeplink',
        'enrollment' => 'setEnrollment',
        'courses' => 'setCourses',
        'id' => 'setId',
        'create_date' => 'setCreateDate',
        'last_played_course' => 'setLastPlayedCourse',
        'image' => 'setImage',
        'subscription' => 'setSubscription',
        'ecommerce' => 'setEcommerce',
        'status' => 'setStatus',
        'shopify_product_meaningful_id' => 'setShopifyProductMeaningfulId',
        'name' => 'setName',
        'complete_percent' => 'setCompletePercent'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'settings' => 'getSettings',
        'total_duration' => 'getTotalDuration',
        'deeplink' => 'getDeeplink',
        'enrollment' => 'getEnrollment',
        'courses' => 'getCourses',
        'id' => 'getId',
        'create_date' => 'getCreateDate',
        'last_played_course' => 'getLastPlayedCourse',
        'image' => 'getImage',
        'subscription' => 'getSubscription',
        'ecommerce' => 'getEcommerce',
        'status' => 'getStatus',
        'shopify_product_meaningful_id' => 'getShopifyProductMeaningfulId',
        'name' => 'getName',
        'complete_percent' => 'getCompletePercent'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const STATUS_NOT_SUBSCRIBED = 'not_subscribed';
    const STATUS_SUBSCRIBED = 'subscribed';
    const STATUS_IN_PROGRESS = 'in_progress';
    const STATUS_COMPLETED = 'completed';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_NOT_SUBSCRIBED,
            self::STATUS_SUBSCRIBED,
            self::STATUS_IN_PROGRESS,
            self::STATUS_COMPLETED,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['settings'] = isset($data['settings']) ? $data['settings'] : null;
        $this->container['total_duration'] = isset($data['total_duration']) ? $data['total_duration'] : null;
        $this->container['deeplink'] = isset($data['deeplink']) ? $data['deeplink'] : null;
        $this->container['enrollment'] = isset($data['enrollment']) ? $data['enrollment'] : null;
        $this->container['courses'] = isset($data['courses']) ? $data['courses'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['create_date'] = isset($data['create_date']) ? $data['create_date'] : null;
        $this->container['last_played_course'] = isset($data['last_played_course']) ? $data['last_played_course'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['subscription'] = isset($data['subscription']) ? $data['subscription'] : null;
        $this->container['ecommerce'] = isset($data['ecommerce']) ? $data['ecommerce'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['shopify_product_meaningful_id'] = isset($data['shopify_product_meaningful_id']) ? $data['shopify_product_meaningful_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['complete_percent'] = isset($data['complete_percent']) ? $data['complete_percent'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['code'] === null) {
            $invalid_properties[] = "'code' can't be null";
        }
        if ($this->container['settings'] === null) {
            $invalid_properties[] = "'settings' can't be null";
        }
        if ($this->container['deeplink'] === null) {
            $invalid_properties[] = "'deeplink' can't be null";
        }
        if ($this->container['enrollment'] === null) {
            $invalid_properties[] = "'enrollment' can't be null";
        }
        if ($this->container['courses'] === null) {
            $invalid_properties[] = "'courses' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['create_date'] === null) {
            $invalid_properties[] = "'create_date' can't be null";
        }
        if ($this->container['subscription'] === null) {
            $invalid_properties[] = "'subscription' can't be null";
        }
        if ($this->container['ecommerce'] === null) {
            $invalid_properties[] = "'ecommerce' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalid_properties[] = "'status' can't be null";
        }
        $allowed_values = ["not_subscribed", "subscribed", "in_progress", "completed"];
        if (!in_array($this->container['status'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'status', must be one of 'not_subscribed', 'subscribed', 'in_progress', 'completed'.";
        }

        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['complete_percent'] === null) {
            $invalid_properties[] = "'complete_percent' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['code'] === null) {
            return false;
        }
        if ($this->container['settings'] === null) {
            return false;
        }
        if ($this->container['deeplink'] === null) {
            return false;
        }
        if ($this->container['enrollment'] === null) {
            return false;
        }
        if ($this->container['courses'] === null) {
            return false;
        }
        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['create_date'] === null) {
            return false;
        }
        if ($this->container['subscription'] === null) {
            return false;
        }
        if ($this->container['ecommerce'] === null) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        $allowed_values = ["not_subscribed", "subscribed", "in_progress", "completed"];
        if (!in_array($this->container['status'], $allowed_values)) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['complete_percent'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets code
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     * @param string $code Code of the learning plan
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets settings
     * @return \Swagger\Client\Model\LearnLpViewSettings
     */
    public function getSettings()
    {
        return $this->container['settings'];
    }

    /**
     * Sets settings
     * @param \Swagger\Client\Model\LearnLpViewSettings $settings Object with the settings of the learning plan
     * @return $this
     */
    public function setSettings($settings)
    {
        $this->container['settings'] = $settings;

        return $this;
    }

    /**
     * Gets total_duration
     * @return int
     */
    public function getTotalDuration()
    {
        return $this->container['total_duration'];
    }

    /**
     * Sets total_duration
     * @param int $total_duration The calculated total duration of the learning plan that is the result of the sum of all course duration times for all courses in the learning plan
     * @return $this
     */
    public function setTotalDuration($total_duration)
    {
        $this->container['total_duration'] = $total_duration;

        return $this;
    }

    /**
     * Gets deeplink
     * @return string
     */
    public function getDeeplink()
    {
        return $this->container['deeplink'];
    }

    /**
     * Sets deeplink
     * @param string $deeplink Only available if LP has deeplinking enabled
     * @return $this
     */
    public function setDeeplink($deeplink)
    {
        $this->container['deeplink'] = $deeplink;

        return $this;
    }

    /**
     * Gets enrollment
     * @return \Swagger\Client\Model\LearnLpViewEnrollment
     */
    public function getEnrollment()
    {
        return $this->container['enrollment'];
    }

    /**
     * Sets enrollment
     * @param \Swagger\Client\Model\LearnLpViewEnrollment $enrollment URL to access the thumbnail image of the learning plan
     * @return $this
     */
    public function setEnrollment($enrollment)
    {
        $this->container['enrollment'] = $enrollment;

        return $this;
    }

    /**
     * Gets courses
     * @return \Swagger\Client\Model\LearnLpViewCourses[]
     */
    public function getCourses()
    {
        return $this->container['courses'];
    }

    /**
     * Sets courses
     * @param \Swagger\Client\Model\LearnLpViewCourses[] $courses An array containing course object that are in this learning plan
     * @return $this
     */
    public function setCourses($courses)
    {
        $this->container['courses'] = $courses;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Unique ID of the learning plan
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets create_date
     * @return string
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     * @param string $create_date The date when the learning plan was created
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets last_played_course
     * @return int
     */
    public function getLastPlayedCourse()
    {
        return $this->container['last_played_course'];
    }

    /**
     * Sets last_played_course
     * @param int $last_played_course The last played course by the current user
     * @return $this
     */
    public function setLastPlayedCourse($last_played_course)
    {
        $this->container['last_played_course'] = $last_played_course;

        return $this;
    }

    /**
     * Gets image
     * @return string
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     * @param string $image URL to access the thumbnail image of the learning plan
     * @return $this
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets subscription
     * @return \Swagger\Client\Model\LearnLpViewSubscription[]
     */
    public function getSubscription()
    {
        return $this->container['subscription'];
    }

    /**
     * Sets subscription
     * @param \Swagger\Client\Model\LearnLpViewSubscription[] $subscription Subscription information
     * @return $this
     */
    public function setSubscription($subscription)
    {
        $this->container['subscription'] = $subscription;

        return $this;
    }

    /**
     * Gets ecommerce
     * @return \Swagger\Client\Model\LearnLpViewEcommerce
     */
    public function getEcommerce()
    {
        return $this->container['ecommerce'];
    }

    /**
     * Sets ecommerce
     * @param \Swagger\Client\Model\LearnLpViewEcommerce $ecommerce Ecommerse data for the learning plan
     * @return $this
     */
    public function setEcommerce($ecommerce)
    {
        $this->container['ecommerce'] = $ecommerce;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status Status of the user in the learning plan
     * @return $this
     */
    public function setStatus($status)
    {
        $allowed_values = array('not_subscribed', 'subscribed', 'in_progress', 'completed');
        if ((!in_array($status, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'status', must be one of 'not_subscribed', 'subscribed', 'in_progress', 'completed'");
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets shopify_product_meaningful_id
     * @return string
     */
    public function getShopifyProductMeaningfulId()
    {
        return $this->container['shopify_product_meaningful_id'];
    }

    /**
     * Sets shopify_product_meaningful_id
     * @param string $shopify_product_meaningful_id Shopify product meaningful ID
     * @return $this
     */
    public function setShopifyProductMeaningfulId($shopify_product_meaningful_id)
    {
        $this->container['shopify_product_meaningful_id'] = $shopify_product_meaningful_id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Name of the learning plan
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets complete_percent
     * @return int
     */
    public function getCompletePercent()
    {
        return $this->container['complete_percent'];
    }

    /**
     * Sets complete_percent
     * @param int $complete_percent The percentage of the current LP completed by the user
     * @return $this
     */
    public function setCompletePercent($complete_percent)
    {
        $this->container['complete_percent'] = $complete_percent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


