<?php
/**
 * ManageJobCreateSchema
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ManageJobCreateSchema Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ManageJobCreateSchema implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ManageJobCreateSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'chunk_size' => 'int',
        'endpoint' => 'string',
        'type' => 'string',
        'notify_email' => 'string',
        'data_source' => '\Swagger\Client\Model\ManageJobCreateDataSource',
        'notify' => 'bool',
        'method' => 'string',
        'name' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'chunk_size' => 'chunk_size',
        'endpoint' => 'endpoint',
        'type' => 'type',
        'notify_email' => 'notify_email',
        'data_source' => 'data_source',
        'notify' => 'notify',
        'method' => 'method',
        'name' => 'name'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'chunk_size' => 'setChunkSize',
        'endpoint' => 'setEndpoint',
        'type' => 'setType',
        'notify_email' => 'setNotifyEmail',
        'data_source' => 'setDataSource',
        'notify' => 'setNotify',
        'method' => 'setMethod',
        'name' => 'setName'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'chunk_size' => 'getChunkSize',
        'endpoint' => 'getEndpoint',
        'type' => 'getType',
        'notify_email' => 'getNotifyEmail',
        'data_source' => 'getDataSource',
        'notify' => 'getNotify',
        'method' => 'getMethod',
        'name' => 'getName'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const TYPE_IMPORTER = 'importer';
    const TYPE_API = 'api';
    const METHOD_GET = 'GET';
    const METHOD_POST = 'POST';
    const METHOD_PUT = 'PUT';
    const METHOD_DELETE = 'DELETE';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_IMPORTER,
            self::TYPE_API,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getMethodAllowableValues()
    {
        return [
            self::METHOD_GET,
            self::METHOD_POST,
            self::METHOD_PUT,
            self::METHOD_DELETE,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['chunk_size'] = isset($data['chunk_size']) ? $data['chunk_size'] : null;
        $this->container['endpoint'] = isset($data['endpoint']) ? $data['endpoint'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['notify_email'] = isset($data['notify_email']) ? $data['notify_email'] : null;
        $this->container['data_source'] = isset($data['data_source']) ? $data['data_source'] : null;
        $this->container['notify'] = isset($data['notify']) ? $data['notify'] : null;
        $this->container['method'] = isset($data['method']) ? $data['method'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['endpoint'] === null) {
            $invalid_properties[] = "'endpoint' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        $allowed_values = ["importer", "api"];
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'type', must be one of 'importer', 'api'.";
        }

        if ($this->container['data_source'] === null) {
            $invalid_properties[] = "'data_source' can't be null";
        }
        if ($this->container['method'] === null) {
            $invalid_properties[] = "'method' can't be null";
        }
        $allowed_values = ["GET", "POST", "PUT", "DELETE"];
        if (!in_array($this->container['method'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'method', must be one of 'GET', 'POST', 'PUT', 'DELETE'.";
        }

        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['endpoint'] === null) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        $allowed_values = ["importer", "api"];
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }
        if ($this->container['data_source'] === null) {
            return false;
        }
        if ($this->container['method'] === null) {
            return false;
        }
        $allowed_values = ["GET", "POST", "PUT", "DELETE"];
        if (!in_array($this->container['method'], $allowed_values)) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets chunk_size
     * @return int
     */
    public function getChunkSize()
    {
        return $this->container['chunk_size'];
    }

    /**
     * Sets chunk_size
     * @param int $chunk_size The maximum size of the chunk that the endpoint accepts. If not provided, it defaults to 100
     * @return $this
     */
    public function setChunkSize($chunk_size)
    {
        $this->container['chunk_size'] = $chunk_size;

        return $this;
    }

    /**
     * Gets endpoint
     * @return string
     */
    public function getEndpoint()
    {
        return $this->container['endpoint'];
    }

    /**
     * Sets endpoint
     * @param string $endpoint The endpoint of the batch API that will process each chunk of records and return errors &amp; output (e.g. &quot;/manage/v1/user/batch&quot;)
     * @return $this
     */
    public function setEndpoint($endpoint)
    {
        $this->container['endpoint'] = $endpoint;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type The type of data source
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = array('importer', 'api');
        if ((!in_array($type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'type', must be one of 'importer', 'api'");
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets notify_email
     * @return string
     */
    public function getNotifyEmail()
    {
        return $this->container['notify_email'];
    }

    /**
     * Sets notify_email
     * @param string $notify_email Notifications will be sent to this email, if it's empty they will be sent to the user that created the background job
     * @return $this
     */
    public function setNotifyEmail($notify_email)
    {
        $this->container['notify_email'] = $notify_email;

        return $this;
    }

    /**
     * Gets data_source
     * @return \Swagger\Client\Model\ManageJobCreateDataSource
     */
    public function getDataSource()
    {
        return $this->container['data_source'];
    }

    /**
     * Sets data_source
     * @param \Swagger\Client\Model\ManageJobCreateDataSource $data_source An object containing data source configuration params specific of the data_source type. For type = &quot;importer&quot;, it will contain the importer preset used to trigger the import job; for type = &quot;api&quot;, it contains an array of records to be cached and processed.
     * @return $this
     */
    public function setDataSource($data_source)
    {
        $this->container['data_source'] = $data_source;

        return $this;
    }

    /**
     * Gets notify
     * @return bool
     */
    public function getNotify()
    {
        return $this->container['notify'];
    }

    /**
     * Sets notify
     * @param bool $notify Whether the job executor should send an email to the author when the job is completed state. Default: true
     * @return $this
     */
    public function setNotify($notify)
    {
        $this->container['notify'] = $notify;

        return $this;
    }

    /**
     * Gets method
     * @return string
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     * @param string $method The HTTP method to use when calling the &quot;endpoint&quot;
     * @return $this
     */
    public function setMethod($method)
    {
        $allowed_values = array('GET', 'POST', 'PUT', 'DELETE');
        if ((!in_array($method, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'method', must be one of 'GET', 'POST', 'PUT', 'DELETE'");
        }
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Job title (e.g. &quot;Importing users from CSV&quot;)
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


