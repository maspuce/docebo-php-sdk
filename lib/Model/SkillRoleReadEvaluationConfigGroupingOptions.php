<?php
/**
 * SkillRoleReadEvaluationConfigGroupingOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * SkillRoleReadEvaluationConfigGroupingOptions Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SkillRoleReadEvaluationConfigGroupingOptions implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SkillRoleReadEvaluationConfigGroupingOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        '_6_months' => 'string',
        '_1_year' => 'string',
        '_4_months' => 'string',
        '_3_months' => 'string',
        '_1_month' => 'string',
        '_1_week' => 'string',
        '_2_weeks' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        '_6_months' => '6_MONTHS',
        '_1_year' => '1_YEAR',
        '_4_months' => '4_MONTHS',
        '_3_months' => '3_MONTHS',
        '_1_month' => '1_MONTH',
        '_1_week' => '1_WEEK',
        '_2_weeks' => '2_WEEKS'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        '_6_months' => 'set6Months',
        '_1_year' => 'set1Year',
        '_4_months' => 'set4Months',
        '_3_months' => 'set3Months',
        '_1_month' => 'set1Month',
        '_1_week' => 'set1Week',
        '_2_weeks' => 'set2Weeks'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        '_6_months' => 'get6Months',
        '_1_year' => 'get1Year',
        '_4_months' => 'get4Months',
        '_3_months' => 'get3Months',
        '_1_month' => 'get1Month',
        '_1_week' => 'get1Week',
        '_2_weeks' => 'get2Weeks'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_6_months'] = isset($data['_6_months']) ? $data['_6_months'] : null;
        $this->container['_1_year'] = isset($data['_1_year']) ? $data['_1_year'] : null;
        $this->container['_4_months'] = isset($data['_4_months']) ? $data['_4_months'] : null;
        $this->container['_3_months'] = isset($data['_3_months']) ? $data['_3_months'] : null;
        $this->container['_1_month'] = isset($data['_1_month']) ? $data['_1_month'] : null;
        $this->container['_1_week'] = isset($data['_1_week']) ? $data['_1_week'] : null;
        $this->container['_2_weeks'] = isset($data['_2_weeks']) ? $data['_2_weeks'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['_6_months'] === null) {
            $invalid_properties[] = "'_6_months' can't be null";
        }
        if ($this->container['_1_year'] === null) {
            $invalid_properties[] = "'_1_year' can't be null";
        }
        if ($this->container['_4_months'] === null) {
            $invalid_properties[] = "'_4_months' can't be null";
        }
        if ($this->container['_3_months'] === null) {
            $invalid_properties[] = "'_3_months' can't be null";
        }
        if ($this->container['_1_month'] === null) {
            $invalid_properties[] = "'_1_month' can't be null";
        }
        if ($this->container['_1_week'] === null) {
            $invalid_properties[] = "'_1_week' can't be null";
        }
        if ($this->container['_2_weeks'] === null) {
            $invalid_properties[] = "'_2_weeks' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['_6_months'] === null) {
            return false;
        }
        if ($this->container['_1_year'] === null) {
            return false;
        }
        if ($this->container['_4_months'] === null) {
            return false;
        }
        if ($this->container['_3_months'] === null) {
            return false;
        }
        if ($this->container['_1_month'] === null) {
            return false;
        }
        if ($this->container['_1_week'] === null) {
            return false;
        }
        if ($this->container['_2_weeks'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets _6_months
     * @return string
     */
    public function get6Months()
    {
        return $this->container['_6_months'];
    }

    /**
     * Sets _6_months
     * @param string $_6_months Grouping every 6 months
     * @return $this
     */
    public function set6Months($_6_months)
    {
        $this->container['_6_months'] = $_6_months;

        return $this;
    }

    /**
     * Gets _1_year
     * @return string
     */
    public function get1Year()
    {
        return $this->container['_1_year'];
    }

    /**
     * Sets _1_year
     * @param string $_1_year Grouping every year
     * @return $this
     */
    public function set1Year($_1_year)
    {
        $this->container['_1_year'] = $_1_year;

        return $this;
    }

    /**
     * Gets _4_months
     * @return string
     */
    public function get4Months()
    {
        return $this->container['_4_months'];
    }

    /**
     * Sets _4_months
     * @param string $_4_months Grouping every 4 months
     * @return $this
     */
    public function set4Months($_4_months)
    {
        $this->container['_4_months'] = $_4_months;

        return $this;
    }

    /**
     * Gets _3_months
     * @return string
     */
    public function get3Months()
    {
        return $this->container['_3_months'];
    }

    /**
     * Sets _3_months
     * @param string $_3_months Grouping every 3 months
     * @return $this
     */
    public function set3Months($_3_months)
    {
        $this->container['_3_months'] = $_3_months;

        return $this;
    }

    /**
     * Gets _1_month
     * @return string
     */
    public function get1Month()
    {
        return $this->container['_1_month'];
    }

    /**
     * Sets _1_month
     * @param string $_1_month Grouping every month
     * @return $this
     */
    public function set1Month($_1_month)
    {
        $this->container['_1_month'] = $_1_month;

        return $this;
    }

    /**
     * Gets _1_week
     * @return string
     */
    public function get1Week()
    {
        return $this->container['_1_week'];
    }

    /**
     * Sets _1_week
     * @param string $_1_week Grouping weekly
     * @return $this
     */
    public function set1Week($_1_week)
    {
        $this->container['_1_week'] = $_1_week;

        return $this;
    }

    /**
     * Gets _2_weeks
     * @return string
     */
    public function get2Weeks()
    {
        return $this->container['_2_weeks'];
    }

    /**
     * Sets _2_weeks
     * @param string $_2_weeks Grouping every 2 weeks
     * @return $this
     */
    public function set2Weeks($_2_weeks)
    {
        $this->container['_2_weeks'] = $_2_weeks;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


