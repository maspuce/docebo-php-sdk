<?php
/**
 * SharePlaylistsCreateSchema
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * SharePlaylistsCreateSchema Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SharePlaylistsCreateSchema implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SharePlaylistsCreateSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'channels' => 'int[]',
        'title' => 'string',
        'id_asset' => 'int',
        'is_private' => 'int',
        'description' => 'string',
        'id_source' => 'int',
        'tags' => 'int[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'channels' => 'channels',
        'title' => 'title',
        'id_asset' => 'id_asset',
        'is_private' => 'is_private',
        'description' => 'description',
        'id_source' => 'id_source',
        'tags' => 'tags'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'channels' => 'setChannels',
        'title' => 'setTitle',
        'id_asset' => 'setIdAsset',
        'is_private' => 'setIsPrivate',
        'description' => 'setDescription',
        'id_source' => 'setIdSource',
        'tags' => 'setTags'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'channels' => 'getChannels',
        'title' => 'getTitle',
        'id_asset' => 'getIdAsset',
        'is_private' => 'getIsPrivate',
        'description' => 'getDescription',
        'id_source' => 'getIdSource',
        'tags' => 'getTags'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['channels'] = isset($data['channels']) ? $data['channels'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['id_asset'] = isset($data['id_asset']) ? $data['id_asset'] : null;
        $this->container['is_private'] = isset($data['is_private']) ? $data['is_private'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['id_source'] = isset($data['id_source']) ? $data['id_source'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['channels'] === null) {
            $invalid_properties[] = "'channels' can't be null";
        }
        if ($this->container['id_asset'] === null) {
            $invalid_properties[] = "'id_asset' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['channels'] === null) {
            return false;
        }
        if ($this->container['id_asset'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets channels
     * @return int[]
     */
    public function getChannels()
    {
        return $this->container['channels'];
    }

    /**
     * Sets channels
     * @param int[] $channels Array with channel Ids. If asset is private - channels are not required
     * @return $this
     */
    public function setChannels($channels)
    {
        $this->container['channels'] = $channels;

        return $this;
    }

    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     * @param string $title Playlist title. Default - null
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets id_asset
     * @return int
     */
    public function getIdAsset()
    {
        return $this->container['id_asset'];
    }

    /**
     * Sets id_asset
     * @param int $id_asset Id of the asset
     * @return $this
     */
    public function setIdAsset($id_asset)
    {
        $this->container['id_asset'] = $id_asset;

        return $this;
    }

    /**
     * Gets is_private
     * @return int
     */
    public function getIsPrivate()
    {
        return $this->container['is_private'];
    }

    /**
     * Sets is_private
     * @param int $is_private If is private - 1, otherwise public 0. Default: 0
     * @return $this
     */
    public function setIsPrivate($is_private)
    {
        $this->container['is_private'] = $is_private;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description Playlist description. Default - null
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets id_source
     * @return int
     */
    public function getIdSource()
    {
        return $this->container['id_source'];
    }

    /**
     * Sets id_source
     * @param int $id_source Playlist source. Options: 1 - Web App, 2 - Android App, 3 - IOS App. Default - 1
     * @return $this
     */
    public function setIdSource($id_source)
    {
        $this->container['id_source'] = $id_source;

        return $this;
    }

    /**
     * Gets tags
     * @return int[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     * @param int[] $tags Array with tag Ids
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


