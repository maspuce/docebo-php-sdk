<?php
/**
 * LearnCourseSessionsSessions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * LearnCourseSessionsSessions Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class LearnCourseSessionsSessions implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'LearnCourseSessionsSessions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'can_manage' => 'bool',
        'evaluation_attachment' => '\Swagger\Client\Model\LearnCourseSessionsEvaluationAttachment',
        'min_dates_for_completion' => 'int',
        'slug_name' => 'string',
        'begin_time' => 'string',
        'start_date' => '\DateTime',
        'evaluation' => '\Swagger\Client\Model\LearnCourseSessionsEvaluation',
        'evaluation_type' => 'string',
        'begin_timezone' => 'string',
        'dates' => '\Swagger\Client\Model\LearnCourseSessionsDates[]',
        'id' => 'int',
        'name' => 'string',
        'score' => 'float',
        'score_base' => 'string',
        'comment' => 'string',
        'end_time' => 'string',
        'description' => 'string',
        'begin_day' => '\DateTime',
        'end_timezone' => 'string',
        'evaluation_status' => 'bool',
        'end_date' => '\DateTime'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'can_manage' => 'can_manage',
        'evaluation_attachment' => 'evaluation_attachment',
        'min_dates_for_completion' => 'min_dates_for_completion',
        'slug_name' => 'slug_name',
        'begin_time' => 'begin_time',
        'start_date' => 'start_date',
        'evaluation' => 'evaluation',
        'evaluation_type' => 'evaluation_type',
        'begin_timezone' => 'begin_timezone',
        'dates' => 'dates',
        'id' => 'id',
        'name' => 'name',
        'score' => 'score',
        'score_base' => 'score_base',
        'comment' => 'comment',
        'end_time' => 'end_time',
        'description' => 'description',
        'begin_day' => 'begin_day',
        'end_timezone' => 'end_timezone',
        'evaluation_status' => 'evaluation_status',
        'end_date' => 'end_date'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'can_manage' => 'setCanManage',
        'evaluation_attachment' => 'setEvaluationAttachment',
        'min_dates_for_completion' => 'setMinDatesForCompletion',
        'slug_name' => 'setSlugName',
        'begin_time' => 'setBeginTime',
        'start_date' => 'setStartDate',
        'evaluation' => 'setEvaluation',
        'evaluation_type' => 'setEvaluationType',
        'begin_timezone' => 'setBeginTimezone',
        'dates' => 'setDates',
        'id' => 'setId',
        'name' => 'setName',
        'score' => 'setScore',
        'score_base' => 'setScoreBase',
        'comment' => 'setComment',
        'end_time' => 'setEndTime',
        'description' => 'setDescription',
        'begin_day' => 'setBeginDay',
        'end_timezone' => 'setEndTimezone',
        'evaluation_status' => 'setEvaluationStatus',
        'end_date' => 'setEndDate'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'can_manage' => 'getCanManage',
        'evaluation_attachment' => 'getEvaluationAttachment',
        'min_dates_for_completion' => 'getMinDatesForCompletion',
        'slug_name' => 'getSlugName',
        'begin_time' => 'getBeginTime',
        'start_date' => 'getStartDate',
        'evaluation' => 'getEvaluation',
        'evaluation_type' => 'getEvaluationType',
        'begin_timezone' => 'getBeginTimezone',
        'dates' => 'getDates',
        'id' => 'getId',
        'name' => 'getName',
        'score' => 'getScore',
        'score_base' => 'getScoreBase',
        'comment' => 'getComment',
        'end_time' => 'getEndTime',
        'description' => 'getDescription',
        'begin_day' => 'getBeginDay',
        'end_timezone' => 'getEndTimezone',
        'evaluation_status' => 'getEvaluationStatus',
        'end_date' => 'getEndDate'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['can_manage'] = isset($data['can_manage']) ? $data['can_manage'] : null;
        $this->container['evaluation_attachment'] = isset($data['evaluation_attachment']) ? $data['evaluation_attachment'] : null;
        $this->container['min_dates_for_completion'] = isset($data['min_dates_for_completion']) ? $data['min_dates_for_completion'] : null;
        $this->container['slug_name'] = isset($data['slug_name']) ? $data['slug_name'] : null;
        $this->container['begin_time'] = isset($data['begin_time']) ? $data['begin_time'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['evaluation'] = isset($data['evaluation']) ? $data['evaluation'] : null;
        $this->container['evaluation_type'] = isset($data['evaluation_type']) ? $data['evaluation_type'] : null;
        $this->container['begin_timezone'] = isset($data['begin_timezone']) ? $data['begin_timezone'] : null;
        $this->container['dates'] = isset($data['dates']) ? $data['dates'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['score'] = isset($data['score']) ? $data['score'] : null;
        $this->container['score_base'] = isset($data['score_base']) ? $data['score_base'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['end_time'] = isset($data['end_time']) ? $data['end_time'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['begin_day'] = isset($data['begin_day']) ? $data['begin_day'] : null;
        $this->container['end_timezone'] = isset($data['end_timezone']) ? $data['end_timezone'] : null;
        $this->container['evaluation_status'] = isset($data['evaluation_status']) ? $data['evaluation_status'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['can_manage'] === null) {
            $invalid_properties[] = "'can_manage' can't be null";
        }
        if ($this->container['slug_name'] === null) {
            $invalid_properties[] = "'slug_name' can't be null";
        }
        if ($this->container['start_date'] === null) {
            $invalid_properties[] = "'start_date' can't be null";
        }
        if ($this->container['evaluation_type'] === null) {
            $invalid_properties[] = "'evaluation_type' can't be null";
        }
        if ($this->container['dates'] === null) {
            $invalid_properties[] = "'dates' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['score'] === null) {
            $invalid_properties[] = "'score' can't be null";
        }
        if ($this->container['score_base'] === null) {
            $invalid_properties[] = "'score_base' can't be null";
        }
        if ($this->container['evaluation_status'] === null) {
            $invalid_properties[] = "'evaluation_status' can't be null";
        }
        if ($this->container['end_date'] === null) {
            $invalid_properties[] = "'end_date' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['can_manage'] === null) {
            return false;
        }
        if ($this->container['slug_name'] === null) {
            return false;
        }
        if ($this->container['start_date'] === null) {
            return false;
        }
        if ($this->container['evaluation_type'] === null) {
            return false;
        }
        if ($this->container['dates'] === null) {
            return false;
        }
        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['score'] === null) {
            return false;
        }
        if ($this->container['score_base'] === null) {
            return false;
        }
        if ($this->container['evaluation_status'] === null) {
            return false;
        }
        if ($this->container['end_date'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets can_manage
     * @return bool
     */
    public function getCanManage()
    {
        return $this->container['can_manage'];
    }

    /**
     * Sets can_manage
     * @param bool $can_manage Can current user manage this session
     * @return $this
     */
    public function setCanManage($can_manage)
    {
        $this->container['can_manage'] = $can_manage;

        return $this;
    }

    /**
     * Gets evaluation_attachment
     * @return \Swagger\Client\Model\LearnCourseSessionsEvaluationAttachment
     */
    public function getEvaluationAttachment()
    {
        return $this->container['evaluation_attachment'];
    }

    /**
     * Sets evaluation_attachment
     * @param \Swagger\Client\Model\LearnCourseSessionsEvaluationAttachment $evaluation_attachment The UTC datetime of when the evaluation was created
     * @return $this
     */
    public function setEvaluationAttachment($evaluation_attachment)
    {
        $this->container['evaluation_attachment'] = $evaluation_attachment;

        return $this;
    }

    /**
     * Gets min_dates_for_completion
     * @return int
     */
    public function getMinDatesForCompletion()
    {
        return $this->container['min_dates_for_completion'];
    }

    /**
     * Sets min_dates_for_completion
     * @param int $min_dates_for_completion (Webinar only) If webinar settings require completing a minimum number of dates, this param provides such a number
     * @return $this
     */
    public function setMinDatesForCompletion($min_dates_for_completion)
    {
        $this->container['min_dates_for_completion'] = $min_dates_for_completion;

        return $this;
    }

    /**
     * Gets slug_name
     * @return string
     */
    public function getSlugName()
    {
        return $this->container['slug_name'];
    }

    /**
     * Sets slug_name
     * @param string $slug_name The SEO version of the session's name
     * @return $this
     */
    public function setSlugName($slug_name)
    {
        $this->container['slug_name'] = $slug_name;

        return $this;
    }

    /**
     * Gets begin_time
     * @return string
     */
    public function getBeginTime()
    {
        return $this->container['begin_time'];
    }

    /**
     * Sets begin_time
     * @param string $begin_time The start time of the earliest date within this session, in the date's local timezone
     * @return $this
     */
    public function setBeginTime($begin_time)
    {
        $this->container['begin_time'] = $begin_time;

        return $this;
    }

    /**
     * Gets start_date
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     * @param \DateTime $start_date The UTC start datetime for the session
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets evaluation
     * @return \Swagger\Client\Model\LearnCourseSessionsEvaluation
     */
    public function getEvaluation()
    {
        return $this->container['evaluation'];
    }

    /**
     * Sets evaluation
     * @param \Swagger\Client\Model\LearnCourseSessionsEvaluation $evaluation Session evaluation object
     * @return $this
     */
    public function setEvaluation($evaluation)
    {
        $this->container['evaluation'] = $evaluation;

        return $this;
    }

    /**
     * Gets evaluation_type
     * @return string
     */
    public function getEvaluationType()
    {
        return $this->container['evaluation_type'];
    }

    /**
     * Sets evaluation_type
     * @param string $evaluation_type Evaluation type: 0=&gt;manual, 1=&gt; online test
     * @return $this
     */
    public function setEvaluationType($evaluation_type)
    {
        $this->container['evaluation_type'] = $evaluation_type;

        return $this;
    }

    /**
     * Gets begin_timezone
     * @return string
     */
    public function getBeginTimezone()
    {
        return $this->container['begin_timezone'];
    }

    /**
     * Sets begin_timezone
     * @param string $begin_timezone The timezone of the earliest available date within the session. E.g. &quot;Europe/Rome&quot;
     * @return $this
     */
    public function setBeginTimezone($begin_timezone)
    {
        $this->container['begin_timezone'] = $begin_timezone;

        return $this;
    }

    /**
     * Gets dates
     * @return \Swagger\Client\Model\LearnCourseSessionsDates[]
     */
    public function getDates()
    {
        return $this->container['dates'];
    }

    /**
     * Sets dates
     * @param \Swagger\Client\Model\LearnCourseSessionsDates[] $dates Array of the session's dates
     * @return $this
     */
    public function setDates($dates)
    {
        $this->container['dates'] = $dates;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id The unique identifier of the session
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name The session name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets score
     * @return float
     */
    public function getScore()
    {
        return $this->container['score'];
    }

    /**
     * Sets score
     * @param float $score The score given by the instructor
     * @return $this
     */
    public function setScore($score)
    {
        $this->container['score'] = $score;

        return $this;
    }

    /**
     * Gets score_base
     * @return string
     */
    public function getScoreBase()
    {
        return $this->container['score_base'];
    }

    /**
     * Sets score_base
     * @param string $score_base Evaluation score base
     * @return $this
     */
    public function setScoreBase($score_base)
    {
        $this->container['score_base'] = $score_base;

        return $this;
    }

    /**
     * Gets comment
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     * @param string $comment Full evaluation message left by the instructor
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets end_time
     * @return string
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     * @param string $end_time The end time of the latest date within this session, in the date's local timezone
     * @return $this
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description The description of the session for webinars or &quot;Other info&quot; for classrooms
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets begin_day
     * @return \DateTime
     */
    public function getBeginDay()
    {
        return $this->container['begin_day'];
    }

    /**
     * Sets begin_day
     * @param \DateTime $begin_day The start date of the earliest date within this session, in the date's local timezone
     * @return $this
     */
    public function setBeginDay($begin_day)
    {
        $this->container['begin_day'] = $begin_day;

        return $this;
    }

    /**
     * Gets end_timezone
     * @return string
     */
    public function getEndTimezone()
    {
        return $this->container['end_timezone'];
    }

    /**
     * Sets end_timezone
     * @param string $end_timezone The timezone of the latest available date within the session. E.g. &quot;Europe/Rome&quot;
     * @return $this
     */
    public function setEndTimezone($end_timezone)
    {
        $this->container['end_timezone'] = $end_timezone;

        return $this;
    }

    /**
     * Gets evaluation_status
     * @return bool
     */
    public function getEvaluationStatus()
    {
        return $this->container['evaluation_status'];
    }

    /**
     * Sets evaluation_status
     * @param bool $evaluation_status The final evaluation status (true = passed, false = failed)
     * @return $this
     */
    public function setEvaluationStatus($evaluation_status)
    {
        $this->container['evaluation_status'] = $evaluation_status;

        return $this;
    }

    /**
     * Gets end_date
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     * @param \DateTime $end_date The end date of the latest date within this session, in the date's local timezone
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


