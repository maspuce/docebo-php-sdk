<?php
/**
 * ManageUserSessionActiveLanguages
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ManageUserSessionActiveLanguages Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ManageUserSessionActiveLanguages implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ManageUserSessionActiveLanguages';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'pu_manage_user_permissions' => '\Swagger\Client\Model\ManageUserSessionPuManageUserPermissions[]',
        'browsercode' => 'string',
        'show_create_user_button' => 'bool',
        'description' => 'string',
        'is_rtl' => 'bool',
        'date_formats' => '\Swagger\Client\Model\ManageUserSessionDateFormats[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'pu_manage_user_permissions' => 'pu_manage_user_permissions',
        'browsercode' => 'browsercode',
        'show_create_user_button' => 'show_create_user_button',
        'description' => 'description',
        'is_rtl' => 'is_rtl',
        'date_formats' => 'date_formats'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'pu_manage_user_permissions' => 'setPuManageUserPermissions',
        'browsercode' => 'setBrowsercode',
        'show_create_user_button' => 'setShowCreateUserButton',
        'description' => 'setDescription',
        'is_rtl' => 'setIsRtl',
        'date_formats' => 'setDateFormats'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'pu_manage_user_permissions' => 'getPuManageUserPermissions',
        'browsercode' => 'getBrowsercode',
        'show_create_user_button' => 'getShowCreateUserButton',
        'description' => 'getDescription',
        'is_rtl' => 'getIsRtl',
        'date_formats' => 'getDateFormats'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['pu_manage_user_permissions'] = isset($data['pu_manage_user_permissions']) ? $data['pu_manage_user_permissions'] : null;
        $this->container['browsercode'] = isset($data['browsercode']) ? $data['browsercode'] : null;
        $this->container['show_create_user_button'] = isset($data['show_create_user_button']) ? $data['show_create_user_button'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['is_rtl'] = isset($data['is_rtl']) ? $data['is_rtl'] : null;
        $this->container['date_formats'] = isset($data['date_formats']) ? $data['date_formats'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['code'] === null) {
            $invalid_properties[] = "'code' can't be null";
        }
        if ($this->container['browsercode'] === null) {
            $invalid_properties[] = "'browsercode' can't be null";
        }
        if ($this->container['show_create_user_button'] === null) {
            $invalid_properties[] = "'show_create_user_button' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalid_properties[] = "'description' can't be null";
        }
        if ($this->container['is_rtl'] === null) {
            $invalid_properties[] = "'is_rtl' can't be null";
        }
        if ($this->container['date_formats'] === null) {
            $invalid_properties[] = "'date_formats' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['code'] === null) {
            return false;
        }
        if ($this->container['browsercode'] === null) {
            return false;
        }
        if ($this->container['show_create_user_button'] === null) {
            return false;
        }
        if ($this->container['description'] === null) {
            return false;
        }
        if ($this->container['is_rtl'] === null) {
            return false;
        }
        if ($this->container['date_formats'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets code
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     * @param string $code Language code
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets pu_manage_user_permissions
     * @return \Swagger\Client\Model\ManageUserSessionPuManageUserPermissions[]
     */
    public function getPuManageUserPermissions()
    {
        return $this->container['pu_manage_user_permissions'];
    }

    /**
     * Sets pu_manage_user_permissions
     * @param \Swagger\Client\Model\ManageUserSessionPuManageUserPermissions[] $pu_manage_user_permissions Visible in session only for PU.
     * @return $this
     */
    public function setPuManageUserPermissions($pu_manage_user_permissions)
    {
        $this->container['pu_manage_user_permissions'] = $pu_manage_user_permissions;

        return $this;
    }

    /**
     * Gets browsercode
     * @return string
     */
    public function getBrowsercode()
    {
        return $this->container['browsercode'];
    }

    /**
     * Sets browsercode
     * @param string $browsercode Language Shortcode - bg, en
     * @return $this
     */
    public function setBrowsercode($browsercode)
    {
        $this->container['browsercode'] = $browsercode;

        return $this;
    }

    /**
     * Gets show_create_user_button
     * @return bool
     */
    public function getShowCreateUserButton()
    {
        return $this->container['show_create_user_button'];
    }

    /**
     * Sets show_create_user_button
     * @param bool $show_create_user_button Default value is true, but for PU who doesn't have permission for create user set 'false'.
     * @return $this
     */
    public function setShowCreateUserButton($show_create_user_button)
    {
        $this->container['show_create_user_button'] = $show_create_user_button;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description Language description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets is_rtl
     * @return bool
     */
    public function getIsRtl()
    {
        return $this->container['is_rtl'];
    }

    /**
     * Sets is_rtl
     * @param bool $is_rtl Is the language Right-To-Left(RTL).
     * @return $this
     */
    public function setIsRtl($is_rtl)
    {
        $this->container['is_rtl'] = $is_rtl;

        return $this;
    }

    /**
     * Gets date_formats
     * @return \Swagger\Client\Model\ManageUserSessionDateFormats[]
     */
    public function getDateFormats()
    {
        return $this->container['date_formats'];
    }

    /**
     * Sets date_formats
     * @param \Swagger\Client\Model\ManageUserSessionDateFormats[] $date_formats Language Shortcode - bg, en
     * @return $this
     */
    public function setDateFormats($date_formats)
    {
        $this->container['date_formats'] = $date_formats;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


