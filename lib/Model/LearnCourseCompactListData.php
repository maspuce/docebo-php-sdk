<?php
/**
 * LearnCourseCompactListData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * LearnCourseCompactListData Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class LearnCourseCompactListData implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'LearnCourseCompactListData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'slug_name' => 'string',
        'enrollment_info' => '\Swagger\Client\Model\LearnCourseCompactListEnrollmentInfo[]',
        'id_course' => 'int',
        'more_course_fields' => '\Swagger\Client\Model\LearnCourseCompactListMoreCourseFields[]',
        'selling' => 'bool',
        'can_enter' => '\Swagger\Client\Model\LearnCourseCompactListCanEnter[]',
        'more_enrollment_fields' => '\Swagger\Client\Model\LearnCourseCompactListMoreEnrollmentFields[]',
        'course_type' => 'string',
        'description' => 'string',
        'enrolled' => 'bool',
        'name' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'slug_name' => 'slug_name',
        'enrollment_info' => 'enrollment_info',
        'id_course' => 'id_course',
        'more_course_fields' => 'more_course_fields',
        'selling' => 'selling',
        'can_enter' => 'can_enter',
        'more_enrollment_fields' => 'more_enrollment_fields',
        'course_type' => 'course_type',
        'description' => 'description',
        'enrolled' => 'enrolled',
        'name' => 'name'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'slug_name' => 'setSlugName',
        'enrollment_info' => 'setEnrollmentInfo',
        'id_course' => 'setIdCourse',
        'more_course_fields' => 'setMoreCourseFields',
        'selling' => 'setSelling',
        'can_enter' => 'setCanEnter',
        'more_enrollment_fields' => 'setMoreEnrollmentFields',
        'course_type' => 'setCourseType',
        'description' => 'setDescription',
        'enrolled' => 'setEnrolled',
        'name' => 'setName'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'slug_name' => 'getSlugName',
        'enrollment_info' => 'getEnrollmentInfo',
        'id_course' => 'getIdCourse',
        'more_course_fields' => 'getMoreCourseFields',
        'selling' => 'getSelling',
        'can_enter' => 'getCanEnter',
        'more_enrollment_fields' => 'getMoreEnrollmentFields',
        'course_type' => 'getCourseType',
        'description' => 'getDescription',
        'enrolled' => 'getEnrolled',
        'name' => 'getName'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['slug_name'] = isset($data['slug_name']) ? $data['slug_name'] : null;
        $this->container['enrollment_info'] = isset($data['enrollment_info']) ? $data['enrollment_info'] : null;
        $this->container['id_course'] = isset($data['id_course']) ? $data['id_course'] : null;
        $this->container['more_course_fields'] = isset($data['more_course_fields']) ? $data['more_course_fields'] : null;
        $this->container['selling'] = isset($data['selling']) ? $data['selling'] : null;
        $this->container['can_enter'] = isset($data['can_enter']) ? $data['can_enter'] : null;
        $this->container['more_enrollment_fields'] = isset($data['more_enrollment_fields']) ? $data['more_enrollment_fields'] : null;
        $this->container['course_type'] = isset($data['course_type']) ? $data['course_type'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['enrolled'] = isset($data['enrolled']) ? $data['enrolled'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['code'] === null) {
            $invalid_properties[] = "'code' can't be null";
        }
        if ($this->container['slug_name'] === null) {
            $invalid_properties[] = "'slug_name' can't be null";
        }
        if ($this->container['enrollment_info'] === null) {
            $invalid_properties[] = "'enrollment_info' can't be null";
        }
        if ($this->container['id_course'] === null) {
            $invalid_properties[] = "'id_course' can't be null";
        }
        if ($this->container['selling'] === null) {
            $invalid_properties[] = "'selling' can't be null";
        }
        if ($this->container['can_enter'] === null) {
            $invalid_properties[] = "'can_enter' can't be null";
        }
        if ($this->container['course_type'] === null) {
            $invalid_properties[] = "'course_type' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalid_properties[] = "'description' can't be null";
        }
        if ($this->container['enrolled'] === null) {
            $invalid_properties[] = "'enrolled' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['code'] === null) {
            return false;
        }
        if ($this->container['slug_name'] === null) {
            return false;
        }
        if ($this->container['enrollment_info'] === null) {
            return false;
        }
        if ($this->container['id_course'] === null) {
            return false;
        }
        if ($this->container['selling'] === null) {
            return false;
        }
        if ($this->container['can_enter'] === null) {
            return false;
        }
        if ($this->container['course_type'] === null) {
            return false;
        }
        if ($this->container['description'] === null) {
            return false;
        }
        if ($this->container['enrolled'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets code
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     * @param string $code Course Code
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets slug_name
     * @return string
     */
    public function getSlugName()
    {
        return $this->container['slug_name'];
    }

    /**
     * Sets slug_name
     * @param string $slug_name Slugified course name
     * @return $this
     */
    public function setSlugName($slug_name)
    {
        $this->container['slug_name'] = $slug_name;

        return $this;
    }

    /**
     * Gets enrollment_info
     * @return \Swagger\Client\Model\LearnCourseCompactListEnrollmentInfo[]
     */
    public function getEnrollmentInfo()
    {
        return $this->container['enrollment_info'];
    }

    /**
     * Sets enrollment_info
     * @param \Swagger\Client\Model\LearnCourseCompactListEnrollmentInfo[] $enrollment_info Enrollment information is added here, if any
     * @return $this
     */
    public function setEnrollmentInfo($enrollment_info)
    {
        $this->container['enrollment_info'] = $enrollment_info;

        return $this;
    }

    /**
     * Gets id_course
     * @return int
     */
    public function getIdCourse()
    {
        return $this->container['id_course'];
    }

    /**
     * Sets id_course
     * @param int $id_course ID of the course
     * @return $this
     */
    public function setIdCourse($id_course)
    {
        $this->container['id_course'] = $id_course;

        return $this;
    }

    /**
     * Gets more_course_fields
     * @return \Swagger\Client\Model\LearnCourseCompactListMoreCourseFields[]
     */
    public function getMoreCourseFields()
    {
        return $this->container['more_course_fields'];
    }

    /**
     * Sets more_course_fields
     * @param \Swagger\Client\Model\LearnCourseCompactListMoreCourseFields[] $more_course_fields Add these course fields to the result (directly refering database table colmns)
     * @return $this
     */
    public function setMoreCourseFields($more_course_fields)
    {
        $this->container['more_course_fields'] = $more_course_fields;

        return $this;
    }

    /**
     * Gets selling
     * @return bool
     */
    public function getSelling()
    {
        return $this->container['selling'];
    }

    /**
     * Sets selling
     * @param bool $selling If course is for sale (ecommerce)
     * @return $this
     */
    public function setSelling($selling)
    {
        $this->container['selling'] = $selling;

        return $this;
    }

    /**
     * Gets can_enter
     * @return \Swagger\Client\Model\LearnCourseCompactListCanEnter[]
     */
    public function getCanEnter()
    {
        return $this->container['can_enter'];
    }

    /**
     * Sets can_enter
     * @param \Swagger\Client\Model\LearnCourseCompactListCanEnter[] $can_enter Information about if the user Can Enter the course
     * @return $this
     */
    public function setCanEnter($can_enter)
    {
        $this->container['can_enter'] = $can_enter;

        return $this;
    }

    /**
     * Gets more_enrollment_fields
     * @return \Swagger\Client\Model\LearnCourseCompactListMoreEnrollmentFields[]
     */
    public function getMoreEnrollmentFields()
    {
        return $this->container['more_enrollment_fields'];
    }

    /**
     * Sets more_enrollment_fields
     * @param \Swagger\Client\Model\LearnCourseCompactListMoreEnrollmentFields[] $more_enrollment_fields Add these enrollment fields to &quot;enrollment_info&quot;, if any (directly refering database table colmns)
     * @return $this
     */
    public function setMoreEnrollmentFields($more_enrollment_fields)
    {
        $this->container['more_enrollment_fields'] = $more_enrollment_fields;

        return $this;
    }

    /**
     * Gets course_type
     * @return string
     */
    public function getCourseType()
    {
        return $this->container['course_type'];
    }

    /**
     * Sets course_type
     * @param string $course_type Course type, possible values: elearning, classroom, webinar
     * @return $this
     */
    public function setCourseType($course_type)
    {
        $this->container['course_type'] = $course_type;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description Course description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets enrolled
     * @return bool
     */
    public function getEnrolled()
    {
        return $this->container['enrolled'];
    }

    /**
     * Sets enrolled
     * @param bool $enrolled If the given user (if provided) is enrolled to this course
     * @return $this
     */
    public function setEnrolled($enrolled)
    {
        $this->container['enrolled'] = $enrolled;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Course name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


