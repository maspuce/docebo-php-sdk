<?php
/**
 * LearnChanneldashboardViewOtherFields
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * LearnChanneldashboardViewOtherFields Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class LearnChanneldashboardViewOtherFields implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'LearnChanneldashboardViewOtherFields';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'is_watched' => 'bool',
        'publish_date' => 'string',
        'expiration_date' => 'string',
        'type' => 'string',
        'views' => 'int',
        'courses_count' => 'int',
        'status_id' => 'string',
        'can_enter' => 'bool',
        'status' => 'int',
        'level' => 'string',
        'assets_count' => 'int',
        'is_private' => 'bool',
        'status_label' => 'string',
        'language' => 'string',
        'can_enter_reason' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'is_watched' => 'is_watched',
        'publish_date' => 'publish_date',
        'expiration_date' => 'expiration_date',
        'type' => 'type',
        'views' => 'views',
        'courses_count' => 'courses_count',
        'status_id' => 'status_id',
        'can_enter' => 'can_enter',
        'status' => 'status',
        'level' => 'level',
        'assets_count' => 'assets_count',
        'is_private' => 'is_private',
        'status_label' => 'status_label',
        'language' => 'language',
        'can_enter_reason' => 'can_enter_reason'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'is_watched' => 'setIsWatched',
        'publish_date' => 'setPublishDate',
        'expiration_date' => 'setExpirationDate',
        'type' => 'setType',
        'views' => 'setViews',
        'courses_count' => 'setCoursesCount',
        'status_id' => 'setStatusId',
        'can_enter' => 'setCanEnter',
        'status' => 'setStatus',
        'level' => 'setLevel',
        'assets_count' => 'setAssetsCount',
        'is_private' => 'setIsPrivate',
        'status_label' => 'setStatusLabel',
        'language' => 'setLanguage',
        'can_enter_reason' => 'setCanEnterReason'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'is_watched' => 'getIsWatched',
        'publish_date' => 'getPublishDate',
        'expiration_date' => 'getExpirationDate',
        'type' => 'getType',
        'views' => 'getViews',
        'courses_count' => 'getCoursesCount',
        'status_id' => 'getStatusId',
        'can_enter' => 'getCanEnter',
        'status' => 'getStatus',
        'level' => 'getLevel',
        'assets_count' => 'getAssetsCount',
        'is_private' => 'getIsPrivate',
        'status_label' => 'getStatusLabel',
        'language' => 'getLanguage',
        'can_enter_reason' => 'getCanEnterReason'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_watched'] = isset($data['is_watched']) ? $data['is_watched'] : null;
        $this->container['publish_date'] = isset($data['publish_date']) ? $data['publish_date'] : null;
        $this->container['expiration_date'] = isset($data['expiration_date']) ? $data['expiration_date'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['views'] = isset($data['views']) ? $data['views'] : null;
        $this->container['courses_count'] = isset($data['courses_count']) ? $data['courses_count'] : null;
        $this->container['status_id'] = isset($data['status_id']) ? $data['status_id'] : null;
        $this->container['can_enter'] = isset($data['can_enter']) ? $data['can_enter'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['level'] = isset($data['level']) ? $data['level'] : null;
        $this->container['assets_count'] = isset($data['assets_count']) ? $data['assets_count'] : null;
        $this->container['is_private'] = isset($data['is_private']) ? $data['is_private'] : null;
        $this->container['status_label'] = isset($data['status_label']) ? $data['status_label'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['can_enter_reason'] = isset($data['can_enter_reason']) ? $data['can_enter_reason'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets is_watched
     * @return bool
     */
    public function getIsWatched()
    {
        return $this->container['is_watched'];
    }

    /**
     * Sets is_watched
     * @param bool $is_watched Whether or not the asset was watched by the user
     * @return $this
     */
    public function setIsWatched($is_watched)
    {
        $this->container['is_watched'] = $is_watched;

        return $this;
    }

    /**
     * Gets publish_date
     * @return string
     */
    public function getPublishDate()
    {
        return $this->container['publish_date'];
    }

    /**
     * Sets publish_date
     * @param string $publish_date Publication date of asset
     * @return $this
     */
    public function setPublishDate($publish_date)
    {
        $this->container['publish_date'] = $publish_date;

        return $this;
    }

    /**
     * Gets expiration_date
     * @return string
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     * @param string $expiration_date The MYSQL UTC expiration date for this enrollment/course. It must be formatted to display the &quot;15 days left&quot; red message
     * @return $this
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type The type of course. Possible values: elearning, classroom, webinar
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets views
     * @return int
     */
    public function getViews()
    {
        return $this->container['views'];
    }

    /**
     * Sets views
     * @param int $views how many times the asset was viewed
     * @return $this
     */
    public function setViews($views)
    {
        $this->container['views'] = $views;

        return $this;
    }

    /**
     * Gets courses_count
     * @return int
     */
    public function getCoursesCount()
    {
        return $this->container['courses_count'];
    }

    /**
     * Sets courses_count
     * @param int $courses_count he number of courses in the learning plan
     * @return $this
     */
    public function setCoursesCount($courses_count)
    {
        $this->container['courses_count'] = $courses_count;

        return $this;
    }

    /**
     * Gets status_id
     * @return string
     */
    public function getStatusId()
    {
        return $this->container['status_id'];
    }

    /**
     * Sets status_id
     * @param string $status_id The user status identifier (i.e. &quot;subscribed&quot;, &quot;in_progress&quot;, &quot;completed&quot;)
     * @return $this
     */
    public function setStatusId($status_id)
    {
        $this->container['status_id'] = $status_id;

        return $this;
    }

    /**
     * Gets can_enter
     * @return bool
     */
    public function getCanEnter()
    {
        return $this->container['can_enter'];
    }

    /**
     * Sets can_enter
     * @param bool $can_enter Whether clicking on the item is allowed. Default = true
     * @return $this
     */
    public function setCanEnter($can_enter)
    {
        $this->container['can_enter'] = $can_enter;

        return $this;
    }

    /**
     * Gets status
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param int $status The asset status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets level
     * @return string
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     * @param string $level The user level inside the course
     * @return $this
     */
    public function setLevel($level)
    {
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets assets_count
     * @return int
     */
    public function getAssetsCount()
    {
        return $this->container['assets_count'];
    }

    /**
     * Sets assets_count
     * @param int $assets_count The number of assets in the playlist
     * @return $this
     */
    public function setAssetsCount($assets_count)
    {
        $this->container['assets_count'] = $assets_count;

        return $this;
    }

    /**
     * Gets is_private
     * @return bool
     */
    public function getIsPrivate()
    {
        return $this->container['is_private'];
    }

    /**
     * Sets is_private
     * @param bool $is_private Private asset or not
     * @return $this
     */
    public function setIsPrivate($is_private)
    {
        $this->container['is_private'] = $is_private;

        return $this;
    }

    /**
     * Gets status_label
     * @return string
     */
    public function getStatusLabel()
    {
        return $this->container['status_label'];
    }

    /**
     * Sets status_label
     * @param string $status_label The localized status label to display
     * @return $this
     */
    public function setStatusLabel($status_label)
    {
        $this->container['status_label'] = $status_label;

        return $this;
    }

    /**
     * Gets language
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     * @param string $language The item language
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets can_enter_reason
     * @return string
     */
    public function getCanEnterReason()
    {
        return $this->container['can_enter_reason'];
    }

    /**
     * Sets can_enter_reason
     * @param string $can_enter_reason If can_enter is true, this contains the message to display in the tooltip when you click/tap on the lock overlay or on the &quot;?&quot; icon in the bottom right corner. Default = empty
     * @return $this
     */
    public function setCanEnterReason($can_enter_reason)
    {
        $this->container['can_enter_reason'] = $can_enter_reason;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


