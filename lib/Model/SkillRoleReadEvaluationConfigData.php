<?php
/**
 * SkillRoleReadEvaluationConfigData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * SkillRoleReadEvaluationConfigData Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SkillRoleReadEvaluationConfigData implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SkillRoleReadEvaluationConfigData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'gl_self_exclude_users' => 'int[]',
        'gl_self_renew' => 'int',
        'gl_peers_duration' => 'int',
        'gl_self_enable' => 'int',
        'gl_self_scale' => 'int',
        'gl_manager_exclude_users' => 'int[]',
        'gl_manager_type' => 'string',
        'gl_peers_group' => 'string',
        'gl_manager_weight' => 'float',
        'gl_self_group' => 'string',
        'gl_self_group_day' => 'int',
        'role_id' => 'int',
        'grouping_options' => '\Swagger\Client\Model\SkillRoleReadEvaluationConfigGroupingOptions[]',
        'gl_manager_group_day' => 'int',
        'gl_peers_enable' => 'int',
        'gl_manager_renew' => 'int',
        'gl_peers_type' => 'string',
        'gl_manager_soft_due' => 'int',
        'gl_peer_exclude_users' => 'int[]',
        'gl_peers_soft_due' => 'int',
        'gl_self_weight' => 'float',
        'gl_peers_renew' => 'int',
        'gl_role_assign_wait' => 'int',
        'gl_peers_group_day' => 'int',
        'gl_self_soft_due' => 'int',
        'gl_manager_enable' => 'int',
        'gl_self_duration' => 'int',
        'gl_peer_scale' => 'int',
        'gl_show_manager_to_user' => 'int',
        'gl_manager_group' => 'string',
        'gl_peer_weight' => 'float',
        'gl_manager_scale' => 'int',
        'gl_role_change_wait' => 'int',
        'gl_manager_duration' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'gl_self_exclude_users' => 'gl_self_exclude_users',
        'gl_self_renew' => 'gl_self_renew',
        'gl_peers_duration' => 'gl_peers_duration',
        'gl_self_enable' => 'gl_self_enable',
        'gl_self_scale' => 'gl_self_scale',
        'gl_manager_exclude_users' => 'gl_manager_exclude_users',
        'gl_manager_type' => 'gl_manager_type',
        'gl_peers_group' => 'gl_peers_group',
        'gl_manager_weight' => 'gl_manager_weight',
        'gl_self_group' => 'gl_self_group',
        'gl_self_group_day' => 'gl_self_group_day',
        'role_id' => 'role_id',
        'grouping_options' => 'grouping_options',
        'gl_manager_group_day' => 'gl_manager_group_day',
        'gl_peers_enable' => 'gl_peers_enable',
        'gl_manager_renew' => 'gl_manager_renew',
        'gl_peers_type' => 'gl_peers_type',
        'gl_manager_soft_due' => 'gl_manager_soft_due',
        'gl_peer_exclude_users' => 'gl_peer_exclude_users',
        'gl_peers_soft_due' => 'gl_peers_soft_due',
        'gl_self_weight' => 'gl_self_weight',
        'gl_peers_renew' => 'gl_peers_renew',
        'gl_role_assign_wait' => 'gl_role_assign_wait',
        'gl_peers_group_day' => 'gl_peers_group_day',
        'gl_self_soft_due' => 'gl_self_soft_due',
        'gl_manager_enable' => 'gl_manager_enable',
        'gl_self_duration' => 'gl_self_duration',
        'gl_peer_scale' => 'gl_peer_scale',
        'gl_show_manager_to_user' => 'gl_show_manager_to_user',
        'gl_manager_group' => 'gl_manager_group',
        'gl_peer_weight' => 'gl_peer_weight',
        'gl_manager_scale' => 'gl_manager_scale',
        'gl_role_change_wait' => 'gl_role_change_wait',
        'gl_manager_duration' => 'gl_manager_duration'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'gl_self_exclude_users' => 'setGlSelfExcludeUsers',
        'gl_self_renew' => 'setGlSelfRenew',
        'gl_peers_duration' => 'setGlPeersDuration',
        'gl_self_enable' => 'setGlSelfEnable',
        'gl_self_scale' => 'setGlSelfScale',
        'gl_manager_exclude_users' => 'setGlManagerExcludeUsers',
        'gl_manager_type' => 'setGlManagerType',
        'gl_peers_group' => 'setGlPeersGroup',
        'gl_manager_weight' => 'setGlManagerWeight',
        'gl_self_group' => 'setGlSelfGroup',
        'gl_self_group_day' => 'setGlSelfGroupDay',
        'role_id' => 'setRoleId',
        'grouping_options' => 'setGroupingOptions',
        'gl_manager_group_day' => 'setGlManagerGroupDay',
        'gl_peers_enable' => 'setGlPeersEnable',
        'gl_manager_renew' => 'setGlManagerRenew',
        'gl_peers_type' => 'setGlPeersType',
        'gl_manager_soft_due' => 'setGlManagerSoftDue',
        'gl_peer_exclude_users' => 'setGlPeerExcludeUsers',
        'gl_peers_soft_due' => 'setGlPeersSoftDue',
        'gl_self_weight' => 'setGlSelfWeight',
        'gl_peers_renew' => 'setGlPeersRenew',
        'gl_role_assign_wait' => 'setGlRoleAssignWait',
        'gl_peers_group_day' => 'setGlPeersGroupDay',
        'gl_self_soft_due' => 'setGlSelfSoftDue',
        'gl_manager_enable' => 'setGlManagerEnable',
        'gl_self_duration' => 'setGlSelfDuration',
        'gl_peer_scale' => 'setGlPeerScale',
        'gl_show_manager_to_user' => 'setGlShowManagerToUser',
        'gl_manager_group' => 'setGlManagerGroup',
        'gl_peer_weight' => 'setGlPeerWeight',
        'gl_manager_scale' => 'setGlManagerScale',
        'gl_role_change_wait' => 'setGlRoleChangeWait',
        'gl_manager_duration' => 'setGlManagerDuration'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'gl_self_exclude_users' => 'getGlSelfExcludeUsers',
        'gl_self_renew' => 'getGlSelfRenew',
        'gl_peers_duration' => 'getGlPeersDuration',
        'gl_self_enable' => 'getGlSelfEnable',
        'gl_self_scale' => 'getGlSelfScale',
        'gl_manager_exclude_users' => 'getGlManagerExcludeUsers',
        'gl_manager_type' => 'getGlManagerType',
        'gl_peers_group' => 'getGlPeersGroup',
        'gl_manager_weight' => 'getGlManagerWeight',
        'gl_self_group' => 'getGlSelfGroup',
        'gl_self_group_day' => 'getGlSelfGroupDay',
        'role_id' => 'getRoleId',
        'grouping_options' => 'getGroupingOptions',
        'gl_manager_group_day' => 'getGlManagerGroupDay',
        'gl_peers_enable' => 'getGlPeersEnable',
        'gl_manager_renew' => 'getGlManagerRenew',
        'gl_peers_type' => 'getGlPeersType',
        'gl_manager_soft_due' => 'getGlManagerSoftDue',
        'gl_peer_exclude_users' => 'getGlPeerExcludeUsers',
        'gl_peers_soft_due' => 'getGlPeersSoftDue',
        'gl_self_weight' => 'getGlSelfWeight',
        'gl_peers_renew' => 'getGlPeersRenew',
        'gl_role_assign_wait' => 'getGlRoleAssignWait',
        'gl_peers_group_day' => 'getGlPeersGroupDay',
        'gl_self_soft_due' => 'getGlSelfSoftDue',
        'gl_manager_enable' => 'getGlManagerEnable',
        'gl_self_duration' => 'getGlSelfDuration',
        'gl_peer_scale' => 'getGlPeerScale',
        'gl_show_manager_to_user' => 'getGlShowManagerToUser',
        'gl_manager_group' => 'getGlManagerGroup',
        'gl_peer_weight' => 'getGlPeerWeight',
        'gl_manager_scale' => 'getGlManagerScale',
        'gl_role_change_wait' => 'getGlRoleChangeWait',
        'gl_manager_duration' => 'getGlManagerDuration'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['gl_self_exclude_users'] = isset($data['gl_self_exclude_users']) ? $data['gl_self_exclude_users'] : null;
        $this->container['gl_self_renew'] = isset($data['gl_self_renew']) ? $data['gl_self_renew'] : null;
        $this->container['gl_peers_duration'] = isset($data['gl_peers_duration']) ? $data['gl_peers_duration'] : null;
        $this->container['gl_self_enable'] = isset($data['gl_self_enable']) ? $data['gl_self_enable'] : null;
        $this->container['gl_self_scale'] = isset($data['gl_self_scale']) ? $data['gl_self_scale'] : null;
        $this->container['gl_manager_exclude_users'] = isset($data['gl_manager_exclude_users']) ? $data['gl_manager_exclude_users'] : null;
        $this->container['gl_manager_type'] = isset($data['gl_manager_type']) ? $data['gl_manager_type'] : null;
        $this->container['gl_peers_group'] = isset($data['gl_peers_group']) ? $data['gl_peers_group'] : null;
        $this->container['gl_manager_weight'] = isset($data['gl_manager_weight']) ? $data['gl_manager_weight'] : null;
        $this->container['gl_self_group'] = isset($data['gl_self_group']) ? $data['gl_self_group'] : null;
        $this->container['gl_self_group_day'] = isset($data['gl_self_group_day']) ? $data['gl_self_group_day'] : null;
        $this->container['role_id'] = isset($data['role_id']) ? $data['role_id'] : null;
        $this->container['grouping_options'] = isset($data['grouping_options']) ? $data['grouping_options'] : null;
        $this->container['gl_manager_group_day'] = isset($data['gl_manager_group_day']) ? $data['gl_manager_group_day'] : null;
        $this->container['gl_peers_enable'] = isset($data['gl_peers_enable']) ? $data['gl_peers_enable'] : null;
        $this->container['gl_manager_renew'] = isset($data['gl_manager_renew']) ? $data['gl_manager_renew'] : null;
        $this->container['gl_peers_type'] = isset($data['gl_peers_type']) ? $data['gl_peers_type'] : null;
        $this->container['gl_manager_soft_due'] = isset($data['gl_manager_soft_due']) ? $data['gl_manager_soft_due'] : null;
        $this->container['gl_peer_exclude_users'] = isset($data['gl_peer_exclude_users']) ? $data['gl_peer_exclude_users'] : null;
        $this->container['gl_peers_soft_due'] = isset($data['gl_peers_soft_due']) ? $data['gl_peers_soft_due'] : null;
        $this->container['gl_self_weight'] = isset($data['gl_self_weight']) ? $data['gl_self_weight'] : null;
        $this->container['gl_peers_renew'] = isset($data['gl_peers_renew']) ? $data['gl_peers_renew'] : null;
        $this->container['gl_role_assign_wait'] = isset($data['gl_role_assign_wait']) ? $data['gl_role_assign_wait'] : null;
        $this->container['gl_peers_group_day'] = isset($data['gl_peers_group_day']) ? $data['gl_peers_group_day'] : null;
        $this->container['gl_self_soft_due'] = isset($data['gl_self_soft_due']) ? $data['gl_self_soft_due'] : null;
        $this->container['gl_manager_enable'] = isset($data['gl_manager_enable']) ? $data['gl_manager_enable'] : null;
        $this->container['gl_self_duration'] = isset($data['gl_self_duration']) ? $data['gl_self_duration'] : null;
        $this->container['gl_peer_scale'] = isset($data['gl_peer_scale']) ? $data['gl_peer_scale'] : null;
        $this->container['gl_show_manager_to_user'] = isset($data['gl_show_manager_to_user']) ? $data['gl_show_manager_to_user'] : null;
        $this->container['gl_manager_group'] = isset($data['gl_manager_group']) ? $data['gl_manager_group'] : null;
        $this->container['gl_peer_weight'] = isset($data['gl_peer_weight']) ? $data['gl_peer_weight'] : null;
        $this->container['gl_manager_scale'] = isset($data['gl_manager_scale']) ? $data['gl_manager_scale'] : null;
        $this->container['gl_role_change_wait'] = isset($data['gl_role_change_wait']) ? $data['gl_role_change_wait'] : null;
        $this->container['gl_manager_duration'] = isset($data['gl_manager_duration']) ? $data['gl_manager_duration'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['gl_self_exclude_users'] === null) {
            $invalid_properties[] = "'gl_self_exclude_users' can't be null";
        }
        if ($this->container['gl_self_renew'] === null) {
            $invalid_properties[] = "'gl_self_renew' can't be null";
        }
        if ($this->container['gl_peers_duration'] === null) {
            $invalid_properties[] = "'gl_peers_duration' can't be null";
        }
        if ($this->container['gl_self_enable'] === null) {
            $invalid_properties[] = "'gl_self_enable' can't be null";
        }
        if ($this->container['gl_self_scale'] === null) {
            $invalid_properties[] = "'gl_self_scale' can't be null";
        }
        if ($this->container['gl_manager_exclude_users'] === null) {
            $invalid_properties[] = "'gl_manager_exclude_users' can't be null";
        }
        if ($this->container['gl_manager_weight'] === null) {
            $invalid_properties[] = "'gl_manager_weight' can't be null";
        }
        if ($this->container['role_id'] === null) {
            $invalid_properties[] = "'role_id' can't be null";
        }
        if ($this->container['grouping_options'] === null) {
            $invalid_properties[] = "'grouping_options' can't be null";
        }
        if ($this->container['gl_peers_enable'] === null) {
            $invalid_properties[] = "'gl_peers_enable' can't be null";
        }
        if ($this->container['gl_manager_renew'] === null) {
            $invalid_properties[] = "'gl_manager_renew' can't be null";
        }
        if ($this->container['gl_manager_soft_due'] === null) {
            $invalid_properties[] = "'gl_manager_soft_due' can't be null";
        }
        if ($this->container['gl_peer_exclude_users'] === null) {
            $invalid_properties[] = "'gl_peer_exclude_users' can't be null";
        }
        if ($this->container['gl_peers_soft_due'] === null) {
            $invalid_properties[] = "'gl_peers_soft_due' can't be null";
        }
        if ($this->container['gl_self_weight'] === null) {
            $invalid_properties[] = "'gl_self_weight' can't be null";
        }
        if ($this->container['gl_peers_renew'] === null) {
            $invalid_properties[] = "'gl_peers_renew' can't be null";
        }
        if ($this->container['gl_role_assign_wait'] === null) {
            $invalid_properties[] = "'gl_role_assign_wait' can't be null";
        }
        if ($this->container['gl_self_soft_due'] === null) {
            $invalid_properties[] = "'gl_self_soft_due' can't be null";
        }
        if ($this->container['gl_manager_enable'] === null) {
            $invalid_properties[] = "'gl_manager_enable' can't be null";
        }
        if ($this->container['gl_self_duration'] === null) {
            $invalid_properties[] = "'gl_self_duration' can't be null";
        }
        if ($this->container['gl_peer_scale'] === null) {
            $invalid_properties[] = "'gl_peer_scale' can't be null";
        }
        if ($this->container['gl_show_manager_to_user'] === null) {
            $invalid_properties[] = "'gl_show_manager_to_user' can't be null";
        }
        if ($this->container['gl_peer_weight'] === null) {
            $invalid_properties[] = "'gl_peer_weight' can't be null";
        }
        if ($this->container['gl_manager_scale'] === null) {
            $invalid_properties[] = "'gl_manager_scale' can't be null";
        }
        if ($this->container['gl_role_change_wait'] === null) {
            $invalid_properties[] = "'gl_role_change_wait' can't be null";
        }
        if ($this->container['gl_manager_duration'] === null) {
            $invalid_properties[] = "'gl_manager_duration' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['gl_self_exclude_users'] === null) {
            return false;
        }
        if ($this->container['gl_self_renew'] === null) {
            return false;
        }
        if ($this->container['gl_peers_duration'] === null) {
            return false;
        }
        if ($this->container['gl_self_enable'] === null) {
            return false;
        }
        if ($this->container['gl_self_scale'] === null) {
            return false;
        }
        if ($this->container['gl_manager_exclude_users'] === null) {
            return false;
        }
        if ($this->container['gl_manager_weight'] === null) {
            return false;
        }
        if ($this->container['role_id'] === null) {
            return false;
        }
        if ($this->container['grouping_options'] === null) {
            return false;
        }
        if ($this->container['gl_peers_enable'] === null) {
            return false;
        }
        if ($this->container['gl_manager_renew'] === null) {
            return false;
        }
        if ($this->container['gl_manager_soft_due'] === null) {
            return false;
        }
        if ($this->container['gl_peer_exclude_users'] === null) {
            return false;
        }
        if ($this->container['gl_peers_soft_due'] === null) {
            return false;
        }
        if ($this->container['gl_self_weight'] === null) {
            return false;
        }
        if ($this->container['gl_peers_renew'] === null) {
            return false;
        }
        if ($this->container['gl_role_assign_wait'] === null) {
            return false;
        }
        if ($this->container['gl_self_soft_due'] === null) {
            return false;
        }
        if ($this->container['gl_manager_enable'] === null) {
            return false;
        }
        if ($this->container['gl_self_duration'] === null) {
            return false;
        }
        if ($this->container['gl_peer_scale'] === null) {
            return false;
        }
        if ($this->container['gl_show_manager_to_user'] === null) {
            return false;
        }
        if ($this->container['gl_peer_weight'] === null) {
            return false;
        }
        if ($this->container['gl_manager_scale'] === null) {
            return false;
        }
        if ($this->container['gl_role_change_wait'] === null) {
            return false;
        }
        if ($this->container['gl_manager_duration'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets gl_self_exclude_users
     * @return int[]
     */
    public function getGlSelfExcludeUsers()
    {
        return $this->container['gl_self_exclude_users'];
    }

    /**
     * Sets gl_self_exclude_users
     * @param int[] $gl_self_exclude_users Array of users ids to exclude(for self evaluation).
     * @return $this
     */
    public function setGlSelfExcludeUsers($gl_self_exclude_users)
    {
        $this->container['gl_self_exclude_users'] = $gl_self_exclude_users;

        return $this;
    }

    /**
     * Gets gl_self_renew
     * @return int
     */
    public function getGlSelfRenew()
    {
        return $this->container['gl_self_renew'];
    }

    /**
     * Sets gl_self_renew
     * @param int $gl_self_renew After how many days renew the self evaluation? Default - NULL
     * @return $this
     */
    public function setGlSelfRenew($gl_self_renew)
    {
        $this->container['gl_self_renew'] = $gl_self_renew;

        return $this;
    }

    /**
     * Gets gl_peers_duration
     * @return int
     */
    public function getGlPeersDuration()
    {
        return $this->container['gl_peers_duration'];
    }

    /**
     * Sets gl_peers_duration
     * @param int $gl_peers_duration How many days are available to perform the peers evaluation. Default - NULL
     * @return $this
     */
    public function setGlPeersDuration($gl_peers_duration)
    {
        $this->container['gl_peers_duration'] = $gl_peers_duration;

        return $this;
    }

    /**
     * Gets gl_self_enable
     * @return int
     */
    public function getGlSelfEnable()
    {
        return $this->container['gl_self_enable'];
    }

    /**
     * Sets gl_self_enable
     * @param int $gl_self_enable Is self evalaution enabled? Default - 1
     * @return $this
     */
    public function setGlSelfEnable($gl_self_enable)
    {
        $this->container['gl_self_enable'] = $gl_self_enable;

        return $this;
    }

    /**
     * Gets gl_self_scale
     * @return int
     */
    public function getGlSelfScale()
    {
        return $this->container['gl_self_scale'];
    }

    /**
     * Sets gl_self_scale
     * @param int $gl_self_scale Self evaluation scale id
     * @return $this
     */
    public function setGlSelfScale($gl_self_scale)
    {
        $this->container['gl_self_scale'] = $gl_self_scale;

        return $this;
    }

    /**
     * Gets gl_manager_exclude_users
     * @return int[]
     */
    public function getGlManagerExcludeUsers()
    {
        return $this->container['gl_manager_exclude_users'];
    }

    /**
     * Sets gl_manager_exclude_users
     * @param int[] $gl_manager_exclude_users Array of users ids to exclude(for manager evaluation).
     * @return $this
     */
    public function setGlManagerExcludeUsers($gl_manager_exclude_users)
    {
        $this->container['gl_manager_exclude_users'] = $gl_manager_exclude_users;

        return $this;
    }

    /**
     * Gets gl_manager_type
     * @return string
     */
    public function getGlManagerType()
    {
        return $this->container['gl_manager_type'];
    }

    /**
     * Sets gl_manager_type
     * @param string $gl_manager_type Manager evaluation type - Informal(I) or Formal(F). Default - &quot;I&quot;
     * @return $this
     */
    public function setGlManagerType($gl_manager_type)
    {
        $this->container['gl_manager_type'] = $gl_manager_type;

        return $this;
    }

    /**
     * Gets gl_peers_group
     * @return string
     */
    public function getGlPeersGroup()
    {
        return $this->container['gl_peers_group'];
    }

    /**
     * Sets gl_peers_group
     * @param string $gl_peers_group How are grouped the Evaluations (montly, weekly, every 6 months, yearly, every quarter, every 4 months)
     * @return $this
     */
    public function setGlPeersGroup($gl_peers_group)
    {
        $this->container['gl_peers_group'] = $gl_peers_group;

        return $this;
    }

    /**
     * Gets gl_manager_weight
     * @return float
     */
    public function getGlManagerWeight()
    {
        return $this->container['gl_manager_weight'];
    }

    /**
     * Sets gl_manager_weight
     * @param float $gl_manager_weight Manager evaluation weight
     * @return $this
     */
    public function setGlManagerWeight($gl_manager_weight)
    {
        $this->container['gl_manager_weight'] = $gl_manager_weight;

        return $this;
    }

    /**
     * Gets gl_self_group
     * @return string
     */
    public function getGlSelfGroup()
    {
        return $this->container['gl_self_group'];
    }

    /**
     * Sets gl_self_group
     * @param string $gl_self_group How are grouped the Evaluations (montly, weekly, every 6 months, yearly, every quarter, every 4 months)
     * @return $this
     */
    public function setGlSelfGroup($gl_self_group)
    {
        $this->container['gl_self_group'] = $gl_self_group;

        return $this;
    }

    /**
     * Gets gl_self_group_day
     * @return int
     */
    public function getGlSelfGroupDay()
    {
        return $this->container['gl_self_group_day'];
    }

    /**
     * Sets gl_self_group_day
     * @param int $gl_self_group_day Self group evaluation number of the day
     * @return $this
     */
    public function setGlSelfGroupDay($gl_self_group_day)
    {
        $this->container['gl_self_group_day'] = $gl_self_group_day;

        return $this;
    }

    /**
     * Gets role_id
     * @return int
     */
    public function getRoleId()
    {
        return $this->container['role_id'];
    }

    /**
     * Sets role_id
     * @param int $role_id Role ID
     * @return $this
     */
    public function setRoleId($role_id)
    {
        $this->container['role_id'] = $role_id;

        return $this;
    }

    /**
     * Gets grouping_options
     * @return \Swagger\Client\Model\SkillRoleReadEvaluationConfigGroupingOptions[]
     */
    public function getGroupingOptions()
    {
        return $this->container['grouping_options'];
    }

    /**
     * Sets grouping_options
     * @param \Swagger\Client\Model\SkillRoleReadEvaluationConfigGroupingOptions[] $grouping_options Array with predefined options for manager and peer grouping
     * @return $this
     */
    public function setGroupingOptions($grouping_options)
    {
        $this->container['grouping_options'] = $grouping_options;

        return $this;
    }

    /**
     * Gets gl_manager_group_day
     * @return int
     */
    public function getGlManagerGroupDay()
    {
        return $this->container['gl_manager_group_day'];
    }

    /**
     * Sets gl_manager_group_day
     * @param int $gl_manager_group_day Manager group evaluation number of the day
     * @return $this
     */
    public function setGlManagerGroupDay($gl_manager_group_day)
    {
        $this->container['gl_manager_group_day'] = $gl_manager_group_day;

        return $this;
    }

    /**
     * Gets gl_peers_enable
     * @return int
     */
    public function getGlPeersEnable()
    {
        return $this->container['gl_peers_enable'];
    }

    /**
     * Sets gl_peers_enable
     * @param int $gl_peers_enable Is peers evalaution enabled? Default - 1
     * @return $this
     */
    public function setGlPeersEnable($gl_peers_enable)
    {
        $this->container['gl_peers_enable'] = $gl_peers_enable;

        return $this;
    }

    /**
     * Gets gl_manager_renew
     * @return int
     */
    public function getGlManagerRenew()
    {
        return $this->container['gl_manager_renew'];
    }

    /**
     * Sets gl_manager_renew
     * @param int $gl_manager_renew After how many days renew the manager evaluation? Default - NULL
     * @return $this
     */
    public function setGlManagerRenew($gl_manager_renew)
    {
        $this->container['gl_manager_renew'] = $gl_manager_renew;

        return $this;
    }

    /**
     * Gets gl_peers_type
     * @return string
     */
    public function getGlPeersType()
    {
        return $this->container['gl_peers_type'];
    }

    /**
     * Sets gl_peers_type
     * @param string $gl_peers_type Peer evaluation type - Informal(I) or Formal(F). Default - &quot;I&quot;
     * @return $this
     */
    public function setGlPeersType($gl_peers_type)
    {
        $this->container['gl_peers_type'] = $gl_peers_type;

        return $this;
    }

    /**
     * Gets gl_manager_soft_due
     * @return int
     */
    public function getGlManagerSoftDue()
    {
        return $this->container['gl_manager_soft_due'];
    }

    /**
     * Sets gl_manager_soft_due
     * @param int $gl_manager_soft_due The due date is a soft due date? Default - 0
     * @return $this
     */
    public function setGlManagerSoftDue($gl_manager_soft_due)
    {
        $this->container['gl_manager_soft_due'] = $gl_manager_soft_due;

        return $this;
    }

    /**
     * Gets gl_peer_exclude_users
     * @return int[]
     */
    public function getGlPeerExcludeUsers()
    {
        return $this->container['gl_peer_exclude_users'];
    }

    /**
     * Sets gl_peer_exclude_users
     * @param int[] $gl_peer_exclude_users Array of users ids to exclude(for peer evaluation).
     * @return $this
     */
    public function setGlPeerExcludeUsers($gl_peer_exclude_users)
    {
        $this->container['gl_peer_exclude_users'] = $gl_peer_exclude_users;

        return $this;
    }

    /**
     * Gets gl_peers_soft_due
     * @return int
     */
    public function getGlPeersSoftDue()
    {
        return $this->container['gl_peers_soft_due'];
    }

    /**
     * Sets gl_peers_soft_due
     * @param int $gl_peers_soft_due The due date is a soft due date? Default - 0
     * @return $this
     */
    public function setGlPeersSoftDue($gl_peers_soft_due)
    {
        $this->container['gl_peers_soft_due'] = $gl_peers_soft_due;

        return $this;
    }

    /**
     * Gets gl_self_weight
     * @return float
     */
    public function getGlSelfWeight()
    {
        return $this->container['gl_self_weight'];
    }

    /**
     * Sets gl_self_weight
     * @param float $gl_self_weight Self evaluation weight
     * @return $this
     */
    public function setGlSelfWeight($gl_self_weight)
    {
        $this->container['gl_self_weight'] = $gl_self_weight;

        return $this;
    }

    /**
     * Gets gl_peers_renew
     * @return int
     */
    public function getGlPeersRenew()
    {
        return $this->container['gl_peers_renew'];
    }

    /**
     * Sets gl_peers_renew
     * @param int $gl_peers_renew After how many days renew the peers evaluation? Default - NULL
     * @return $this
     */
    public function setGlPeersRenew($gl_peers_renew)
    {
        $this->container['gl_peers_renew'] = $gl_peers_renew;

        return $this;
    }

    /**
     * Gets gl_role_assign_wait
     * @return int
     */
    public function getGlRoleAssignWait()
    {
        return $this->container['gl_role_assign_wait'];
    }

    /**
     * Sets gl_role_assign_wait
     * @param int $gl_role_assign_wait Number of days to wait before evaluating someone if he assigned to a role. Default - NULL
     * @return $this
     */
    public function setGlRoleAssignWait($gl_role_assign_wait)
    {
        $this->container['gl_role_assign_wait'] = $gl_role_assign_wait;

        return $this;
    }

    /**
     * Gets gl_peers_group_day
     * @return int
     */
    public function getGlPeersGroupDay()
    {
        return $this->container['gl_peers_group_day'];
    }

    /**
     * Sets gl_peers_group_day
     * @param int $gl_peers_group_day Peer group evaluation number of the day
     * @return $this
     */
    public function setGlPeersGroupDay($gl_peers_group_day)
    {
        $this->container['gl_peers_group_day'] = $gl_peers_group_day;

        return $this;
    }

    /**
     * Gets gl_self_soft_due
     * @return int
     */
    public function getGlSelfSoftDue()
    {
        return $this->container['gl_self_soft_due'];
    }

    /**
     * Sets gl_self_soft_due
     * @param int $gl_self_soft_due The due date is a soft due date? Default - 0
     * @return $this
     */
    public function setGlSelfSoftDue($gl_self_soft_due)
    {
        $this->container['gl_self_soft_due'] = $gl_self_soft_due;

        return $this;
    }

    /**
     * Gets gl_manager_enable
     * @return int
     */
    public function getGlManagerEnable()
    {
        return $this->container['gl_manager_enable'];
    }

    /**
     * Sets gl_manager_enable
     * @param int $gl_manager_enable Is manager evalaution enabled? Default - 1
     * @return $this
     */
    public function setGlManagerEnable($gl_manager_enable)
    {
        $this->container['gl_manager_enable'] = $gl_manager_enable;

        return $this;
    }

    /**
     * Gets gl_self_duration
     * @return int
     */
    public function getGlSelfDuration()
    {
        return $this->container['gl_self_duration'];
    }

    /**
     * Sets gl_self_duration
     * @param int $gl_self_duration How many days are available to perform the self evaluation. Default - NULL
     * @return $this
     */
    public function setGlSelfDuration($gl_self_duration)
    {
        $this->container['gl_self_duration'] = $gl_self_duration;

        return $this;
    }

    /**
     * Gets gl_peer_scale
     * @return int
     */
    public function getGlPeerScale()
    {
        return $this->container['gl_peer_scale'];
    }

    /**
     * Sets gl_peer_scale
     * @param int $gl_peer_scale Peer evaluation scale id
     * @return $this
     */
    public function setGlPeerScale($gl_peer_scale)
    {
        $this->container['gl_peer_scale'] = $gl_peer_scale;

        return $this;
    }

    /**
     * Gets gl_show_manager_to_user
     * @return int
     */
    public function getGlShowManagerToUser()
    {
        return $this->container['gl_show_manager_to_user'];
    }

    /**
     * Sets gl_show_manager_to_user
     * @param int $gl_show_manager_to_user Show manager assessment to the user
     * @return $this
     */
    public function setGlShowManagerToUser($gl_show_manager_to_user)
    {
        $this->container['gl_show_manager_to_user'] = $gl_show_manager_to_user;

        return $this;
    }

    /**
     * Gets gl_manager_group
     * @return string
     */
    public function getGlManagerGroup()
    {
        return $this->container['gl_manager_group'];
    }

    /**
     * Sets gl_manager_group
     * @param string $gl_manager_group How are grouped the Evaluations (montly, weekly, every 6 months, yearly, every quarter, every 4 months)
     * @return $this
     */
    public function setGlManagerGroup($gl_manager_group)
    {
        $this->container['gl_manager_group'] = $gl_manager_group;

        return $this;
    }

    /**
     * Gets gl_peer_weight
     * @return float
     */
    public function getGlPeerWeight()
    {
        return $this->container['gl_peer_weight'];
    }

    /**
     * Sets gl_peer_weight
     * @param float $gl_peer_weight Peer evaluation weight
     * @return $this
     */
    public function setGlPeerWeight($gl_peer_weight)
    {
        $this->container['gl_peer_weight'] = $gl_peer_weight;

        return $this;
    }

    /**
     * Gets gl_manager_scale
     * @return int
     */
    public function getGlManagerScale()
    {
        return $this->container['gl_manager_scale'];
    }

    /**
     * Sets gl_manager_scale
     * @param int $gl_manager_scale Manager evaluation scale id
     * @return $this
     */
    public function setGlManagerScale($gl_manager_scale)
    {
        $this->container['gl_manager_scale'] = $gl_manager_scale;

        return $this;
    }

    /**
     * Gets gl_role_change_wait
     * @return int
     */
    public function getGlRoleChangeWait()
    {
        return $this->container['gl_role_change_wait'];
    }

    /**
     * Sets gl_role_change_wait
     * @param int $gl_role_change_wait Number of days to wait before evaluating someone if his role is changed. Default - NULL
     * @return $this
     */
    public function setGlRoleChangeWait($gl_role_change_wait)
    {
        $this->container['gl_role_change_wait'] = $gl_role_change_wait;

        return $this;
    }

    /**
     * Gets gl_manager_duration
     * @return int
     */
    public function getGlManagerDuration()
    {
        return $this->container['gl_manager_duration'];
    }

    /**
     * Sets gl_manager_duration
     * @param int $gl_manager_duration How many days are available to perform the manager evalaution. Default - NULL
     * @return $this
     */
    public function setGlManagerDuration($gl_manager_duration)
    {
        $this->container['gl_manager_duration'] = $gl_manager_duration;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


