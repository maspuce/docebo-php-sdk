<?php
/**
 * LearnEnrollmentCreateSchema
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * LearnEnrollmentCreateSchema Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class LearnEnrollmentCreateSchema implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'LearnEnrollmentCreateSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'group_ids' => 'int[]',
        'course_ids' => 'int[]',
        'branch_ids' => 'int[]',
        'session_id' => 'int',
        'date_expire_validity' => '\DateTime',
        'enrollment_fields' => '\Swagger\Client\Model\LearnEnrollmentCreateEnrollmentFields',
        'level' => 'int',
        'subscription_record' => 'int',
        'date_begin_validity' => '\DateTime',
        'user_ids' => 'int[]',
        'notification_ids' => 'int[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'group_ids' => 'group_ids',
        'course_ids' => 'course_ids',
        'branch_ids' => 'branch_ids',
        'session_id' => 'session_id',
        'date_expire_validity' => 'date_expire_validity',
        'enrollment_fields' => 'enrollment_fields',
        'level' => 'level',
        'subscription_record' => 'subscription_record',
        'date_begin_validity' => 'date_begin_validity',
        'user_ids' => 'user_ids',
        'notification_ids' => 'notification_ids'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'group_ids' => 'setGroupIds',
        'course_ids' => 'setCourseIds',
        'branch_ids' => 'setBranchIds',
        'session_id' => 'setSessionId',
        'date_expire_validity' => 'setDateExpireValidity',
        'enrollment_fields' => 'setEnrollmentFields',
        'level' => 'setLevel',
        'subscription_record' => 'setSubscriptionRecord',
        'date_begin_validity' => 'setDateBeginValidity',
        'user_ids' => 'setUserIds',
        'notification_ids' => 'setNotificationIds'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'group_ids' => 'getGroupIds',
        'course_ids' => 'getCourseIds',
        'branch_ids' => 'getBranchIds',
        'session_id' => 'getSessionId',
        'date_expire_validity' => 'getDateExpireValidity',
        'enrollment_fields' => 'getEnrollmentFields',
        'level' => 'getLevel',
        'subscription_record' => 'getSubscriptionRecord',
        'date_begin_validity' => 'getDateBeginValidity',
        'user_ids' => 'getUserIds',
        'notification_ids' => 'getNotificationIds'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['group_ids'] = isset($data['group_ids']) ? $data['group_ids'] : null;
        $this->container['course_ids'] = isset($data['course_ids']) ? $data['course_ids'] : null;
        $this->container['branch_ids'] = isset($data['branch_ids']) ? $data['branch_ids'] : null;
        $this->container['session_id'] = isset($data['session_id']) ? $data['session_id'] : null;
        $this->container['date_expire_validity'] = isset($data['date_expire_validity']) ? $data['date_expire_validity'] : null;
        $this->container['enrollment_fields'] = isset($data['enrollment_fields']) ? $data['enrollment_fields'] : null;
        $this->container['level'] = isset($data['level']) ? $data['level'] : null;
        $this->container['subscription_record'] = isset($data['subscription_record']) ? $data['subscription_record'] : null;
        $this->container['date_begin_validity'] = isset($data['date_begin_validity']) ? $data['date_begin_validity'] : null;
        $this->container['user_ids'] = isset($data['user_ids']) ? $data['user_ids'] : null;
        $this->container['notification_ids'] = isset($data['notification_ids']) ? $data['notification_ids'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['course_ids'] === null) {
            $invalid_properties[] = "'course_ids' can't be null";
        }
        if ($this->container['enrollment_fields'] === null) {
            $invalid_properties[] = "'enrollment_fields' can't be null";
        }
        if ($this->container['level'] === null) {
            $invalid_properties[] = "'level' can't be null";
        }
        if ($this->container['user_ids'] === null) {
            $invalid_properties[] = "'user_ids' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['course_ids'] === null) {
            return false;
        }
        if ($this->container['enrollment_fields'] === null) {
            return false;
        }
        if ($this->container['level'] === null) {
            return false;
        }
        if ($this->container['user_ids'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets group_ids
     * @return int[]
     */
    public function getGroupIds()
    {
        return $this->container['group_ids'];
    }

    /**
     * Sets group_ids
     * @param int[] $group_ids The ID of group/s. If is provided subscription_record, providing of user_ids, group_ids or branch_ids is mandatory
     * @return $this
     */
    public function setGroupIds($group_ids)
    {
        $this->container['group_ids'] = $group_ids;

        return $this;
    }

    /**
     * Gets course_ids
     * @return int[]
     */
    public function getCourseIds()
    {
        return $this->container['course_ids'];
    }

    /**
     * Sets course_ids
     * @param int[] $course_ids The id of the course/s
     * @return $this
     */
    public function setCourseIds($course_ids)
    {
        $this->container['course_ids'] = $course_ids;

        return $this;
    }

    /**
     * Gets branch_ids
     * @return int[]
     */
    public function getBranchIds()
    {
        return $this->container['branch_ids'];
    }

    /**
     * Sets branch_ids
     * @param int[] $branch_ids The ID branch/es. If is provided subscription_record, providing of user_ids, group_ids or branch_ids is mandatory
     * @return $this
     */
    public function setBranchIds($branch_ids)
    {
        $this->container['branch_ids'] = $branch_ids;

        return $this;
    }

    /**
     * Gets session_id
     * @return int
     */
    public function getSessionId()
    {
        return $this->container['session_id'];
    }

    /**
     * Sets session_id
     * @param int $session_id session of webinar or ILT to be enrolled into. If the field is filled in then the user will be enrolled in the session also for webinar and ILT.
     * @return $this
     */
    public function setSessionId($session_id)
    {
        $this->container['session_id'] = $session_id;

        return $this;
    }

    /**
     * Gets date_expire_validity
     * @return \DateTime
     */
    public function getDateExpireValidity()
    {
        return $this->container['date_expire_validity'];
    }

    /**
     * Sets date_expire_validity
     * @param \DateTime $date_expire_validity Expiration date of the enrollment
     * @return $this
     */
    public function setDateExpireValidity($date_expire_validity)
    {
        $this->container['date_expire_validity'] = $date_expire_validity;

        return $this;
    }

    /**
     * Gets enrollment_fields
     * @return \Swagger\Client\Model\LearnEnrollmentCreateEnrollmentFields
     */
    public function getEnrollmentFields()
    {
        return $this->container['enrollment_fields'];
    }

    /**
     * Sets enrollment_fields
     * @param \Swagger\Client\Model\LearnEnrollmentCreateEnrollmentFields $enrollment_fields Array of additional fields for the enrollment
     * @return $this
     */
    public function setEnrollmentFields($enrollment_fields)
    {
        $this->container['enrollment_fields'] = $enrollment_fields;

        return $this;
    }

    /**
     * Gets level
     * @return int
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     * @param int $level Level of enrolled user
     * @return $this
     */
    public function setLevel($level)
    {
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets subscription_record
     * @return int
     */
    public function getSubscriptionRecord()
    {
        return $this->container['subscription_record'];
    }

    /**
     * Sets subscription_record
     * @param int $subscription_record ID of a subscription record
     * @return $this
     */
    public function setSubscriptionRecord($subscription_record)
    {
        $this->container['subscription_record'] = $subscription_record;

        return $this;
    }

    /**
     * Gets date_begin_validity
     * @return \DateTime
     */
    public function getDateBeginValidity()
    {
        return $this->container['date_begin_validity'];
    }

    /**
     * Sets date_begin_validity
     * @param \DateTime $date_begin_validity Starting date of the enrollment
     * @return $this
     */
    public function setDateBeginValidity($date_begin_validity)
    {
        $this->container['date_begin_validity'] = $date_begin_validity;

        return $this;
    }

    /**
     * Gets user_ids
     * @return int[]
     */
    public function getUserIds()
    {
        return $this->container['user_ids'];
    }

    /**
     * Sets user_ids
     * @param int[] $user_ids The id of enrolled user/s. If is provided subscription_record, providing of user_ids, group_ids or branch_ids is mandatory
     * @return $this
     */
    public function setUserIds($user_ids)
    {
        $this->container['user_ids'] = $user_ids;

        return $this;
    }

    /**
     * Gets notification_ids
     * @return int[]
     */
    public function getNotificationIds()
    {
        return $this->container['notification_ids'];
    }

    /**
     * Sets notification_ids
     * @param int[] $notification_ids ID of notifications to be triggered
     * @return $this
     */
    public function setNotificationIds($notification_ids)
    {
        $this->container['notification_ids'] = $notification_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


