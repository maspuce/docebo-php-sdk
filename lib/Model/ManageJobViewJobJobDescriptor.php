<?php
/**
 * ManageJobViewJobJobDescriptor
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ManageJobViewJobJobDescriptor Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ManageJobViewJobJobDescriptor implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ManageJobViewJobJobDescriptor';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'domain' => 'string',
        'date_created' => '\DateTime',
        'author_name' => 'string',
        'log_file' => 'string',
        'last_update' => '\DateTime',
        'hash' => 'string',
        'status' => 'string',
        'author_id' => 'int',
        'percent' => 'double',
        'errors' => 'int',
        'notify' => 'bool',
        'total' => 'int',
        'name' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'domain' => 'domain',
        'date_created' => 'date_created',
        'author_name' => 'author_name',
        'log_file' => 'log_file',
        'last_update' => 'last_update',
        'hash' => 'hash',
        'status' => 'status',
        'author_id' => 'author_id',
        'percent' => 'percent',
        'errors' => 'errors',
        'notify' => 'notify',
        'total' => 'total',
        'name' => 'name'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'domain' => 'setDomain',
        'date_created' => 'setDateCreated',
        'author_name' => 'setAuthorName',
        'log_file' => 'setLogFile',
        'last_update' => 'setLastUpdate',
        'hash' => 'setHash',
        'status' => 'setStatus',
        'author_id' => 'setAuthorId',
        'percent' => 'setPercent',
        'errors' => 'setErrors',
        'notify' => 'setNotify',
        'total' => 'setTotal',
        'name' => 'setName'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'domain' => 'getDomain',
        'date_created' => 'getDateCreated',
        'author_name' => 'getAuthorName',
        'log_file' => 'getLogFile',
        'last_update' => 'getLastUpdate',
        'hash' => 'getHash',
        'status' => 'getStatus',
        'author_id' => 'getAuthorId',
        'percent' => 'getPercent',
        'errors' => 'getErrors',
        'notify' => 'getNotify',
        'total' => 'getTotal',
        'name' => 'getName'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const STATUS_QUEUED = 'queued';
    const STATUS_RUNNING = 'running';
    const STATUS_ABORTED = 'aborted';
    const STATUS_COMPLETED = 'completed';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_QUEUED,
            self::STATUS_RUNNING,
            self::STATUS_ABORTED,
            self::STATUS_COMPLETED,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['domain'] = isset($data['domain']) ? $data['domain'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
        $this->container['author_name'] = isset($data['author_name']) ? $data['author_name'] : null;
        $this->container['log_file'] = isset($data['log_file']) ? $data['log_file'] : null;
        $this->container['last_update'] = isset($data['last_update']) ? $data['last_update'] : null;
        $this->container['hash'] = isset($data['hash']) ? $data['hash'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['author_id'] = isset($data['author_id']) ? $data['author_id'] : null;
        $this->container['percent'] = isset($data['percent']) ? $data['percent'] : null;
        $this->container['errors'] = isset($data['errors']) ? $data['errors'] : null;
        $this->container['notify'] = isset($data['notify']) ? $data['notify'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['domain'] === null) {
            $invalid_properties[] = "'domain' can't be null";
        }
        if ($this->container['date_created'] === null) {
            $invalid_properties[] = "'date_created' can't be null";
        }
        if ($this->container['author_name'] === null) {
            $invalid_properties[] = "'author_name' can't be null";
        }
        if ($this->container['log_file'] === null) {
            $invalid_properties[] = "'log_file' can't be null";
        }
        if ($this->container['last_update'] === null) {
            $invalid_properties[] = "'last_update' can't be null";
        }
        if ($this->container['hash'] === null) {
            $invalid_properties[] = "'hash' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalid_properties[] = "'status' can't be null";
        }
        $allowed_values = ["queued", "running", "aborted", "completed"];
        if (!in_array($this->container['status'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'status', must be one of 'queued', 'running', 'aborted', 'completed'.";
        }

        if ($this->container['author_id'] === null) {
            $invalid_properties[] = "'author_id' can't be null";
        }
        if ($this->container['percent'] === null) {
            $invalid_properties[] = "'percent' can't be null";
        }
        if ($this->container['errors'] === null) {
            $invalid_properties[] = "'errors' can't be null";
        }
        if ($this->container['notify'] === null) {
            $invalid_properties[] = "'notify' can't be null";
        }
        if ($this->container['total'] === null) {
            $invalid_properties[] = "'total' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['domain'] === null) {
            return false;
        }
        if ($this->container['date_created'] === null) {
            return false;
        }
        if ($this->container['author_name'] === null) {
            return false;
        }
        if ($this->container['log_file'] === null) {
            return false;
        }
        if ($this->container['last_update'] === null) {
            return false;
        }
        if ($this->container['hash'] === null) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        $allowed_values = ["queued", "running", "aborted", "completed"];
        if (!in_array($this->container['status'], $allowed_values)) {
            return false;
        }
        if ($this->container['author_id'] === null) {
            return false;
        }
        if ($this->container['percent'] === null) {
            return false;
        }
        if ($this->container['errors'] === null) {
            return false;
        }
        if ($this->container['notify'] === null) {
            return false;
        }
        if ($this->container['total'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets domain
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     * @param string $domain The LMS domain from where the job was posted.
     * @return $this
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets date_created
     * @return \DateTime
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     * @param \DateTime $date_created The MYSQL UTC datetime of when the job was created.
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets author_name
     * @return string
     */
    public function getAuthorName()
    {
        return $this->container['author_name'];
    }

    /**
     * Sets author_name
     * @param string $author_name The name of the user that created this job.
     * @return $this
     */
    public function setAuthorName($author_name)
    {
        $this->container['author_name'] = $author_name;

        return $this;
    }

    /**
     * Gets log_file
     * @return string
     */
    public function getLogFile()
    {
        return $this->container['log_file'];
    }

    /**
     * Sets log_file
     * @param string $log_file The UUID of the job.
     * @return $this
     */
    public function setLogFile($log_file)
    {
        $this->container['log_file'] = $log_file;

        return $this;
    }

    /**
     * Gets last_update
     * @return \DateTime
     */
    public function getLastUpdate()
    {
        return $this->container['last_update'];
    }

    /**
     * Sets last_update
     * @param \DateTime $last_update The MYSQL UTC datetime of when the job was last updated.
     * @return $this
     */
    public function setLastUpdate($last_update)
    {
        $this->container['last_update'] = $last_update;

        return $this;
    }

    /**
     * Gets hash
     * @return string
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     * @param string $hash The UUID of the job.
     * @return $this
     */
    public function setHash($hash)
    {
        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status The current status of the job.
     * @return $this
     */
    public function setStatus($status)
    {
        $allowed_values = array('queued', 'running', 'aborted', 'completed');
        if ((!in_array($status, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'status', must be one of 'queued', 'running', 'aborted', 'completed'");
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets author_id
     * @return int
     */
    public function getAuthorId()
    {
        return $this->container['author_id'];
    }

    /**
     * Sets author_id
     * @param int $author_id The user ID who created this job.
     * @return $this
     */
    public function setAuthorId($author_id)
    {
        $this->container['author_id'] = $author_id;

        return $this;
    }

    /**
     * Gets percent
     * @return double
     */
    public function getPercent()
    {
        return $this->container['percent'];
    }

    /**
     * Sets percent
     * @param double $percent The completion percentage of the current job.
     * @return $this
     */
    public function setPercent($percent)
    {
        $this->container['percent'] = $percent;

        return $this;
    }

    /**
     * Gets errors
     * @return int
     */
    public function getErrors()
    {
        return $this->container['errors'];
    }

    /**
     * Sets errors
     * @param int $errors How many errors were raised so far during the process.
     * @return $this
     */
    public function setErrors($errors)
    {
        $this->container['errors'] = $errors;

        return $this;
    }

    /**
     * Gets notify
     * @return bool
     */
    public function getNotify()
    {
        return $this->container['notify'];
    }

    /**
     * Sets notify
     * @param bool $notify If set to true, the system will notify the user by mail when the job is completed. (Default to true)
     * @return $this
     */
    public function setNotify($notify)
    {
        $this->container['notify'] = $notify;

        return $this;
    }

    /**
     * Gets total
     * @return int
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     * @param int $total The total amount of records calculated for this job. If job type is &quot;importer&quot; the value will be empty.
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name The Name of the job.
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


