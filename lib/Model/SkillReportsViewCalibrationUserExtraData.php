<?php
/**
 * SkillReportsViewCalibrationUserExtraData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * SkillReportsViewCalibrationUserExtraData Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SkillReportsViewCalibrationUserExtraData implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SkillReportsViewCalibrationUserExtraData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'high_limit' => 'int',
        'manager_initials' => 'string',
        'low_limit' => 'int',
        'user_id' => 'int',
        'user_initials' => 'string',
        'manager_id' => 'int',
        'user_role' => 'string',
        'manager_email' => 'string',
        'manager_role' => 'string',
        'user_email' => 'string',
        'user_name' => 'string',
        'user_avatar' => 'string',
        'manager_avatar' => 'string',
        'manager_name' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'high_limit' => 'high_limit',
        'manager_initials' => 'manager_initials',
        'low_limit' => 'low_limit',
        'user_id' => 'user_id',
        'user_initials' => 'user_initials',
        'manager_id' => 'manager_id',
        'user_role' => 'user_role',
        'manager_email' => 'manager_email',
        'manager_role' => 'manager_role',
        'user_email' => 'user_email',
        'user_name' => 'user_name',
        'user_avatar' => 'user_avatar',
        'manager_avatar' => 'manager_avatar',
        'manager_name' => 'manager_name'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'high_limit' => 'setHighLimit',
        'manager_initials' => 'setManagerInitials',
        'low_limit' => 'setLowLimit',
        'user_id' => 'setUserId',
        'user_initials' => 'setUserInitials',
        'manager_id' => 'setManagerId',
        'user_role' => 'setUserRole',
        'manager_email' => 'setManagerEmail',
        'manager_role' => 'setManagerRole',
        'user_email' => 'setUserEmail',
        'user_name' => 'setUserName',
        'user_avatar' => 'setUserAvatar',
        'manager_avatar' => 'setManagerAvatar',
        'manager_name' => 'setManagerName'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'high_limit' => 'getHighLimit',
        'manager_initials' => 'getManagerInitials',
        'low_limit' => 'getLowLimit',
        'user_id' => 'getUserId',
        'user_initials' => 'getUserInitials',
        'manager_id' => 'getManagerId',
        'user_role' => 'getUserRole',
        'manager_email' => 'getManagerEmail',
        'manager_role' => 'getManagerRole',
        'user_email' => 'getUserEmail',
        'user_name' => 'getUserName',
        'user_avatar' => 'getUserAvatar',
        'manager_avatar' => 'getManagerAvatar',
        'manager_name' => 'getManagerName'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['high_limit'] = isset($data['high_limit']) ? $data['high_limit'] : null;
        $this->container['manager_initials'] = isset($data['manager_initials']) ? $data['manager_initials'] : null;
        $this->container['low_limit'] = isset($data['low_limit']) ? $data['low_limit'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['user_initials'] = isset($data['user_initials']) ? $data['user_initials'] : null;
        $this->container['manager_id'] = isset($data['manager_id']) ? $data['manager_id'] : null;
        $this->container['user_role'] = isset($data['user_role']) ? $data['user_role'] : null;
        $this->container['manager_email'] = isset($data['manager_email']) ? $data['manager_email'] : null;
        $this->container['manager_role'] = isset($data['manager_role']) ? $data['manager_role'] : null;
        $this->container['user_email'] = isset($data['user_email']) ? $data['user_email'] : null;
        $this->container['user_name'] = isset($data['user_name']) ? $data['user_name'] : null;
        $this->container['user_avatar'] = isset($data['user_avatar']) ? $data['user_avatar'] : null;
        $this->container['manager_avatar'] = isset($data['manager_avatar']) ? $data['manager_avatar'] : null;
        $this->container['manager_name'] = isset($data['manager_name']) ? $data['manager_name'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['high_limit'] === null) {
            $invalid_properties[] = "'high_limit' can't be null";
        }
        if ($this->container['manager_initials'] === null) {
            $invalid_properties[] = "'manager_initials' can't be null";
        }
        if ($this->container['low_limit'] === null) {
            $invalid_properties[] = "'low_limit' can't be null";
        }
        if ($this->container['user_id'] === null) {
            $invalid_properties[] = "'user_id' can't be null";
        }
        if ($this->container['user_initials'] === null) {
            $invalid_properties[] = "'user_initials' can't be null";
        }
        if ($this->container['manager_id'] === null) {
            $invalid_properties[] = "'manager_id' can't be null";
        }
        if ($this->container['user_role'] === null) {
            $invalid_properties[] = "'user_role' can't be null";
        }
        if ($this->container['manager_email'] === null) {
            $invalid_properties[] = "'manager_email' can't be null";
        }
        if ($this->container['manager_role'] === null) {
            $invalid_properties[] = "'manager_role' can't be null";
        }
        if ($this->container['user_email'] === null) {
            $invalid_properties[] = "'user_email' can't be null";
        }
        if ($this->container['user_name'] === null) {
            $invalid_properties[] = "'user_name' can't be null";
        }
        if ($this->container['user_avatar'] === null) {
            $invalid_properties[] = "'user_avatar' can't be null";
        }
        if ($this->container['manager_avatar'] === null) {
            $invalid_properties[] = "'manager_avatar' can't be null";
        }
        if ($this->container['manager_name'] === null) {
            $invalid_properties[] = "'manager_name' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['high_limit'] === null) {
            return false;
        }
        if ($this->container['manager_initials'] === null) {
            return false;
        }
        if ($this->container['low_limit'] === null) {
            return false;
        }
        if ($this->container['user_id'] === null) {
            return false;
        }
        if ($this->container['user_initials'] === null) {
            return false;
        }
        if ($this->container['manager_id'] === null) {
            return false;
        }
        if ($this->container['user_role'] === null) {
            return false;
        }
        if ($this->container['manager_email'] === null) {
            return false;
        }
        if ($this->container['manager_role'] === null) {
            return false;
        }
        if ($this->container['user_email'] === null) {
            return false;
        }
        if ($this->container['user_name'] === null) {
            return false;
        }
        if ($this->container['user_avatar'] === null) {
            return false;
        }
        if ($this->container['manager_avatar'] === null) {
            return false;
        }
        if ($this->container['manager_name'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets high_limit
     * @return int
     */
    public function getHighLimit()
    {
        return $this->container['high_limit'];
    }

    /**
     * Sets high_limit
     * @param int $high_limit Evaluations rating scales high limit
     * @return $this
     */
    public function setHighLimit($high_limit)
    {
        $this->container['high_limit'] = $high_limit;

        return $this;
    }

    /**
     * Gets manager_initials
     * @return string
     */
    public function getManagerInitials()
    {
        return $this->container['manager_initials'];
    }

    /**
     * Sets manager_initials
     * @param string $manager_initials Initials of the manager
     * @return $this
     */
    public function setManagerInitials($manager_initials)
    {
        $this->container['manager_initials'] = $manager_initials;

        return $this;
    }

    /**
     * Gets low_limit
     * @return int
     */
    public function getLowLimit()
    {
        return $this->container['low_limit'];
    }

    /**
     * Sets low_limit
     * @param int $low_limit Evaluations rating scales low limit
     * @return $this
     */
    public function setLowLimit($low_limit)
    {
        $this->container['low_limit'] = $low_limit;

        return $this;
    }

    /**
     * Gets user_id
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     * @param int $user_id The ID of the user
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets user_initials
     * @return string
     */
    public function getUserInitials()
    {
        return $this->container['user_initials'];
    }

    /**
     * Sets user_initials
     * @param string $user_initials Initials of the user
     * @return $this
     */
    public function setUserInitials($user_initials)
    {
        $this->container['user_initials'] = $user_initials;

        return $this;
    }

    /**
     * Gets manager_id
     * @return int
     */
    public function getManagerId()
    {
        return $this->container['manager_id'];
    }

    /**
     * Sets manager_id
     * @param int $manager_id The ID of the manager
     * @return $this
     */
    public function setManagerId($manager_id)
    {
        $this->container['manager_id'] = $manager_id;

        return $this;
    }

    /**
     * Gets user_role
     * @return string
     */
    public function getUserRole()
    {
        return $this->container['user_role'];
    }

    /**
     * Sets user_role
     * @param string $user_role Role of the user
     * @return $this
     */
    public function setUserRole($user_role)
    {
        $this->container['user_role'] = $user_role;

        return $this;
    }

    /**
     * Gets manager_email
     * @return string
     */
    public function getManagerEmail()
    {
        return $this->container['manager_email'];
    }

    /**
     * Sets manager_email
     * @param string $manager_email E-mail of the manager
     * @return $this
     */
    public function setManagerEmail($manager_email)
    {
        $this->container['manager_email'] = $manager_email;

        return $this;
    }

    /**
     * Gets manager_role
     * @return string
     */
    public function getManagerRole()
    {
        return $this->container['manager_role'];
    }

    /**
     * Sets manager_role
     * @param string $manager_role Role of the manager
     * @return $this
     */
    public function setManagerRole($manager_role)
    {
        $this->container['manager_role'] = $manager_role;

        return $this;
    }

    /**
     * Gets user_email
     * @return string
     */
    public function getUserEmail()
    {
        return $this->container['user_email'];
    }

    /**
     * Sets user_email
     * @param string $user_email E-mail of the user
     * @return $this
     */
    public function setUserEmail($user_email)
    {
        $this->container['user_email'] = $user_email;

        return $this;
    }

    /**
     * Gets user_name
     * @return string
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     * @param string $user_name Name of the user
     * @return $this
     */
    public function setUserName($user_name)
    {
        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets user_avatar
     * @return string
     */
    public function getUserAvatar()
    {
        return $this->container['user_avatar'];
    }

    /**
     * Sets user_avatar
     * @param string $user_avatar Avatar of the user
     * @return $this
     */
    public function setUserAvatar($user_avatar)
    {
        $this->container['user_avatar'] = $user_avatar;

        return $this;
    }

    /**
     * Gets manager_avatar
     * @return string
     */
    public function getManagerAvatar()
    {
        return $this->container['manager_avatar'];
    }

    /**
     * Sets manager_avatar
     * @param string $manager_avatar Avatar of the manager
     * @return $this
     */
    public function setManagerAvatar($manager_avatar)
    {
        $this->container['manager_avatar'] = $manager_avatar;

        return $this;
    }

    /**
     * Gets manager_name
     * @return string
     */
    public function getManagerName()
    {
        return $this->container['manager_name'];
    }

    /**
     * Sets manager_name
     * @param string $manager_name Name of the manager
     * @return $this
     */
    public function setManagerName($manager_name)
    {
        $this->container['manager_name'] = $manager_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


