<?php
/**
 * ManageUserDetailsSource
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ManageUserDetailsSource Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ManageUserDetailsSource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ManageUserDetailsSource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'timezone' => 'string',
        'email_validation_status' => 'int',
        'user_id' => 'int',
        'expiration' => '\DateTime',
        'role_title' => 'string',
        'date_format' => 'string',
        'last_name' => 'string',
        'avatar' => 'string',
        'first_name' => 'string',
        'manager_last_name' => 'string',
        'email' => 'string',
        'username' => 'string',
        'level' => 'int',
        'manager_first_name' => 'string',
        'role_id' => 'int',
        'force_change' => 'string',
        'valid' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'timezone' => 'timezone',
        'email_validation_status' => 'email_validation_status',
        'user_id' => 'user_id',
        'expiration' => 'expiration',
        'role_title' => 'role_title',
        'date_format' => 'date_format',
        'last_name' => 'last_name',
        'avatar' => 'avatar',
        'first_name' => 'first_name',
        'manager_last_name' => 'manager_last_name',
        'email' => 'email',
        'username' => 'username',
        'level' => 'level',
        'manager_first_name' => 'manager_first_name',
        'role_id' => 'role_id',
        'force_change' => 'force_change',
        'valid' => 'valid'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'timezone' => 'setTimezone',
        'email_validation_status' => 'setEmailValidationStatus',
        'user_id' => 'setUserId',
        'expiration' => 'setExpiration',
        'role_title' => 'setRoleTitle',
        'date_format' => 'setDateFormat',
        'last_name' => 'setLastName',
        'avatar' => 'setAvatar',
        'first_name' => 'setFirstName',
        'manager_last_name' => 'setManagerLastName',
        'email' => 'setEmail',
        'username' => 'setUsername',
        'level' => 'setLevel',
        'manager_first_name' => 'setManagerFirstName',
        'role_id' => 'setRoleId',
        'force_change' => 'setForceChange',
        'valid' => 'setValid'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'timezone' => 'getTimezone',
        'email_validation_status' => 'getEmailValidationStatus',
        'user_id' => 'getUserId',
        'expiration' => 'getExpiration',
        'role_title' => 'getRoleTitle',
        'date_format' => 'getDateFormat',
        'last_name' => 'getLastName',
        'avatar' => 'getAvatar',
        'first_name' => 'getFirstName',
        'manager_last_name' => 'getManagerLastName',
        'email' => 'getEmail',
        'username' => 'getUsername',
        'level' => 'getLevel',
        'manager_first_name' => 'getManagerFirstName',
        'role_id' => 'getRoleId',
        'force_change' => 'getForceChange',
        'valid' => 'getValid'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
        $this->container['email_validation_status'] = isset($data['email_validation_status']) ? $data['email_validation_status'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['expiration'] = isset($data['expiration']) ? $data['expiration'] : null;
        $this->container['role_title'] = isset($data['role_title']) ? $data['role_title'] : null;
        $this->container['date_format'] = isset($data['date_format']) ? $data['date_format'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['avatar'] = isset($data['avatar']) ? $data['avatar'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['manager_last_name'] = isset($data['manager_last_name']) ? $data['manager_last_name'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['level'] = isset($data['level']) ? $data['level'] : null;
        $this->container['manager_first_name'] = isset($data['manager_first_name']) ? $data['manager_first_name'] : null;
        $this->container['role_id'] = isset($data['role_id']) ? $data['role_id'] : null;
        $this->container['force_change'] = isset($data['force_change']) ? $data['force_change'] : null;
        $this->container['valid'] = isset($data['valid']) ? $data['valid'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['timezone'] === null) {
            $invalid_properties[] = "'timezone' can't be null";
        }
        if ($this->container['email_validation_status'] === null) {
            $invalid_properties[] = "'email_validation_status' can't be null";
        }
        if ($this->container['user_id'] === null) {
            $invalid_properties[] = "'user_id' can't be null";
        }
        if ($this->container['expiration'] === null) {
            $invalid_properties[] = "'expiration' can't be null";
        }
        if ($this->container['role_title'] === null) {
            $invalid_properties[] = "'role_title' can't be null";
        }
        if ($this->container['date_format'] === null) {
            $invalid_properties[] = "'date_format' can't be null";
        }
        if ($this->container['last_name'] === null) {
            $invalid_properties[] = "'last_name' can't be null";
        }
        if ($this->container['avatar'] === null) {
            $invalid_properties[] = "'avatar' can't be null";
        }
        if ($this->container['first_name'] === null) {
            $invalid_properties[] = "'first_name' can't be null";
        }
        if ($this->container['manager_last_name'] === null) {
            $invalid_properties[] = "'manager_last_name' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalid_properties[] = "'email' can't be null";
        }
        if ($this->container['username'] === null) {
            $invalid_properties[] = "'username' can't be null";
        }
        if ($this->container['level'] === null) {
            $invalid_properties[] = "'level' can't be null";
        }
        if ($this->container['manager_first_name'] === null) {
            $invalid_properties[] = "'manager_first_name' can't be null";
        }
        if ($this->container['role_id'] === null) {
            $invalid_properties[] = "'role_id' can't be null";
        }
        if ($this->container['force_change'] === null) {
            $invalid_properties[] = "'force_change' can't be null";
        }
        if ($this->container['valid'] === null) {
            $invalid_properties[] = "'valid' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['timezone'] === null) {
            return false;
        }
        if ($this->container['email_validation_status'] === null) {
            return false;
        }
        if ($this->container['user_id'] === null) {
            return false;
        }
        if ($this->container['expiration'] === null) {
            return false;
        }
        if ($this->container['role_title'] === null) {
            return false;
        }
        if ($this->container['date_format'] === null) {
            return false;
        }
        if ($this->container['last_name'] === null) {
            return false;
        }
        if ($this->container['avatar'] === null) {
            return false;
        }
        if ($this->container['first_name'] === null) {
            return false;
        }
        if ($this->container['manager_last_name'] === null) {
            return false;
        }
        if ($this->container['email'] === null) {
            return false;
        }
        if ($this->container['username'] === null) {
            return false;
        }
        if ($this->container['level'] === null) {
            return false;
        }
        if ($this->container['manager_first_name'] === null) {
            return false;
        }
        if ($this->container['role_id'] === null) {
            return false;
        }
        if ($this->container['force_change'] === null) {
            return false;
        }
        if ($this->container['valid'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets timezone
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     * @param string $timezone Timezone (epl. 'Europe/Sofia')
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets email_validation_status
     * @return int
     */
    public function getEmailValidationStatus()
    {
        return $this->container['email_validation_status'];
    }

    /**
     * Sets email_validation_status
     * @param int $email_validation_status Email validation status of an user. It is available only for NOT pending users
     * @return $this
     */
    public function setEmailValidationStatus($email_validation_status)
    {
        $this->container['email_validation_status'] = $email_validation_status;

        return $this;
    }

    /**
     * Gets user_id
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     * @param int $user_id User ID
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets expiration
     * @return \DateTime
     */
    public function getExpiration()
    {
        return $this->container['expiration'];
    }

    /**
     * Sets expiration
     * @param \DateTime $expiration Expiration date of an user. It is available only for NOT pending users
     * @return $this
     */
    public function setExpiration($expiration)
    {
        $this->container['expiration'] = $expiration;

        return $this;
    }

    /**
     * Gets role_title
     * @return string
     */
    public function getRoleTitle()
    {
        return $this->container['role_title'];
    }

    /**
     * Sets role_title
     * @param string $role_title Role title. It is available only for NOT pending users
     * @return $this
     */
    public function setRoleTitle($role_title)
    {
        $this->container['role_title'] = $role_title;

        return $this;
    }

    /**
     * Gets date_format
     * @return string
     */
    public function getDateFormat()
    {
        return $this->container['date_format'];
    }

    /**
     * Sets date_format
     * @param string $date_format Data format (epl. 'en', 'bg', etc)
     * @return $this
     */
    public function setDateFormat($date_format)
    {
        $this->container['date_format'] = $date_format;

        return $this;
    }

    /**
     * Gets last_name
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     * @param string $last_name Last name of the user
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets avatar
     * @return string
     */
    public function getAvatar()
    {
        return $this->container['avatar'];
    }

    /**
     * Sets avatar
     * @param string $avatar Avatar of the user
     * @return $this
     */
    public function setAvatar($avatar)
    {
        $this->container['avatar'] = $avatar;

        return $this;
    }

    /**
     * Gets first_name
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     * @param string $first_name First name of the user
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets manager_last_name
     * @return string
     */
    public function getManagerLastName()
    {
        return $this->container['manager_last_name'];
    }

    /**
     * Sets manager_last_name
     * @param string $manager_last_name Manager last name. It is available only for NOT pending users
     * @return $this
     */
    public function setManagerLastName($manager_last_name)
    {
        $this->container['manager_last_name'] = $manager_last_name;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email Email of the user
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets username
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     * @param string $username Username of the user
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets level
     * @return int
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     * @param int $level Level of an user. It is available only for NOT pending users
     * @return $this
     */
    public function setLevel($level)
    {
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets manager_first_name
     * @return string
     */
    public function getManagerFirstName()
    {
        return $this->container['manager_first_name'];
    }

    /**
     * Sets manager_first_name
     * @param string $manager_first_name Manager first name. It is available only for NOT pending users
     * @return $this
     */
    public function setManagerFirstName($manager_first_name)
    {
        $this->container['manager_first_name'] = $manager_first_name;

        return $this;
    }

    /**
     * Gets role_id
     * @return int
     */
    public function getRoleId()
    {
        return $this->container['role_id'];
    }

    /**
     * Sets role_id
     * @param int $role_id Role ID. It is available only for NOT pending users
     * @return $this
     */
    public function setRoleId($role_id)
    {
        $this->container['role_id'] = $role_id;

        return $this;
    }

    /**
     * Gets force_change
     * @return string
     */
    public function getForceChange()
    {
        return $this->container['force_change'];
    }

    /**
     * Sets force_change
     * @param string $force_change Force user to change password
     * @return $this
     */
    public function setForceChange($force_change)
    {
        $this->container['force_change'] = $force_change;

        return $this;
    }

    /**
     * Gets valid
     * @return int
     */
    public function getValid()
    {
        return $this->container['valid'];
    }

    /**
     * Sets valid
     * @param int $valid Is user active. Options: 0 - not active, 1 - active
     * @return $this
     */
    public function setValid($valid)
    {
        $this->container['valid'] = $valid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


