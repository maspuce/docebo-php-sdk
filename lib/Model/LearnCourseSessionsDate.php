<?php
/**
 * LearnCourseSessionsDate
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * LearnCourseSessionsDate Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class LearnCourseSessionsDate implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'LearnCourseSessionsDate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'allowed_api_link' => 'bool',
        'timezone' => 'string',
        'tool' => 'string',
        'join_in_advance_instructor' => 'int',
        'user_status' => 'string',
        'id_location' => 'int',
        'day' => '\DateTime',
        'url' => 'string',
        'allowed_api_grab' => 'bool',
        'id_classroom' => 'int',
        'time_begin' => 'string',
        'duration' => 'int',
        'start_hour' => 'string',
        'description' => 'string',
        'join_in_advance_user' => 'int',
        'has_recording' => 'bool',
        'time_end' => 'string',
        'name' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'allowed_api_link' => 'allowed_api_link',
        'timezone' => 'timezone',
        'tool' => 'tool',
        'join_in_advance_instructor' => 'join_in_advance_instructor',
        'user_status' => 'user_status',
        'id_location' => 'id_location',
        'day' => 'day',
        'url' => 'url',
        'allowed_api_grab' => 'allowed_api_grab',
        'id_classroom' => 'id_classroom',
        'time_begin' => 'time_begin',
        'duration' => 'duration',
        'start_hour' => 'start_hour',
        'description' => 'description',
        'join_in_advance_user' => 'join_in_advance_user',
        'has_recording' => 'has_recording',
        'time_end' => 'time_end',
        'name' => 'name'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'allowed_api_link' => 'setAllowedApiLink',
        'timezone' => 'setTimezone',
        'tool' => 'setTool',
        'join_in_advance_instructor' => 'setJoinInAdvanceInstructor',
        'user_status' => 'setUserStatus',
        'id_location' => 'setIdLocation',
        'day' => 'setDay',
        'url' => 'setUrl',
        'allowed_api_grab' => 'setAllowedApiGrab',
        'id_classroom' => 'setIdClassroom',
        'time_begin' => 'setTimeBegin',
        'duration' => 'setDuration',
        'start_hour' => 'setStartHour',
        'description' => 'setDescription',
        'join_in_advance_user' => 'setJoinInAdvanceUser',
        'has_recording' => 'setHasRecording',
        'time_end' => 'setTimeEnd',
        'name' => 'setName'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'allowed_api_link' => 'getAllowedApiLink',
        'timezone' => 'getTimezone',
        'tool' => 'getTool',
        'join_in_advance_instructor' => 'getJoinInAdvanceInstructor',
        'user_status' => 'getUserStatus',
        'id_location' => 'getIdLocation',
        'day' => 'getDay',
        'url' => 'getUrl',
        'allowed_api_grab' => 'getAllowedApiGrab',
        'id_classroom' => 'getIdClassroom',
        'time_begin' => 'getTimeBegin',
        'duration' => 'getDuration',
        'start_hour' => 'getStartHour',
        'description' => 'getDescription',
        'join_in_advance_user' => 'getJoinInAdvanceUser',
        'has_recording' => 'getHasRecording',
        'time_end' => 'getTimeEnd',
        'name' => 'getName'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allowed_api_link'] = isset($data['allowed_api_link']) ? $data['allowed_api_link'] : null;
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
        $this->container['tool'] = isset($data['tool']) ? $data['tool'] : null;
        $this->container['join_in_advance_instructor'] = isset($data['join_in_advance_instructor']) ? $data['join_in_advance_instructor'] : null;
        $this->container['user_status'] = isset($data['user_status']) ? $data['user_status'] : null;
        $this->container['id_location'] = isset($data['id_location']) ? $data['id_location'] : null;
        $this->container['day'] = isset($data['day']) ? $data['day'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['allowed_api_grab'] = isset($data['allowed_api_grab']) ? $data['allowed_api_grab'] : null;
        $this->container['id_classroom'] = isset($data['id_classroom']) ? $data['id_classroom'] : null;
        $this->container['time_begin'] = isset($data['time_begin']) ? $data['time_begin'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['start_hour'] = isset($data['start_hour']) ? $data['start_hour'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['join_in_advance_user'] = isset($data['join_in_advance_user']) ? $data['join_in_advance_user'] : null;
        $this->container['has_recording'] = isset($data['has_recording']) ? $data['has_recording'] : null;
        $this->container['time_end'] = isset($data['time_end']) ? $data['time_end'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['allowed_api_link'] === null) {
            $invalid_properties[] = "'allowed_api_link' can't be null";
        }
        if ($this->container['timezone'] === null) {
            $invalid_properties[] = "'timezone' can't be null";
        }
        if ($this->container['user_status'] === null) {
            $invalid_properties[] = "'user_status' can't be null";
        }
        if ($this->container['day'] === null) {
            $invalid_properties[] = "'day' can't be null";
        }
        if ($this->container['allowed_api_grab'] === null) {
            $invalid_properties[] = "'allowed_api_grab' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['allowed_api_link'] === null) {
            return false;
        }
        if ($this->container['timezone'] === null) {
            return false;
        }
        if ($this->container['user_status'] === null) {
            return false;
        }
        if ($this->container['day'] === null) {
            return false;
        }
        if ($this->container['allowed_api_grab'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets allowed_api_link
     * @return bool
     */
    public function getAllowedApiLink()
    {
        return $this->container['allowed_api_link'];
    }

    /**
     * Sets allowed_api_link
     * @param bool $allowed_api_link If the webinar tool allows to recieve an external link for the webinar recording
     * @return $this
     */
    public function setAllowedApiLink($allowed_api_link)
    {
        $this->container['allowed_api_link'] = $allowed_api_link;

        return $this;
    }

    /**
     * Gets timezone
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     * @param string $timezone Timezone offset of this session's date
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets tool
     * @return string
     */
    public function getTool()
    {
        return $this->container['tool'];
    }

    /**
     * Sets tool
     * @param string $tool (Webinar only) The webinar tool used for this session's date
     * @return $this
     */
    public function setTool($tool)
    {
        $this->container['tool'] = $tool;

        return $this;
    }

    /**
     * Gets join_in_advance_instructor
     * @return int
     */
    public function getJoinInAdvanceInstructor()
    {
        return $this->container['join_in_advance_instructor'];
    }

    /**
     * Sets join_in_advance_instructor
     * @param int $join_in_advance_instructor (Webinar only) A period of time (in minutes) before the starting time when the instructor/teacher can join in advance
     * @return $this
     */
    public function setJoinInAdvanceInstructor($join_in_advance_instructor)
    {
        $this->container['join_in_advance_instructor'] = $join_in_advance_instructor;

        return $this;
    }

    /**
     * Gets user_status
     * @return string
     */
    public function getUserStatus()
    {
        return $this->container['user_status'];
    }

    /**
     * Sets user_status
     * @param string $user_status Status of the user inside of this session's date. For classroom - &quot;attended&quot;, &quot;not_attended&quot;. For webinar - &quot;upcoming&quot;, &quot;not_attended&quot;, &quot;attended&quot;.
     * @return $this
     */
    public function setUserStatus($user_status)
    {
        $this->container['user_status'] = $user_status;

        return $this;
    }

    /**
     * Gets id_location
     * @return int
     */
    public function getIdLocation()
    {
        return $this->container['id_location'];
    }

    /**
     * Sets id_location
     * @param int $id_location (Classroom only) Location identifier of this session's date
     * @return $this
     */
    public function setIdLocation($id_location)
    {
        $this->container['id_location'] = $id_location;

        return $this;
    }

    /**
     * Gets day
     * @return \DateTime
     */
    public function getDay()
    {
        return $this->container['day'];
    }

    /**
     * Sets day
     * @param \DateTime $day UTC date of this session's date
     * @return $this
     */
    public function setDay($day)
    {
        $this->container['day'] = $day;

        return $this;
    }

    /**
     * Gets url
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     * @param string $url (Webinar only) Custom URL. Only shown if the tool is &quot;Custom&quot;
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets allowed_api_grab
     * @return bool
     */
    public function getAllowedApiGrab()
    {
        return $this->container['allowed_api_grab'];
    }

    /**
     * Sets allowed_api_grab
     * @param bool $allowed_api_grab If the webinar tool allows to recieve an external file for the webinar recording
     * @return $this
     */
    public function setAllowedApiGrab($allowed_api_grab)
    {
        $this->container['allowed_api_grab'] = $allowed_api_grab;

        return $this;
    }

    /**
     * Gets id_classroom
     * @return int
     */
    public function getIdClassroom()
    {
        return $this->container['id_classroom'];
    }

    /**
     * Sets id_classroom
     * @param int $id_classroom (Classroom only) Classroom identifier of this session's date
     * @return $this
     */
    public function setIdClassroom($id_classroom)
    {
        $this->container['id_classroom'] = $id_classroom;

        return $this;
    }

    /**
     * Gets time_begin
     * @return string
     */
    public function getTimeBegin()
    {
        return $this->container['time_begin'];
    }

    /**
     * Sets time_begin
     * @param string $time_begin (Classroom only) Starting hour of this session's date
     * @return $this
     */
    public function setTimeBegin($time_begin)
    {
        $this->container['time_begin'] = $time_begin;

        return $this;
    }

    /**
     * Gets duration
     * @return int
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     * @param int $duration (Webinar only) Duration (in minutes) of this session's date
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets start_hour
     * @return string
     */
    public function getStartHour()
    {
        return $this->container['start_hour'];
    }

    /**
     * Sets start_hour
     * @param string $start_hour (Webinar only) Starting hour of this session's date
     * @return $this
     */
    public function setStartHour($start_hour)
    {
        $this->container['start_hour'] = $start_hour;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description (Webinar only) Description of this session's date
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets join_in_advance_user
     * @return int
     */
    public function getJoinInAdvanceUser()
    {
        return $this->container['join_in_advance_user'];
    }

    /**
     * Sets join_in_advance_user
     * @param int $join_in_advance_user (Webinar only) A period of time (in minutes) before the starting time when the user can join in advance
     * @return $this
     */
    public function setJoinInAdvanceUser($join_in_advance_user)
    {
        $this->container['join_in_advance_user'] = $join_in_advance_user;

        return $this;
    }

    /**
     * Gets has_recording
     * @return bool
     */
    public function getHasRecording()
    {
        return $this->container['has_recording'];
    }

    /**
     * Sets has_recording
     * @param bool $has_recording (Webinar only) If the webinar has training materials records then has_recording = 1 else it is 0
     * @return $this
     */
    public function setHasRecording($has_recording)
    {
        $this->container['has_recording'] = $has_recording;

        return $this;
    }

    /**
     * Gets time_end
     * @return string
     */
    public function getTimeEnd()
    {
        return $this->container['time_end'];
    }

    /**
     * Sets time_end
     * @param string $time_end (Classroom only) Ending hour of this session's date
     * @return $this
     */
    public function setTimeEnd($time_end)
    {
        $this->container['time_end'] = $time_end;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Name of this session's date
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


