<?php
/**
 * LearnCourseViewLocations
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * LearnCourseViewLocations Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class LearnCourseViewLocations implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'LearnCourseViewLocations';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accommodation' => 'string',
        'iso_code_country' => 'string',
        'telephone' => 'string',
        'id_location' => 'int',
        'id_zone' => 'int',
        'email' => 'string',
        'other_info' => 'string',
        'id_country' => 'int',
        'reaching_info' => 'string',
        'address' => 'string',
        'name_country' => 'string',
        'name' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'accommodation' => 'accommodation',
        'iso_code_country' => 'iso_code_country',
        'telephone' => 'telephone',
        'id_location' => 'id_location',
        'id_zone' => 'id_zone',
        'email' => 'email',
        'other_info' => 'other_info',
        'id_country' => 'id_country',
        'reaching_info' => 'reaching_info',
        'address' => 'address',
        'name_country' => 'name_country',
        'name' => 'name'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'accommodation' => 'setAccommodation',
        'iso_code_country' => 'setIsoCodeCountry',
        'telephone' => 'setTelephone',
        'id_location' => 'setIdLocation',
        'id_zone' => 'setIdZone',
        'email' => 'setEmail',
        'other_info' => 'setOtherInfo',
        'id_country' => 'setIdCountry',
        'reaching_info' => 'setReachingInfo',
        'address' => 'setAddress',
        'name_country' => 'setNameCountry',
        'name' => 'setName'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'accommodation' => 'getAccommodation',
        'iso_code_country' => 'getIsoCodeCountry',
        'telephone' => 'getTelephone',
        'id_location' => 'getIdLocation',
        'id_zone' => 'getIdZone',
        'email' => 'getEmail',
        'other_info' => 'getOtherInfo',
        'id_country' => 'getIdCountry',
        'reaching_info' => 'getReachingInfo',
        'address' => 'getAddress',
        'name_country' => 'getNameCountry',
        'name' => 'getName'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accommodation'] = isset($data['accommodation']) ? $data['accommodation'] : null;
        $this->container['iso_code_country'] = isset($data['iso_code_country']) ? $data['iso_code_country'] : null;
        $this->container['telephone'] = isset($data['telephone']) ? $data['telephone'] : null;
        $this->container['id_location'] = isset($data['id_location']) ? $data['id_location'] : null;
        $this->container['id_zone'] = isset($data['id_zone']) ? $data['id_zone'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['other_info'] = isset($data['other_info']) ? $data['other_info'] : null;
        $this->container['id_country'] = isset($data['id_country']) ? $data['id_country'] : null;
        $this->container['reaching_info'] = isset($data['reaching_info']) ? $data['reaching_info'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['name_country'] = isset($data['name_country']) ? $data['name_country'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['id_location'] === null) {
            $invalid_properties[] = "'id_location' can't be null";
        }
        if ($this->container['name_country'] === null) {
            $invalid_properties[] = "'name_country' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id_location'] === null) {
            return false;
        }
        if ($this->container['name_country'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets accommodation
     * @return string
     */
    public function getAccommodation()
    {
        return $this->container['accommodation'];
    }

    /**
     * Sets accommodation
     * @param string $accommodation Accomodation information for the location, e.g. nearby hotels
     * @return $this
     */
    public function setAccommodation($accommodation)
    {
        $this->container['accommodation'] = $accommodation;

        return $this;
    }

    /**
     * Gets iso_code_country
     * @return string
     */
    public function getIsoCodeCountry()
    {
        return $this->container['iso_code_country'];
    }

    /**
     * Sets iso_code_country
     * @param string $iso_code_country The iso code of the country e.g IT
     * @return $this
     */
    public function setIsoCodeCountry($iso_code_country)
    {
        $this->container['iso_code_country'] = $iso_code_country;

        return $this;
    }

    /**
     * Gets telephone
     * @return string
     */
    public function getTelephone()
    {
        return $this->container['telephone'];
    }

    /**
     * Sets telephone
     * @param string $telephone The telephone of the location
     * @return $this
     */
    public function setTelephone($telephone)
    {
        $this->container['telephone'] = $telephone;

        return $this;
    }

    /**
     * Gets id_location
     * @return int
     */
    public function getIdLocation()
    {
        return $this->container['id_location'];
    }

    /**
     * Sets id_location
     * @param int $id_location The unique identifier of the location
     * @return $this
     */
    public function setIdLocation($id_location)
    {
        $this->container['id_location'] = $id_location;

        return $this;
    }

    /**
     * Gets id_zone
     * @return int
     */
    public function getIdZone()
    {
        return $this->container['id_zone'];
    }

    /**
     * Sets id_zone
     * @param int $id_zone The zone id of the location
     * @return $this
     */
    public function setIdZone($id_zone)
    {
        $this->container['id_zone'] = $id_zone;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email The email of the location
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets other_info
     * @return string
     */
    public function getOtherInfo()
    {
        return $this->container['other_info'];
    }

    /**
     * Sets other_info
     * @param string $other_info Other extra information, as entered by the administrator while creating this location
     * @return $this
     */
    public function setOtherInfo($other_info)
    {
        $this->container['other_info'] = $other_info;

        return $this;
    }

    /**
     * Gets id_country
     * @return int
     */
    public function getIdCountry()
    {
        return $this->container['id_country'];
    }

    /**
     * Sets id_country
     * @param int $id_country The unique identifier of the country
     * @return $this
     */
    public function setIdCountry($id_country)
    {
        $this->container['id_country'] = $id_country;

        return $this;
    }

    /**
     * Gets reaching_info
     * @return string
     */
    public function getReachingInfo()
    {
        return $this->container['reaching_info'];
    }

    /**
     * Sets reaching_info
     * @param string $reaching_info Reaching location information
     * @return $this
     */
    public function setReachingInfo($reaching_info)
    {
        $this->container['reaching_info'] = $reaching_info;

        return $this;
    }

    /**
     * Gets address
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     * @param string $address The address of the location
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets name_country
     * @return string
     */
    public function getNameCountry()
    {
        return $this->container['name_country'];
    }

    /**
     * Sets name_country
     * @param string $name_country The name of the country of the location
     * @return $this
     */
    public function setNameCountry($name_country)
    {
        $this->container['name_country'] = $name_country;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name The name of the location
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


