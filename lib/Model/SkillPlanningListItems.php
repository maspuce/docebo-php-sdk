<?php
/**
 * SkillPlanningListItems
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * SkillPlanningListItems Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SkillPlanningListItems implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SkillPlanningListItems';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'period_start_date' => 'string',
        'period_details' => 'string',
        'planning_period_id' => 'int',
        'period_end_date' => 'string',
        'period_name' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'period_start_date' => 'period_start_date',
        'period_details' => 'period_details',
        'planning_period_id' => 'planning_period_id',
        'period_end_date' => 'period_end_date',
        'period_name' => 'period_name'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'period_start_date' => 'setPeriodStartDate',
        'period_details' => 'setPeriodDetails',
        'planning_period_id' => 'setPlanningPeriodId',
        'period_end_date' => 'setPeriodEndDate',
        'period_name' => 'setPeriodName'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'period_start_date' => 'getPeriodStartDate',
        'period_details' => 'getPeriodDetails',
        'planning_period_id' => 'getPlanningPeriodId',
        'period_end_date' => 'getPeriodEndDate',
        'period_name' => 'getPeriodName'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['period_start_date'] = isset($data['period_start_date']) ? $data['period_start_date'] : null;
        $this->container['period_details'] = isset($data['period_details']) ? $data['period_details'] : null;
        $this->container['planning_period_id'] = isset($data['planning_period_id']) ? $data['planning_period_id'] : null;
        $this->container['period_end_date'] = isset($data['period_end_date']) ? $data['period_end_date'] : null;
        $this->container['period_name'] = isset($data['period_name']) ? $data['period_name'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['period_start_date'] === null) {
            $invalid_properties[] = "'period_start_date' can't be null";
        }
        if ($this->container['period_details'] === null) {
            $invalid_properties[] = "'period_details' can't be null";
        }
        if ($this->container['planning_period_id'] === null) {
            $invalid_properties[] = "'planning_period_id' can't be null";
        }
        if ($this->container['period_end_date'] === null) {
            $invalid_properties[] = "'period_end_date' can't be null";
        }
        if ($this->container['period_name'] === null) {
            $invalid_properties[] = "'period_name' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['period_start_date'] === null) {
            return false;
        }
        if ($this->container['period_details'] === null) {
            return false;
        }
        if ($this->container['planning_period_id'] === null) {
            return false;
        }
        if ($this->container['period_end_date'] === null) {
            return false;
        }
        if ($this->container['period_name'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets period_start_date
     * @return string
     */
    public function getPeriodStartDate()
    {
        return $this->container['period_start_date'];
    }

    /**
     * Sets period_start_date
     * @param string $period_start_date start date of a planning period
     * @return $this
     */
    public function setPeriodStartDate($period_start_date)
    {
        $this->container['period_start_date'] = $period_start_date;

        return $this;
    }

    /**
     * Gets period_details
     * @return string
     */
    public function getPeriodDetails()
    {
        return $this->container['period_details'];
    }

    /**
     * Sets period_details
     * @param string $period_details Link to the details page
     * @return $this
     */
    public function setPeriodDetails($period_details)
    {
        $this->container['period_details'] = $period_details;

        return $this;
    }

    /**
     * Gets planning_period_id
     * @return int
     */
    public function getPlanningPeriodId()
    {
        return $this->container['planning_period_id'];
    }

    /**
     * Sets planning_period_id
     * @param int $planning_period_id ID of the planning period
     * @return $this
     */
    public function setPlanningPeriodId($planning_period_id)
    {
        $this->container['planning_period_id'] = $planning_period_id;

        return $this;
    }

    /**
     * Gets period_end_date
     * @return string
     */
    public function getPeriodEndDate()
    {
        return $this->container['period_end_date'];
    }

    /**
     * Sets period_end_date
     * @param string $period_end_date end date of a planning period
     * @return $this
     */
    public function setPeriodEndDate($period_end_date)
    {
        $this->container['period_end_date'] = $period_end_date;

        return $this;
    }

    /**
     * Gets period_name
     * @return string
     */
    public function getPeriodName()
    {
        return $this->container['period_name'];
    }

    /**
     * Sets period_name
     * @param string $period_name planning period title in the selected language
     * @return $this
     */
    public function setPeriodName($period_name)
    {
        $this->container['period_name'] = $period_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


