<?php
/**
 * SkillDevobjectViewData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * SkillDevobjectViewData Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SkillDevobjectViewData implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SkillDevobjectViewData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'completed' => 'string',
        'start_date' => '\DateTime',
        'type' => 'string',
        'act_comment' => 'string',
        'role_title' => 'string',
        'act_user_names' => 'string',
        'hr_comment' => 'string',
        'lang' => 'string',
        'act_user' => 'int',
        'role_id' => 'int',
        'end_date' => '\DateTime',
        'user_comment' => 'string',
        'rec_user' => 'int',
        'description' => 'string',
        'id_object' => 'int',
        'rec_user_names' => 'string',
        'name' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'completed' => 'completed',
        'start_date' => 'start_date',
        'type' => 'type',
        'act_comment' => 'act_comment',
        'role_title' => 'role_title',
        'act_user_names' => 'act_user_names',
        'hr_comment' => 'hr_comment',
        'lang' => 'lang',
        'act_user' => 'act_user',
        'role_id' => 'role_id',
        'end_date' => 'end_date',
        'user_comment' => 'user_comment',
        'rec_user' => 'rec_user',
        'description' => 'description',
        'id_object' => 'id_object',
        'rec_user_names' => 'rec_user_names',
        'name' => 'name'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'completed' => 'setCompleted',
        'start_date' => 'setStartDate',
        'type' => 'setType',
        'act_comment' => 'setActComment',
        'role_title' => 'setRoleTitle',
        'act_user_names' => 'setActUserNames',
        'hr_comment' => 'setHrComment',
        'lang' => 'setLang',
        'act_user' => 'setActUser',
        'role_id' => 'setRoleId',
        'end_date' => 'setEndDate',
        'user_comment' => 'setUserComment',
        'rec_user' => 'setRecUser',
        'description' => 'setDescription',
        'id_object' => 'setIdObject',
        'rec_user_names' => 'setRecUserNames',
        'name' => 'setName'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'completed' => 'getCompleted',
        'start_date' => 'getStartDate',
        'type' => 'getType',
        'act_comment' => 'getActComment',
        'role_title' => 'getRoleTitle',
        'act_user_names' => 'getActUserNames',
        'hr_comment' => 'getHrComment',
        'lang' => 'getLang',
        'act_user' => 'getActUser',
        'role_id' => 'getRoleId',
        'end_date' => 'getEndDate',
        'user_comment' => 'getUserComment',
        'rec_user' => 'getRecUser',
        'description' => 'getDescription',
        'id_object' => 'getIdObject',
        'rec_user_names' => 'getRecUserNames',
        'name' => 'getName'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['completed'] = isset($data['completed']) ? $data['completed'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['act_comment'] = isset($data['act_comment']) ? $data['act_comment'] : null;
        $this->container['role_title'] = isset($data['role_title']) ? $data['role_title'] : null;
        $this->container['act_user_names'] = isset($data['act_user_names']) ? $data['act_user_names'] : null;
        $this->container['hr_comment'] = isset($data['hr_comment']) ? $data['hr_comment'] : null;
        $this->container['lang'] = isset($data['lang']) ? $data['lang'] : null;
        $this->container['act_user'] = isset($data['act_user']) ? $data['act_user'] : null;
        $this->container['role_id'] = isset($data['role_id']) ? $data['role_id'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['user_comment'] = isset($data['user_comment']) ? $data['user_comment'] : null;
        $this->container['rec_user'] = isset($data['rec_user']) ? $data['rec_user'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['id_object'] = isset($data['id_object']) ? $data['id_object'] : null;
        $this->container['rec_user_names'] = isset($data['rec_user_names']) ? $data['rec_user_names'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['completed'] === null) {
            $invalid_properties[] = "'completed' can't be null";
        }
        if ($this->container['start_date'] === null) {
            $invalid_properties[] = "'start_date' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        if ($this->container['act_comment'] === null) {
            $invalid_properties[] = "'act_comment' can't be null";
        }
        if ($this->container['role_title'] === null) {
            $invalid_properties[] = "'role_title' can't be null";
        }
        if ($this->container['act_user_names'] === null) {
            $invalid_properties[] = "'act_user_names' can't be null";
        }
        if ($this->container['hr_comment'] === null) {
            $invalid_properties[] = "'hr_comment' can't be null";
        }
        if ($this->container['lang'] === null) {
            $invalid_properties[] = "'lang' can't be null";
        }
        if ($this->container['act_user'] === null) {
            $invalid_properties[] = "'act_user' can't be null";
        }
        if ($this->container['role_id'] === null) {
            $invalid_properties[] = "'role_id' can't be null";
        }
        if ($this->container['end_date'] === null) {
            $invalid_properties[] = "'end_date' can't be null";
        }
        if ($this->container['user_comment'] === null) {
            $invalid_properties[] = "'user_comment' can't be null";
        }
        if ($this->container['rec_user'] === null) {
            $invalid_properties[] = "'rec_user' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalid_properties[] = "'description' can't be null";
        }
        if ($this->container['id_object'] === null) {
            $invalid_properties[] = "'id_object' can't be null";
        }
        if ($this->container['rec_user_names'] === null) {
            $invalid_properties[] = "'rec_user_names' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['completed'] === null) {
            return false;
        }
        if ($this->container['start_date'] === null) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        if ($this->container['act_comment'] === null) {
            return false;
        }
        if ($this->container['role_title'] === null) {
            return false;
        }
        if ($this->container['act_user_names'] === null) {
            return false;
        }
        if ($this->container['hr_comment'] === null) {
            return false;
        }
        if ($this->container['lang'] === null) {
            return false;
        }
        if ($this->container['act_user'] === null) {
            return false;
        }
        if ($this->container['role_id'] === null) {
            return false;
        }
        if ($this->container['end_date'] === null) {
            return false;
        }
        if ($this->container['user_comment'] === null) {
            return false;
        }
        if ($this->container['rec_user'] === null) {
            return false;
        }
        if ($this->container['description'] === null) {
            return false;
        }
        if ($this->container['id_object'] === null) {
            return false;
        }
        if ($this->container['rec_user_names'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets completed
     * @return string
     */
    public function getCompleted()
    {
        return $this->container['completed'];
    }

    /**
     * Sets completed
     * @param string $completed completed status of the development object
     * @return $this
     */
    public function setCompleted($completed)
    {
        $this->container['completed'] = $completed;

        return $this;
    }

    /**
     * Gets start_date
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     * @param \DateTime $start_date start date of the development object
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type Development object type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets act_comment
     * @return string
     */
    public function getActComment()
    {
        return $this->container['act_comment'];
    }

    /**
     * Sets act_comment
     * @param string $act_comment Comment by user performing the development activity
     * @return $this
     */
    public function setActComment($act_comment)
    {
        $this->container['act_comment'] = $act_comment;

        return $this;
    }

    /**
     * Gets role_title
     * @return string
     */
    public function getRoleTitle()
    {
        return $this->container['role_title'];
    }

    /**
     * Sets role_title
     * @param string $role_title Role title
     * @return $this
     */
    public function setRoleTitle($role_title)
    {
        $this->container['role_title'] = $role_title;

        return $this;
    }

    /**
     * Gets act_user_names
     * @return string
     */
    public function getActUserNames()
    {
        return $this->container['act_user_names'];
    }

    /**
     * Sets act_user_names
     * @param string $act_user_names User names of the user performing the development activity
     * @return $this
     */
    public function setActUserNames($act_user_names)
    {
        $this->container['act_user_names'] = $act_user_names;

        return $this;
    }

    /**
     * Gets hr_comment
     * @return string
     */
    public function getHrComment()
    {
        return $this->container['hr_comment'];
    }

    /**
     * Sets hr_comment
     * @param string $hr_comment Comment by HR
     * @return $this
     */
    public function setHrComment($hr_comment)
    {
        $this->container['hr_comment'] = $hr_comment;

        return $this;
    }

    /**
     * Gets lang
     * @return string
     */
    public function getLang()
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     * @param string $lang selected language; if not set default language is used
     * @return $this
     */
    public function setLang($lang)
    {
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets act_user
     * @return int
     */
    public function getActUser()
    {
        return $this->container['act_user'];
    }

    /**
     * Sets act_user
     * @param int $act_user User id of the user performing the development activity
     * @return $this
     */
    public function setActUser($act_user)
    {
        $this->container['act_user'] = $act_user;

        return $this;
    }

    /**
     * Gets role_id
     * @return int
     */
    public function getRoleId()
    {
        return $this->container['role_id'];
    }

    /**
     * Sets role_id
     * @param int $role_id Role id
     * @return $this
     */
    public function setRoleId($role_id)
    {
        $this->container['role_id'] = $role_id;

        return $this;
    }

    /**
     * Gets end_date
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     * @param \DateTime $end_date end date of the development object
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets user_comment
     * @return string
     */
    public function getUserComment()
    {
        return $this->container['user_comment'];
    }

    /**
     * Sets user_comment
     * @param string $user_comment Comment by user receiving the development activity
     * @return $this
     */
    public function setUserComment($user_comment)
    {
        $this->container['user_comment'] = $user_comment;

        return $this;
    }

    /**
     * Gets rec_user
     * @return int
     */
    public function getRecUser()
    {
        return $this->container['rec_user'];
    }

    /**
     * Sets rec_user
     * @param int $rec_user User id of the user receiving the development activity
     * @return $this
     */
    public function setRecUser($rec_user)
    {
        $this->container['rec_user'] = $rec_user;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description development object description in the selected language
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets id_object
     * @return int
     */
    public function getIdObject()
    {
        return $this->container['id_object'];
    }

    /**
     * Sets id_object
     * @param int $id_object development object ID
     * @return $this
     */
    public function setIdObject($id_object)
    {
        $this->container['id_object'] = $id_object;

        return $this;
    }

    /**
     * Gets rec_user_names
     * @return string
     */
    public function getRecUserNames()
    {
        return $this->container['rec_user_names'];
    }

    /**
     * Sets rec_user_names
     * @param string $rec_user_names User names of the user receiving the development activity
     * @return $this
     */
    public function setRecUserNames($rec_user_names)
    {
        $this->container['rec_user_names'] = $rec_user_names;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name development object name in the selected language
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


