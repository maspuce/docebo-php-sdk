<?php
/**
 * LearnLpViewCourse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * LearnLpViewCourse Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class LearnLpViewCourse implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'LearnLpViewCourse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'short_description' => 'string',
        'time_spent' => 'int',
        'course_type' => 'string',
        'slug_name' => 'string',
        'available_seats' => '\Swagger\Client\Model\LearnLpViewAvailableSeats[]',
        'competed_lessons' => 'int',
        'lang_code' => 'string',
        'image' => 'string',
        'img_course' => 'int',
        'price' => 'float',
        'duration' => 'int',
        'description' => 'string',
        'all_lessons' => 'int',
        'name' => 'string',
        'status' => 'string',
        'id_course' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'short_description' => 'short_description',
        'time_spent' => 'time_spent',
        'course_type' => 'course_type',
        'slug_name' => 'slug_name',
        'available_seats' => 'available_seats',
        'competed_lessons' => 'competed_lessons',
        'lang_code' => 'lang_code',
        'image' => 'image',
        'img_course' => 'img_course',
        'price' => 'price',
        'duration' => 'duration',
        'description' => 'description',
        'all_lessons' => 'all_lessons',
        'name' => 'name',
        'status' => 'status',
        'id_course' => 'idCourse'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'short_description' => 'setShortDescription',
        'time_spent' => 'setTimeSpent',
        'course_type' => 'setCourseType',
        'slug_name' => 'setSlugName',
        'available_seats' => 'setAvailableSeats',
        'competed_lessons' => 'setCompetedLessons',
        'lang_code' => 'setLangCode',
        'image' => 'setImage',
        'img_course' => 'setImgCourse',
        'price' => 'setPrice',
        'duration' => 'setDuration',
        'description' => 'setDescription',
        'all_lessons' => 'setAllLessons',
        'name' => 'setName',
        'status' => 'setStatus',
        'id_course' => 'setIdCourse'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'short_description' => 'getShortDescription',
        'time_spent' => 'getTimeSpent',
        'course_type' => 'getCourseType',
        'slug_name' => 'getSlugName',
        'available_seats' => 'getAvailableSeats',
        'competed_lessons' => 'getCompetedLessons',
        'lang_code' => 'getLangCode',
        'image' => 'getImage',
        'img_course' => 'getImgCourse',
        'price' => 'getPrice',
        'duration' => 'getDuration',
        'description' => 'getDescription',
        'all_lessons' => 'getAllLessons',
        'name' => 'getName',
        'status' => 'getStatus',
        'id_course' => 'getIdCourse'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const STATUS_LOCKED = 'locked';
    const STATUS_NOT_STARTED = 'not_started';
    const STATUS_IN_PROGRESS = 'in_progress';
    const STATUS_COMPLETED = 'completed';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_LOCKED,
            self::STATUS_NOT_STARTED,
            self::STATUS_IN_PROGRESS,
            self::STATUS_COMPLETED,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['short_description'] = isset($data['short_description']) ? $data['short_description'] : null;
        $this->container['time_spent'] = isset($data['time_spent']) ? $data['time_spent'] : null;
        $this->container['course_type'] = isset($data['course_type']) ? $data['course_type'] : null;
        $this->container['slug_name'] = isset($data['slug_name']) ? $data['slug_name'] : null;
        $this->container['available_seats'] = isset($data['available_seats']) ? $data['available_seats'] : null;
        $this->container['competed_lessons'] = isset($data['competed_lessons']) ? $data['competed_lessons'] : null;
        $this->container['lang_code'] = isset($data['lang_code']) ? $data['lang_code'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['img_course'] = isset($data['img_course']) ? $data['img_course'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['all_lessons'] = isset($data['all_lessons']) ? $data['all_lessons'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['id_course'] = isset($data['id_course']) ? $data['id_course'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['short_description'] === null) {
            $invalid_properties[] = "'short_description' can't be null";
        }
        if ($this->container['time_spent'] === null) {
            $invalid_properties[] = "'time_spent' can't be null";
        }
        if ($this->container['course_type'] === null) {
            $invalid_properties[] = "'course_type' can't be null";
        }
        if ($this->container['slug_name'] === null) {
            $invalid_properties[] = "'slug_name' can't be null";
        }
        if ($this->container['competed_lessons'] === null) {
            $invalid_properties[] = "'competed_lessons' can't be null";
        }
        if ($this->container['image'] === null) {
            $invalid_properties[] = "'image' can't be null";
        }
        if ($this->container['img_course'] === null) {
            $invalid_properties[] = "'img_course' can't be null";
        }
        if ($this->container['duration'] === null) {
            $invalid_properties[] = "'duration' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalid_properties[] = "'description' can't be null";
        }
        if ($this->container['all_lessons'] === null) {
            $invalid_properties[] = "'all_lessons' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalid_properties[] = "'status' can't be null";
        }
        $allowed_values = ["locked", "not_started", "in_progress", "completed"];
        if (!in_array($this->container['status'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'status', must be one of 'locked', 'not_started', 'in_progress', 'completed'.";
        }

        if ($this->container['id_course'] === null) {
            $invalid_properties[] = "'id_course' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['short_description'] === null) {
            return false;
        }
        if ($this->container['time_spent'] === null) {
            return false;
        }
        if ($this->container['course_type'] === null) {
            return false;
        }
        if ($this->container['slug_name'] === null) {
            return false;
        }
        if ($this->container['competed_lessons'] === null) {
            return false;
        }
        if ($this->container['image'] === null) {
            return false;
        }
        if ($this->container['img_course'] === null) {
            return false;
        }
        if ($this->container['duration'] === null) {
            return false;
        }
        if ($this->container['description'] === null) {
            return false;
        }
        if ($this->container['all_lessons'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        $allowed_values = ["locked", "not_started", "in_progress", "completed"];
        if (!in_array($this->container['status'], $allowed_values)) {
            return false;
        }
        if ($this->container['id_course'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets short_description
     * @return string
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     * @param string $short_description Description of the learning plan, stripped of any HTML tags.
     * @return $this
     */
    public function setShortDescription($short_description)
    {
        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets time_spent
     * @return int
     */
    public function getTimeSpent()
    {
        return $this->container['time_spent'];
    }

    /**
     * Sets time_spent
     * @param int $time_spent Time the user spent on this course
     * @return $this
     */
    public function setTimeSpent($time_spent)
    {
        $this->container['time_spent'] = $time_spent;

        return $this;
    }

    /**
     * Gets course_type
     * @return string
     */
    public function getCourseType()
    {
        return $this->container['course_type'];
    }

    /**
     * Sets course_type
     * @param string $course_type Name of the learning plan
     * @return $this
     */
    public function setCourseType($course_type)
    {
        $this->container['course_type'] = $course_type;

        return $this;
    }

    /**
     * Gets slug_name
     * @return string
     */
    public function getSlugName()
    {
        return $this->container['slug_name'];
    }

    /**
     * Sets slug_name
     * @param string $slug_name The Slug name (name-with-dashes) of the course
     * @return $this
     */
    public function setSlugName($slug_name)
    {
        $this->container['slug_name'] = $slug_name;

        return $this;
    }

    /**
     * Gets available_seats
     * @return \Swagger\Client\Model\LearnLpViewAvailableSeats[]
     */
    public function getAvailableSeats()
    {
        return $this->container['available_seats'];
    }

    /**
     * Sets available_seats
     * @param \Swagger\Client\Model\LearnLpViewAvailableSeats[] $available_seats Available seats for the course, if course have session, data is splitted by session id
     * @return $this
     */
    public function setAvailableSeats($available_seats)
    {
        $this->container['available_seats'] = $available_seats;

        return $this;
    }

    /**
     * Gets competed_lessons
     * @return int
     */
    public function getCompetedLessons()
    {
        return $this->container['competed_lessons'];
    }

    /**
     * Sets competed_lessons
     * @param int $competed_lessons The user's completed learning objects
     * @return $this
     */
    public function setCompetedLessons($competed_lessons)
    {
        $this->container['competed_lessons'] = $competed_lessons;

        return $this;
    }

    /**
     * Gets lang_code
     * @return string
     */
    public function getLangCode()
    {
        return $this->container['lang_code'];
    }

    /**
     * Sets lang_code
     * @param string $lang_code The language of the course
     * @return $this
     */
    public function setLangCode($lang_code)
    {
        $this->container['lang_code'] = $lang_code;

        return $this;
    }

    /**
     * Gets image
     * @return string
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     * @param string $image URL to access the thumbnail image of the course
     * @return $this
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets img_course
     * @return int
     */
    public function getImgCourse()
    {
        return $this->container['img_course'];
    }

    /**
     * Sets img_course
     * @param int $img_course Unique ID of the asset that is used for the course thumbnail
     * @return $this
     */
    public function setImgCourse($img_course)
    {
        $this->container['img_course'] = $img_course;

        return $this;
    }

    /**
     * Gets price
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     * @param float $price The price of the course
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets duration
     * @return int
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     * @param int $duration Duration of the course in minutes
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description Description of the learning plan
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets all_lessons
     * @return int
     */
    public function getAllLessons()
    {
        return $this->container['all_lessons'];
    }

    /**
     * Sets all_lessons
     * @param int $all_lessons All learning objects in course
     * @return $this
     */
    public function setAllLessons($all_lessons)
    {
        $this->container['all_lessons'] = $all_lessons;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Name of the learning plan
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status Status of the user in this course
     * @return $this
     */
    public function setStatus($status)
    {
        $allowed_values = array('locked', 'not_started', 'in_progress', 'completed');
        if ((!in_array($status, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'status', must be one of 'locked', 'not_started', 'in_progress', 'completed'");
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets id_course
     * @return int
     */
    public function getIdCourse()
    {
        return $this->container['id_course'];
    }

    /**
     * Sets id_course
     * @param int $id_course Unique ID of the learning plan
     * @return $this
     */
    public function setIdCourse($id_course)
    {
        $this->container['id_course'] = $id_course;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


