<?php
/**
 * SkillEvaluationViewEvaluationData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * SkillEvaluationViewEvaluationData Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SkillEvaluationViewEvaluationData implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SkillEvaluationViewEvaluationData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'subject_title' => 'string',
        'rater' => 'string',
        'notrated' => '\Swagger\Client\Model\SkillEvaluationViewEvaluationNotrated[]',
        'evaluated' => 'string',
        'rated' => '\Swagger\Client\Model\SkillEvaluationViewEvaluationRated[]',
        'ratings' => '\Swagger\Client\Model\SkillEvaluationViewEvaluationRatings[]',
        'rater_role_description' => 'string',
        'due_date' => 'string',
        'subject_description' => 'string',
        'rater_avatar' => 'string',
        'evaluated_avatar' => 'string',
        'rater_role_title' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'subject_title' => 'subject_title',
        'rater' => 'rater',
        'notrated' => 'notrated',
        'evaluated' => 'evaluated',
        'rated' => 'rated',
        'ratings' => 'ratings',
        'rater_role_description' => 'rater_role_description',
        'due_date' => 'due_date',
        'subject_description' => 'subject_description',
        'rater_avatar' => 'rater_avatar',
        'evaluated_avatar' => 'evaluated_avatar',
        'rater_role_title' => 'rater_role_title'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'subject_title' => 'setSubjectTitle',
        'rater' => 'setRater',
        'notrated' => 'setNotrated',
        'evaluated' => 'setEvaluated',
        'rated' => 'setRated',
        'ratings' => 'setRatings',
        'rater_role_description' => 'setRaterRoleDescription',
        'due_date' => 'setDueDate',
        'subject_description' => 'setSubjectDescription',
        'rater_avatar' => 'setRaterAvatar',
        'evaluated_avatar' => 'setEvaluatedAvatar',
        'rater_role_title' => 'setRaterRoleTitle'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'subject_title' => 'getSubjectTitle',
        'rater' => 'getRater',
        'notrated' => 'getNotrated',
        'evaluated' => 'getEvaluated',
        'rated' => 'getRated',
        'ratings' => 'getRatings',
        'rater_role_description' => 'getRaterRoleDescription',
        'due_date' => 'getDueDate',
        'subject_description' => 'getSubjectDescription',
        'rater_avatar' => 'getRaterAvatar',
        'evaluated_avatar' => 'getEvaluatedAvatar',
        'rater_role_title' => 'getRaterRoleTitle'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['subject_title'] = isset($data['subject_title']) ? $data['subject_title'] : null;
        $this->container['rater'] = isset($data['rater']) ? $data['rater'] : null;
        $this->container['notrated'] = isset($data['notrated']) ? $data['notrated'] : null;
        $this->container['evaluated'] = isset($data['evaluated']) ? $data['evaluated'] : null;
        $this->container['rated'] = isset($data['rated']) ? $data['rated'] : null;
        $this->container['ratings'] = isset($data['ratings']) ? $data['ratings'] : null;
        $this->container['rater_role_description'] = isset($data['rater_role_description']) ? $data['rater_role_description'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['subject_description'] = isset($data['subject_description']) ? $data['subject_description'] : null;
        $this->container['rater_avatar'] = isset($data['rater_avatar']) ? $data['rater_avatar'] : null;
        $this->container['evaluated_avatar'] = isset($data['evaluated_avatar']) ? $data['evaluated_avatar'] : null;
        $this->container['rater_role_title'] = isset($data['rater_role_title']) ? $data['rater_role_title'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['subject_title'] === null) {
            $invalid_properties[] = "'subject_title' can't be null";
        }
        if ($this->container['rater'] === null) {
            $invalid_properties[] = "'rater' can't be null";
        }
        if ($this->container['notrated'] === null) {
            $invalid_properties[] = "'notrated' can't be null";
        }
        if ($this->container['evaluated'] === null) {
            $invalid_properties[] = "'evaluated' can't be null";
        }
        if ($this->container['rated'] === null) {
            $invalid_properties[] = "'rated' can't be null";
        }
        if ($this->container['ratings'] === null) {
            $invalid_properties[] = "'ratings' can't be null";
        }
        if ($this->container['rater_role_description'] === null) {
            $invalid_properties[] = "'rater_role_description' can't be null";
        }
        if ($this->container['due_date'] === null) {
            $invalid_properties[] = "'due_date' can't be null";
        }
        if ($this->container['subject_description'] === null) {
            $invalid_properties[] = "'subject_description' can't be null";
        }
        if ($this->container['rater_avatar'] === null) {
            $invalid_properties[] = "'rater_avatar' can't be null";
        }
        if ($this->container['evaluated_avatar'] === null) {
            $invalid_properties[] = "'evaluated_avatar' can't be null";
        }
        if ($this->container['rater_role_title'] === null) {
            $invalid_properties[] = "'rater_role_title' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['subject_title'] === null) {
            return false;
        }
        if ($this->container['rater'] === null) {
            return false;
        }
        if ($this->container['notrated'] === null) {
            return false;
        }
        if ($this->container['evaluated'] === null) {
            return false;
        }
        if ($this->container['rated'] === null) {
            return false;
        }
        if ($this->container['ratings'] === null) {
            return false;
        }
        if ($this->container['rater_role_description'] === null) {
            return false;
        }
        if ($this->container['due_date'] === null) {
            return false;
        }
        if ($this->container['subject_description'] === null) {
            return false;
        }
        if ($this->container['rater_avatar'] === null) {
            return false;
        }
        if ($this->container['evaluated_avatar'] === null) {
            return false;
        }
        if ($this->container['rater_role_title'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets subject_title
     * @return string
     */
    public function getSubjectTitle()
    {
        return $this->container['subject_title'];
    }

    /**
     * Sets subject_title
     * @param string $subject_title Role title / Skill Title
     * @return $this
     */
    public function setSubjectTitle($subject_title)
    {
        $this->container['subject_title'] = $subject_title;

        return $this;
    }

    /**
     * Gets rater
     * @return string
     */
    public function getRater()
    {
        return $this->container['rater'];
    }

    /**
     * Sets rater
     * @param string $rater Rater first and last names
     * @return $this
     */
    public function setRater($rater)
    {
        $this->container['rater'] = $rater;

        return $this;
    }

    /**
     * Gets notrated
     * @return \Swagger\Client\Model\SkillEvaluationViewEvaluationNotrated[]
     */
    public function getNotrated()
    {
        return $this->container['notrated'];
    }

    /**
     * Sets notrated
     * @param \Swagger\Client\Model\SkillEvaluationViewEvaluationNotrated[] $notrated Array of skill objects, that are not rated
     * @return $this
     */
    public function setNotrated($notrated)
    {
        $this->container['notrated'] = $notrated;

        return $this;
    }

    /**
     * Gets evaluated
     * @return string
     */
    public function getEvaluated()
    {
        return $this->container['evaluated'];
    }

    /**
     * Sets evaluated
     * @param string $evaluated Evaluated user
     * @return $this
     */
    public function setEvaluated($evaluated)
    {
        $this->container['evaluated'] = $evaluated;

        return $this;
    }

    /**
     * Gets rated
     * @return \Swagger\Client\Model\SkillEvaluationViewEvaluationRated[]
     */
    public function getRated()
    {
        return $this->container['rated'];
    }

    /**
     * Sets rated
     * @param \Swagger\Client\Model\SkillEvaluationViewEvaluationRated[] $rated Array of skill objects, that are rated
     * @return $this
     */
    public function setRated($rated)
    {
        $this->container['rated'] = $rated;

        return $this;
    }

    /**
     * Gets ratings
     * @return \Swagger\Client\Model\SkillEvaluationViewEvaluationRatings[]
     */
    public function getRatings()
    {
        return $this->container['ratings'];
    }

    /**
     * Sets ratings
     * @param \Swagger\Client\Model\SkillEvaluationViewEvaluationRatings[] $ratings Array of evaluation scale ratings
     * @return $this
     */
    public function setRatings($ratings)
    {
        $this->container['ratings'] = $ratings;

        return $this;
    }

    /**
     * Gets rater_role_description
     * @return string
     */
    public function getRaterRoleDescription()
    {
        return $this->container['rater_role_description'];
    }

    /**
     * Sets rater_role_description
     * @param string $rater_role_description Rater role description if available
     * @return $this
     */
    public function setRaterRoleDescription($rater_role_description)
    {
        $this->container['rater_role_description'] = $rater_role_description;

        return $this;
    }

    /**
     * Gets due_date
     * @return string
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     * @param string $due_date Due date
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets subject_description
     * @return string
     */
    public function getSubjectDescription()
    {
        return $this->container['subject_description'];
    }

    /**
     * Sets subject_description
     * @param string $subject_description Role description / Skill Description
     * @return $this
     */
    public function setSubjectDescription($subject_description)
    {
        $this->container['subject_description'] = $subject_description;

        return $this;
    }

    /**
     * Gets rater_avatar
     * @return string
     */
    public function getRaterAvatar()
    {
        return $this->container['rater_avatar'];
    }

    /**
     * Sets rater_avatar
     * @param string $rater_avatar Rater avatar of initials if available
     * @return $this
     */
    public function setRaterAvatar($rater_avatar)
    {
        $this->container['rater_avatar'] = $rater_avatar;

        return $this;
    }

    /**
     * Gets evaluated_avatar
     * @return string
     */
    public function getEvaluatedAvatar()
    {
        return $this->container['evaluated_avatar'];
    }

    /**
     * Sets evaluated_avatar
     * @param string $evaluated_avatar Evaluated user avatar of initials if available
     * @return $this
     */
    public function setEvaluatedAvatar($evaluated_avatar)
    {
        $this->container['evaluated_avatar'] = $evaluated_avatar;

        return $this;
    }

    /**
     * Gets rater_role_title
     * @return string
     */
    public function getRaterRoleTitle()
    {
        return $this->container['rater_role_title'];
    }

    /**
     * Sets rater_role_title
     * @param string $rater_role_title Rater role title if available
     * @return $this
     */
    public function setRaterRoleTitle($rater_role_title)
    {
        $this->container['rater_role_title'] = $rater_role_title;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


