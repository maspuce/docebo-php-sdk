<?php
/**
 * SkillRoleListRoleEvaluationsItems
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * SkillRoleListRoleEvaluationsItems Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SkillRoleListRoleEvaluationsItems implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SkillRoleListRoleEvaluationsItems';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'actions' => 'string[]',
        'status' => 'string',
        'user_names' => 'string',
        'duration' => 'string',
        'user_id' => 'int',
        'start_date' => 'string',
        'calibrated' => 'string',
        'request_id' => 'int',
        'evaluated_by' => 'string',
        'evaluator_id' => 'string',
        'last_completed' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'actions' => 'actions',
        'status' => 'status',
        'user_names' => 'user_names',
        'duration' => 'duration',
        'user_id' => 'user_id',
        'start_date' => 'start_date',
        'calibrated' => 'calibrated',
        'request_id' => 'request_id',
        'evaluated_by' => 'evaluated_by',
        'evaluator_id' => 'evaluator_id',
        'last_completed' => 'last_completed'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'actions' => 'setActions',
        'status' => 'setStatus',
        'user_names' => 'setUserNames',
        'duration' => 'setDuration',
        'user_id' => 'setUserId',
        'start_date' => 'setStartDate',
        'calibrated' => 'setCalibrated',
        'request_id' => 'setRequestId',
        'evaluated_by' => 'setEvaluatedBy',
        'evaluator_id' => 'setEvaluatorId',
        'last_completed' => 'setLastCompleted'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'actions' => 'getActions',
        'status' => 'getStatus',
        'user_names' => 'getUserNames',
        'duration' => 'getDuration',
        'user_id' => 'getUserId',
        'start_date' => 'getStartDate',
        'calibrated' => 'getCalibrated',
        'request_id' => 'getRequestId',
        'evaluated_by' => 'getEvaluatedBy',
        'evaluator_id' => 'getEvaluatorId',
        'last_completed' => 'getLastCompleted'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['actions'] = isset($data['actions']) ? $data['actions'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['user_names'] = isset($data['user_names']) ? $data['user_names'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['calibrated'] = isset($data['calibrated']) ? $data['calibrated'] : null;
        $this->container['request_id'] = isset($data['request_id']) ? $data['request_id'] : null;
        $this->container['evaluated_by'] = isset($data['evaluated_by']) ? $data['evaluated_by'] : null;
        $this->container['evaluator_id'] = isset($data['evaluator_id']) ? $data['evaluator_id'] : null;
        $this->container['last_completed'] = isset($data['last_completed']) ? $data['last_completed'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['actions'] === null) {
            $invalid_properties[] = "'actions' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalid_properties[] = "'status' can't be null";
        }
        if ($this->container['user_names'] === null) {
            $invalid_properties[] = "'user_names' can't be null";
        }
        if ($this->container['duration'] === null) {
            $invalid_properties[] = "'duration' can't be null";
        }
        if ($this->container['user_id'] === null) {
            $invalid_properties[] = "'user_id' can't be null";
        }
        if ($this->container['start_date'] === null) {
            $invalid_properties[] = "'start_date' can't be null";
        }
        if ($this->container['calibrated'] === null) {
            $invalid_properties[] = "'calibrated' can't be null";
        }
        if ($this->container['request_id'] === null) {
            $invalid_properties[] = "'request_id' can't be null";
        }
        if ($this->container['evaluated_by'] === null) {
            $invalid_properties[] = "'evaluated_by' can't be null";
        }
        if ($this->container['evaluator_id'] === null) {
            $invalid_properties[] = "'evaluator_id' can't be null";
        }
        if ($this->container['last_completed'] === null) {
            $invalid_properties[] = "'last_completed' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['actions'] === null) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        if ($this->container['user_names'] === null) {
            return false;
        }
        if ($this->container['duration'] === null) {
            return false;
        }
        if ($this->container['user_id'] === null) {
            return false;
        }
        if ($this->container['start_date'] === null) {
            return false;
        }
        if ($this->container['calibrated'] === null) {
            return false;
        }
        if ($this->container['request_id'] === null) {
            return false;
        }
        if ($this->container['evaluated_by'] === null) {
            return false;
        }
        if ($this->container['evaluator_id'] === null) {
            return false;
        }
        if ($this->container['last_completed'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets actions
     * @return string[]
     */
    public function getActions()
    {
        return $this->container['actions'];
    }

    /**
     * Sets actions
     * @param string[] $actions List with available actions
     * @return $this
     */
    public function setActions($actions)
    {
        $this->container['actions'] = $actions;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status Status of the user evaluation request
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets user_names
     * @return string
     */
    public function getUserNames()
    {
        return $this->container['user_names'];
    }

    /**
     * Sets user_names
     * @param string $user_names User names
     * @return $this
     */
    public function setUserNames($user_names)
    {
        $this->container['user_names'] = $user_names;

        return $this;
    }

    /**
     * Gets duration
     * @return string
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     * @param string $duration Evaluation duration
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets user_id
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     * @param int $user_id ID of the user
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets start_date
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     * @param string $start_date Evaluation start date
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets calibrated
     * @return string
     */
    public function getCalibrated()
    {
        return $this->container['calibrated'];
    }

    /**
     * Sets calibrated
     * @param string $calibrated Is the evaluation request calibrated
     * @return $this
     */
    public function setCalibrated($calibrated)
    {
        $this->container['calibrated'] = $calibrated;

        return $this;
    }

    /**
     * Gets request_id
     * @return int
     */
    public function getRequestId()
    {
        return $this->container['request_id'];
    }

    /**
     * Sets request_id
     * @param int $request_id Id of the user evaluation request
     * @return $this
     */
    public function setRequestId($request_id)
    {
        $this->container['request_id'] = $request_id;

        return $this;
    }

    /**
     * Gets evaluated_by
     * @return string
     */
    public function getEvaluatedBy()
    {
        return $this->container['evaluated_by'];
    }

    /**
     * Sets evaluated_by
     * @param string $evaluated_by The user who done the evaluation
     * @return $this
     */
    public function setEvaluatedBy($evaluated_by)
    {
        $this->container['evaluated_by'] = $evaluated_by;

        return $this;
    }

    /**
     * Gets evaluator_id
     * @return string
     */
    public function getEvaluatorId()
    {
        return $this->container['evaluator_id'];
    }

    /**
     * Sets evaluator_id
     * @param string $evaluator_id The user id who done the evaluation
     * @return $this
     */
    public function setEvaluatorId($evaluator_id)
    {
        $this->container['evaluator_id'] = $evaluator_id;

        return $this;
    }

    /**
     * Gets last_completed
     * @return string
     */
    public function getLastCompleted()
    {
        return $this->container['last_completed'];
    }

    /**
     * Sets last_completed
     * @param string $last_completed Last evaluation completed date or empty string if there is no previous evaluation
     * @return $this
     */
    public function setLastCompleted($last_completed)
    {
        $this->container['last_completed'] = $last_completed;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


