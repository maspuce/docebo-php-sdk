<?php
/**
 * LearnEnrollmentUpdateSingleSchema
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * LearnEnrollmentUpdateSingleSchema Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class LearnEnrollmentUpdateSingleSchema implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'LearnEnrollmentUpdateSingleSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'requesting_unsubscribe' => 'int',
        'edition_id' => 'int',
        'cancelled_by' => 'int',
        'waiting' => 'int',
        'deeplinked_by' => 'int',
        'date_inscr' => '\DateTime',
        'enrollment_fields' => '\Swagger\Client\Model\LearnEnrollmentUpdateSingleEnrollmentFields',
        'status' => 'int',
        'level' => 'int',
        'date_expire_validity' => '\DateTime',
        'score_given' => 'int',
        'date_complete' => '\DateTime',
        'new_forum_post' => 'int',
        'initial_score_given' => 'int',
        'rule_log' => 'int',
        'requesting_unsubscribe_date' => '\DateTime',
        'date_begin_validity' => '\DateTime',
        'date_last_access' => '\DateTime',
        'session_id' => 'int',
        'date_first_access' => '\DateTime',
        'absent' => 'int',
        'imported_from_connection' => 'string',
        'subscribed_by' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'requesting_unsubscribe' => 'requesting_unsubscribe',
        'edition_id' => 'edition_id',
        'cancelled_by' => 'cancelled_by',
        'waiting' => 'waiting',
        'deeplinked_by' => 'deeplinked_by',
        'date_inscr' => 'date_inscr',
        'enrollment_fields' => 'enrollment_fields',
        'status' => 'status',
        'level' => 'level',
        'date_expire_validity' => 'date_expire_validity',
        'score_given' => 'score_given',
        'date_complete' => 'date_complete',
        'new_forum_post' => 'new_forum_post',
        'initial_score_given' => 'initial_score_given',
        'rule_log' => 'rule_log',
        'requesting_unsubscribe_date' => 'requesting_unsubscribe_date',
        'date_begin_validity' => 'date_begin_validity',
        'date_last_access' => 'date_last_access',
        'session_id' => 'session_id',
        'date_first_access' => 'date_first_access',
        'absent' => 'absent',
        'imported_from_connection' => 'imported_from_connection',
        'subscribed_by' => 'subscribed_by'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'requesting_unsubscribe' => 'setRequestingUnsubscribe',
        'edition_id' => 'setEditionId',
        'cancelled_by' => 'setCancelledBy',
        'waiting' => 'setWaiting',
        'deeplinked_by' => 'setDeeplinkedBy',
        'date_inscr' => 'setDateInscr',
        'enrollment_fields' => 'setEnrollmentFields',
        'status' => 'setStatus',
        'level' => 'setLevel',
        'date_expire_validity' => 'setDateExpireValidity',
        'score_given' => 'setScoreGiven',
        'date_complete' => 'setDateComplete',
        'new_forum_post' => 'setNewForumPost',
        'initial_score_given' => 'setInitialScoreGiven',
        'rule_log' => 'setRuleLog',
        'requesting_unsubscribe_date' => 'setRequestingUnsubscribeDate',
        'date_begin_validity' => 'setDateBeginValidity',
        'date_last_access' => 'setDateLastAccess',
        'session_id' => 'setSessionId',
        'date_first_access' => 'setDateFirstAccess',
        'absent' => 'setAbsent',
        'imported_from_connection' => 'setImportedFromConnection',
        'subscribed_by' => 'setSubscribedBy'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'requesting_unsubscribe' => 'getRequestingUnsubscribe',
        'edition_id' => 'getEditionId',
        'cancelled_by' => 'getCancelledBy',
        'waiting' => 'getWaiting',
        'deeplinked_by' => 'getDeeplinkedBy',
        'date_inscr' => 'getDateInscr',
        'enrollment_fields' => 'getEnrollmentFields',
        'status' => 'getStatus',
        'level' => 'getLevel',
        'date_expire_validity' => 'getDateExpireValidity',
        'score_given' => 'getScoreGiven',
        'date_complete' => 'getDateComplete',
        'new_forum_post' => 'getNewForumPost',
        'initial_score_given' => 'getInitialScoreGiven',
        'rule_log' => 'getRuleLog',
        'requesting_unsubscribe_date' => 'getRequestingUnsubscribeDate',
        'date_begin_validity' => 'getDateBeginValidity',
        'date_last_access' => 'getDateLastAccess',
        'session_id' => 'getSessionId',
        'date_first_access' => 'getDateFirstAccess',
        'absent' => 'getAbsent',
        'imported_from_connection' => 'getImportedFromConnection',
        'subscribed_by' => 'getSubscribedBy'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['requesting_unsubscribe'] = isset($data['requesting_unsubscribe']) ? $data['requesting_unsubscribe'] : null;
        $this->container['edition_id'] = isset($data['edition_id']) ? $data['edition_id'] : null;
        $this->container['cancelled_by'] = isset($data['cancelled_by']) ? $data['cancelled_by'] : null;
        $this->container['waiting'] = isset($data['waiting']) ? $data['waiting'] : null;
        $this->container['deeplinked_by'] = isset($data['deeplinked_by']) ? $data['deeplinked_by'] : null;
        $this->container['date_inscr'] = isset($data['date_inscr']) ? $data['date_inscr'] : null;
        $this->container['enrollment_fields'] = isset($data['enrollment_fields']) ? $data['enrollment_fields'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['level'] = isset($data['level']) ? $data['level'] : null;
        $this->container['date_expire_validity'] = isset($data['date_expire_validity']) ? $data['date_expire_validity'] : null;
        $this->container['score_given'] = isset($data['score_given']) ? $data['score_given'] : null;
        $this->container['date_complete'] = isset($data['date_complete']) ? $data['date_complete'] : null;
        $this->container['new_forum_post'] = isset($data['new_forum_post']) ? $data['new_forum_post'] : null;
        $this->container['initial_score_given'] = isset($data['initial_score_given']) ? $data['initial_score_given'] : null;
        $this->container['rule_log'] = isset($data['rule_log']) ? $data['rule_log'] : null;
        $this->container['requesting_unsubscribe_date'] = isset($data['requesting_unsubscribe_date']) ? $data['requesting_unsubscribe_date'] : null;
        $this->container['date_begin_validity'] = isset($data['date_begin_validity']) ? $data['date_begin_validity'] : null;
        $this->container['date_last_access'] = isset($data['date_last_access']) ? $data['date_last_access'] : null;
        $this->container['session_id'] = isset($data['session_id']) ? $data['session_id'] : null;
        $this->container['date_first_access'] = isset($data['date_first_access']) ? $data['date_first_access'] : null;
        $this->container['absent'] = isset($data['absent']) ? $data['absent'] : null;
        $this->container['imported_from_connection'] = isset($data['imported_from_connection']) ? $data['imported_from_connection'] : null;
        $this->container['subscribed_by'] = isset($data['subscribed_by']) ? $data['subscribed_by'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets requesting_unsubscribe
     * @return int
     */
    public function getRequestingUnsubscribe()
    {
        return $this->container['requesting_unsubscribe'];
    }

    /**
     * Sets requesting_unsubscribe
     * @param int $requesting_unsubscribe Requesting unsubscribe
     * @return $this
     */
    public function setRequestingUnsubscribe($requesting_unsubscribe)
    {
        $this->container['requesting_unsubscribe'] = $requesting_unsubscribe;

        return $this;
    }

    /**
     * Gets edition_id
     * @return int
     */
    public function getEditionId()
    {
        return $this->container['edition_id'];
    }

    /**
     * Sets edition_id
     * @param int $edition_id Edition ID
     * @return $this
     */
    public function setEditionId($edition_id)
    {
        $this->container['edition_id'] = $edition_id;

        return $this;
    }

    /**
     * Gets cancelled_by
     * @return int
     */
    public function getCancelledBy()
    {
        return $this->container['cancelled_by'];
    }

    /**
     * Sets cancelled_by
     * @param int $cancelled_by Cancelled by user ID
     * @return $this
     */
    public function setCancelledBy($cancelled_by)
    {
        $this->container['cancelled_by'] = $cancelled_by;

        return $this;
    }

    /**
     * Gets waiting
     * @return int
     */
    public function getWaiting()
    {
        return $this->container['waiting'];
    }

    /**
     * Sets waiting
     * @param int $waiting Waiting
     * @return $this
     */
    public function setWaiting($waiting)
    {
        $this->container['waiting'] = $waiting;

        return $this;
    }

    /**
     * Gets deeplinked_by
     * @return int
     */
    public function getDeeplinkedBy()
    {
        return $this->container['deeplinked_by'];
    }

    /**
     * Sets deeplinked_by
     * @param int $deeplinked_by Deeplinked by user ID
     * @return $this
     */
    public function setDeeplinkedBy($deeplinked_by)
    {
        $this->container['deeplinked_by'] = $deeplinked_by;

        return $this;
    }

    /**
     * Gets date_inscr
     * @return \DateTime
     */
    public function getDateInscr()
    {
        return $this->container['date_inscr'];
    }

    /**
     * Sets date_inscr
     * @param \DateTime $date_inscr Date of insert (e.g &quot;2015-06-30 11:27:34&quot;)
     * @return $this
     */
    public function setDateInscr($date_inscr)
    {
        $this->container['date_inscr'] = $date_inscr;

        return $this;
    }

    /**
     * Gets enrollment_fields
     * @return \Swagger\Client\Model\LearnEnrollmentUpdateSingleEnrollmentFields
     */
    public function getEnrollmentFields()
    {
        return $this->container['enrollment_fields'];
    }

    /**
     * Sets enrollment_fields
     * @param \Swagger\Client\Model\LearnEnrollmentUpdateSingleEnrollmentFields $enrollment_fields Enrollment fields
     * @return $this
     */
    public function setEnrollmentFields($enrollment_fields)
    {
        $this->container['enrollment_fields'] = $enrollment_fields;

        return $this;
    }

    /**
     * Gets status
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param int $status Status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets level
     * @return int
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     * @param int $level Level of enrolled user
     * @return $this
     */
    public function setLevel($level)
    {
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets date_expire_validity
     * @return \DateTime
     */
    public function getDateExpireValidity()
    {
        return $this->container['date_expire_validity'];
    }

    /**
     * Sets date_expire_validity
     * @param \DateTime $date_expire_validity Expiry date of the enrollment (e.g &quot;2015-06-30 11:27:34&quot;)
     * @return $this
     */
    public function setDateExpireValidity($date_expire_validity)
    {
        $this->container['date_expire_validity'] = $date_expire_validity;

        return $this;
    }

    /**
     * Gets score_given
     * @return int
     */
    public function getScoreGiven()
    {
        return $this->container['score_given'];
    }

    /**
     * Sets score_given
     * @param int $score_given Score given
     * @return $this
     */
    public function setScoreGiven($score_given)
    {
        $this->container['score_given'] = $score_given;

        return $this;
    }

    /**
     * Gets date_complete
     * @return \DateTime
     */
    public function getDateComplete()
    {
        return $this->container['date_complete'];
    }

    /**
     * Sets date_complete
     * @param \DateTime $date_complete Date of last complete (e.g &quot;2015-06-30 11:27:34&quot;)
     * @return $this
     */
    public function setDateComplete($date_complete)
    {
        $this->container['date_complete'] = $date_complete;

        return $this;
    }

    /**
     * Gets new_forum_post
     * @return int
     */
    public function getNewForumPost()
    {
        return $this->container['new_forum_post'];
    }

    /**
     * Sets new_forum_post
     * @param int $new_forum_post New forum post
     * @return $this
     */
    public function setNewForumPost($new_forum_post)
    {
        $this->container['new_forum_post'] = $new_forum_post;

        return $this;
    }

    /**
     * Gets initial_score_given
     * @return int
     */
    public function getInitialScoreGiven()
    {
        return $this->container['initial_score_given'];
    }

    /**
     * Sets initial_score_given
     * @param int $initial_score_given Initial score given
     * @return $this
     */
    public function setInitialScoreGiven($initial_score_given)
    {
        $this->container['initial_score_given'] = $initial_score_given;

        return $this;
    }

    /**
     * Gets rule_log
     * @return int
     */
    public function getRuleLog()
    {
        return $this->container['rule_log'];
    }

    /**
     * Sets rule_log
     * @param int $rule_log Rule log
     * @return $this
     */
    public function setRuleLog($rule_log)
    {
        $this->container['rule_log'] = $rule_log;

        return $this;
    }

    /**
     * Gets requesting_unsubscribe_date
     * @return \DateTime
     */
    public function getRequestingUnsubscribeDate()
    {
        return $this->container['requesting_unsubscribe_date'];
    }

    /**
     * Sets requesting_unsubscribe_date
     * @param \DateTime $requesting_unsubscribe_date Requesting unsubscribe date
     * @return $this
     */
    public function setRequestingUnsubscribeDate($requesting_unsubscribe_date)
    {
        $this->container['requesting_unsubscribe_date'] = $requesting_unsubscribe_date;

        return $this;
    }

    /**
     * Gets date_begin_validity
     * @return \DateTime
     */
    public function getDateBeginValidity()
    {
        return $this->container['date_begin_validity'];
    }

    /**
     * Sets date_begin_validity
     * @param \DateTime $date_begin_validity Date begin of the enrollment (e.g &quot;2015-06-30 11:27:34&quot;)
     * @return $this
     */
    public function setDateBeginValidity($date_begin_validity)
    {
        $this->container['date_begin_validity'] = $date_begin_validity;

        return $this;
    }

    /**
     * Gets date_last_access
     * @return \DateTime
     */
    public function getDateLastAccess()
    {
        return $this->container['date_last_access'];
    }

    /**
     * Sets date_last_access
     * @param \DateTime $date_last_access Date of last access (e.g &quot;2015-06-30 11:27:34&quot;)
     * @return $this
     */
    public function setDateLastAccess($date_last_access)
    {
        $this->container['date_last_access'] = $date_last_access;

        return $this;
    }

    /**
     * Gets session_id
     * @return int
     */
    public function getSessionId()
    {
        return $this->container['session_id'];
    }

    /**
     * Sets session_id
     * @param int $session_id session of webinar or ILT to be enrolled into. If the field is filled in then the user will be enrolled in the session also for webinar and ILT.
     * @return $this
     */
    public function setSessionId($session_id)
    {
        $this->container['session_id'] = $session_id;

        return $this;
    }

    /**
     * Gets date_first_access
     * @return \DateTime
     */
    public function getDateFirstAccess()
    {
        return $this->container['date_first_access'];
    }

    /**
     * Sets date_first_access
     * @param \DateTime $date_first_access Date of first access (e.g &quot;2015-06-30 11:27:34&quot;)
     * @return $this
     */
    public function setDateFirstAccess($date_first_access)
    {
        $this->container['date_first_access'] = $date_first_access;

        return $this;
    }

    /**
     * Gets absent
     * @return int
     */
    public function getAbsent()
    {
        return $this->container['absent'];
    }

    /**
     * Sets absent
     * @param int $absent Absent
     * @return $this
     */
    public function setAbsent($absent)
    {
        $this->container['absent'] = $absent;

        return $this;
    }

    /**
     * Gets imported_from_connection
     * @return string
     */
    public function getImportedFromConnection()
    {
        return $this->container['imported_from_connection'];
    }

    /**
     * Sets imported_from_connection
     * @param string $imported_from_connection Imported from connection
     * @return $this
     */
    public function setImportedFromConnection($imported_from_connection)
    {
        $this->container['imported_from_connection'] = $imported_from_connection;

        return $this;
    }

    /**
     * Gets subscribed_by
     * @return int
     */
    public function getSubscribedBy()
    {
        return $this->container['subscribed_by'];
    }

    /**
     * Sets subscribed_by
     * @param int $subscribed_by Subscribed by user ID
     * @return $this
     */
    public function setSubscribedBy($subscribed_by)
    {
        $this->container['subscribed_by'] = $subscribed_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


