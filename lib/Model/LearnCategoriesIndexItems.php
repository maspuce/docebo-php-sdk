<?php
/**
 * LearnCategoriesIndexItems
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * LearnCategoriesIndexItems Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class LearnCategoriesIndexItems implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'LearnCategoriesIndexItems';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'i_right' => 'int',
        'lev' => 'int',
        'i_left' => 'int',
        'title' => 'string',
        'has_child' => 'int',
        'id' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'i_right' => 'iRight',
        'lev' => 'lev',
        'i_left' => 'iLeft',
        'title' => 'title',
        'has_child' => 'has_child',
        'id' => 'id'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'i_right' => 'setIRight',
        'lev' => 'setLev',
        'i_left' => 'setILeft',
        'title' => 'setTitle',
        'has_child' => 'setHasChild',
        'id' => 'setId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'i_right' => 'getIRight',
        'lev' => 'getLev',
        'i_left' => 'getILeft',
        'title' => 'getTitle',
        'has_child' => 'getHasChild',
        'id' => 'getId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['i_right'] = isset($data['i_right']) ? $data['i_right'] : null;
        $this->container['lev'] = isset($data['lev']) ? $data['lev'] : null;
        $this->container['i_left'] = isset($data['i_left']) ? $data['i_left'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['has_child'] = isset($data['has_child']) ? $data['has_child'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['i_right'] === null) {
            $invalid_properties[] = "'i_right' can't be null";
        }
        if ($this->container['lev'] === null) {
            $invalid_properties[] = "'lev' can't be null";
        }
        if ($this->container['i_left'] === null) {
            $invalid_properties[] = "'i_left' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalid_properties[] = "'title' can't be null";
        }
        if ($this->container['has_child'] === null) {
            $invalid_properties[] = "'has_child' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['i_right'] === null) {
            return false;
        }
        if ($this->container['lev'] === null) {
            return false;
        }
        if ($this->container['i_left'] === null) {
            return false;
        }
        if ($this->container['title'] === null) {
            return false;
        }
        if ($this->container['has_child'] === null) {
            return false;
        }
        if ($this->container['id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets i_right
     * @return int
     */
    public function getIRight()
    {
        return $this->container['i_right'];
    }

    /**
     * Sets i_right
     * @param int $i_right Scope to the right border of the category
     * @return $this
     */
    public function setIRight($i_right)
    {
        $this->container['i_right'] = $i_right;

        return $this;
    }

    /**
     * Gets lev
     * @return int
     */
    public function getLev()
    {
        return $this->container['lev'];
    }

    /**
     * Sets lev
     * @param int $lev Selected level of the category
     * @return $this
     */
    public function setLev($lev)
    {
        $this->container['lev'] = $lev;

        return $this;
    }

    /**
     * Gets i_left
     * @return int
     */
    public function getILeft()
    {
        return $this->container['i_left'];
    }

    /**
     * Sets i_left
     * @param int $i_left Scope from the left border of the category
     * @return $this
     */
    public function setILeft($i_left)
    {
        $this->container['i_left'] = $i_left;

        return $this;
    }

    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     * @param string $title Translated name of the category
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets has_child
     * @return int
     */
    public function getHasChild()
    {
        return $this->container['has_child'];
    }

    /**
     * Sets has_child
     * @param int $has_child If the category has child categories
     * @return $this
     */
    public function setHasChild($has_child)
    {
        $this->container['has_child'] = $has_child;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id ID of the category
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


