<?php
/**
 * ShareQuestionTopChannelsItems
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ShareQuestionTopChannelsItems Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ShareQuestionTopChannelsItems implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ShareQuestionTopChannelsItems';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'total_questions_answers' => 'int',
        'icon' => '\Swagger\Client\Model\ShareQuestionTopChannelsIcon[]',
        'channel_id' => 'int',
        'total_questions' => 'int',
        'is_growing' => 'bool',
        'total_answers' => 'int',
        'name' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'total_questions_answers' => 'total_questions_answers',
        'icon' => 'icon',
        'channel_id' => 'channel_id',
        'total_questions' => 'total_questions',
        'is_growing' => 'is_growing',
        'total_answers' => 'total_answers',
        'name' => 'name'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'total_questions_answers' => 'setTotalQuestionsAnswers',
        'icon' => 'setIcon',
        'channel_id' => 'setChannelId',
        'total_questions' => 'setTotalQuestions',
        'is_growing' => 'setIsGrowing',
        'total_answers' => 'setTotalAnswers',
        'name' => 'setName'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'total_questions_answers' => 'getTotalQuestionsAnswers',
        'icon' => 'getIcon',
        'channel_id' => 'getChannelId',
        'total_questions' => 'getTotalQuestions',
        'is_growing' => 'getIsGrowing',
        'total_answers' => 'getTotalAnswers',
        'name' => 'getName'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['total_questions_answers'] = isset($data['total_questions_answers']) ? $data['total_questions_answers'] : null;
        $this->container['icon'] = isset($data['icon']) ? $data['icon'] : null;
        $this->container['channel_id'] = isset($data['channel_id']) ? $data['channel_id'] : null;
        $this->container['total_questions'] = isset($data['total_questions']) ? $data['total_questions'] : null;
        $this->container['is_growing'] = isset($data['is_growing']) ? $data['is_growing'] : null;
        $this->container['total_answers'] = isset($data['total_answers']) ? $data['total_answers'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['total_questions_answers'] === null) {
            $invalid_properties[] = "'total_questions_answers' can't be null";
        }
        if ($this->container['icon'] === null) {
            $invalid_properties[] = "'icon' can't be null";
        }
        if ($this->container['channel_id'] === null) {
            $invalid_properties[] = "'channel_id' can't be null";
        }
        if ($this->container['total_questions'] === null) {
            $invalid_properties[] = "'total_questions' can't be null";
        }
        if ($this->container['is_growing'] === null) {
            $invalid_properties[] = "'is_growing' can't be null";
        }
        if ($this->container['total_answers'] === null) {
            $invalid_properties[] = "'total_answers' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['total_questions_answers'] === null) {
            return false;
        }
        if ($this->container['icon'] === null) {
            return false;
        }
        if ($this->container['channel_id'] === null) {
            return false;
        }
        if ($this->container['total_questions'] === null) {
            return false;
        }
        if ($this->container['is_growing'] === null) {
            return false;
        }
        if ($this->container['total_answers'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets total_questions_answers
     * @return int
     */
    public function getTotalQuestionsAnswers()
    {
        return $this->container['total_questions_answers'];
    }

    /**
     * Sets total_questions_answers
     * @param int $total_questions_answers Total count of answers and questions of the channel
     * @return $this
     */
    public function setTotalQuestionsAnswers($total_questions_answers)
    {
        $this->container['total_questions_answers'] = $total_questions_answers;

        return $this;
    }

    /**
     * Gets icon
     * @return \Swagger\Client\Model\ShareQuestionTopChannelsIcon[]
     */
    public function getIcon()
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     * @param \Swagger\Client\Model\ShareQuestionTopChannelsIcon[] $icon Channel icon details
     * @return $this
     */
    public function setIcon($icon)
    {
        $this->container['icon'] = $icon;

        return $this;
    }

    /**
     * Gets channel_id
     * @return int
     */
    public function getChannelId()
    {
        return $this->container['channel_id'];
    }

    /**
     * Sets channel_id
     * @param int $channel_id ID of the channel
     * @return $this
     */
    public function setChannelId($channel_id)
    {
        $this->container['channel_id'] = $channel_id;

        return $this;
    }

    /**
     * Gets total_questions
     * @return int
     */
    public function getTotalQuestions()
    {
        return $this->container['total_questions'];
    }

    /**
     * Sets total_questions
     * @param int $total_questions Total count of questions of the channel
     * @return $this
     */
    public function setTotalQuestions($total_questions)
    {
        $this->container['total_questions'] = $total_questions;

        return $this;
    }

    /**
     * Gets is_growing
     * @return bool
     */
    public function getIsGrowing()
    {
        return $this->container['is_growing'];
    }

    /**
     * Sets is_growing
     * @param bool $is_growing Is this channel is growing considering previous week count of questions and answers
     * @return $this
     */
    public function setIsGrowing($is_growing)
    {
        $this->container['is_growing'] = $is_growing;

        return $this;
    }

    /**
     * Gets total_answers
     * @return int
     */
    public function getTotalAnswers()
    {
        return $this->container['total_answers'];
    }

    /**
     * Sets total_answers
     * @param int $total_answers Total count of answers of the channel
     * @return $this
     */
    public function setTotalAnswers($total_answers)
    {
        $this->container['total_answers'] = $total_answers;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Name of the channel
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


