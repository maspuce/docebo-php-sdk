<?php
/**
 * ManageUserBatchItems
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ManageUserBatchItems Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ManageUserBatchItems implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ManageUserBatchItems';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'timezone' => 'string',
        'password' => 'string',
        'lastname' => 'string',
        'profile' => 'string',
        'branch_name_path' => 'string',
        'branch_code_path' => 'string',
        'date_format' => 'string',
        'branch_name' => 'string',
        'email' => 'string',
        'username' => 'string',
        'field_xxx' => 'string',
        'level' => 'string',
        'active' => 'bool',
        'branch_code' => 'string',
        'expiration_date' => 'string',
        'firstname' => 'string',
        'language' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'timezone' => 'timezone',
        'password' => 'password',
        'lastname' => 'lastname',
        'profile' => 'profile',
        'branch_name_path' => 'branch_name_path',
        'branch_code_path' => 'branch_code_path',
        'date_format' => 'date_format',
        'branch_name' => 'branch_name',
        'email' => 'email',
        'username' => 'username',
        'field_xxx' => 'field_xxx',
        'level' => 'level',
        'active' => 'active',
        'branch_code' => 'branch_code',
        'expiration_date' => 'expiration_date',
        'firstname' => 'firstname',
        'language' => 'language'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'timezone' => 'setTimezone',
        'password' => 'setPassword',
        'lastname' => 'setLastname',
        'profile' => 'setProfile',
        'branch_name_path' => 'setBranchNamePath',
        'branch_code_path' => 'setBranchCodePath',
        'date_format' => 'setDateFormat',
        'branch_name' => 'setBranchName',
        'email' => 'setEmail',
        'username' => 'setUsername',
        'field_xxx' => 'setFieldXxx',
        'level' => 'setLevel',
        'active' => 'setActive',
        'branch_code' => 'setBranchCode',
        'expiration_date' => 'setExpirationDate',
        'firstname' => 'setFirstname',
        'language' => 'setLanguage'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'timezone' => 'getTimezone',
        'password' => 'getPassword',
        'lastname' => 'getLastname',
        'profile' => 'getProfile',
        'branch_name_path' => 'getBranchNamePath',
        'branch_code_path' => 'getBranchCodePath',
        'date_format' => 'getDateFormat',
        'branch_name' => 'getBranchName',
        'email' => 'getEmail',
        'username' => 'getUsername',
        'field_xxx' => 'getFieldXxx',
        'level' => 'getLevel',
        'active' => 'getActive',
        'branch_code' => 'getBranchCode',
        'expiration_date' => 'getExpirationDate',
        'firstname' => 'getFirstname',
        'language' => 'getLanguage'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['lastname'] = isset($data['lastname']) ? $data['lastname'] : null;
        $this->container['profile'] = isset($data['profile']) ? $data['profile'] : null;
        $this->container['branch_name_path'] = isset($data['branch_name_path']) ? $data['branch_name_path'] : null;
        $this->container['branch_code_path'] = isset($data['branch_code_path']) ? $data['branch_code_path'] : null;
        $this->container['date_format'] = isset($data['date_format']) ? $data['date_format'] : null;
        $this->container['branch_name'] = isset($data['branch_name']) ? $data['branch_name'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['field_xxx'] = isset($data['field_xxx']) ? $data['field_xxx'] : null;
        $this->container['level'] = isset($data['level']) ? $data['level'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['branch_code'] = isset($data['branch_code']) ? $data['branch_code'] : null;
        $this->container['expiration_date'] = isset($data['expiration_date']) ? $data['expiration_date'] : null;
        $this->container['firstname'] = isset($data['firstname']) ? $data['firstname'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['username'] === null) {
            $invalid_properties[] = "'username' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['username'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets timezone
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     * @param string $timezone Set a user's timezone, eg: Europe/Rome
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets password
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     * @param string $password Set a user's password
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets lastname
     * @return string
     */
    public function getLastname()
    {
        return $this->container['lastname'];
    }

    /**
     * Sets lastname
     * @param string $lastname User's last name
     * @return $this
     */
    public function setLastname($lastname)
    {
        $this->container['lastname'] = $lastname;

        return $this;
    }

    /**
     * Gets profile
     * @return string
     */
    public function getProfile()
    {
        return $this->container['profile'];
    }

    /**
     * Sets profile
     * @param string $profile Will be the profile name for the Power User. Will be ignored if the user level is &quot;user&quot;
     * @return $this
     */
    public function setProfile($profile)
    {
        $this->container['profile'] = $profile;

        return $this;
    }

    /**
     * Gets branch_name_path
     * @return string
     */
    public function getBranchNamePath()
    {
        return $this->container['branch_name_path'];
    }

    /**
     * Sets branch_name_path
     * @param string $branch_name_path Points to a full branch path, separated by slashes. If any part of the branch does not exist yet, it will be automatically created (eg: branch 1/branch 2/branch 3)
     * @return $this
     */
    public function setBranchNamePath($branch_name_path)
    {
        $this->container['branch_name_path'] = $branch_name_path;

        return $this;
    }

    /**
     * Gets branch_code_path
     * @return string
     */
    public function getBranchCodePath()
    {
        return $this->container['branch_code_path'];
    }

    /**
     * Sets branch_code_path
     * @param string $branch_code_path Points to the codes of a full branch path, separated by slashes. If a part of the branch does not exist yet, it will be automatically created (eg: b01/b02/b03). In order to create a new branch, both name and code are required. They must be composed of the same structure. If something fails, an error will be shown.
     * @return $this
     */
    public function setBranchCodePath($branch_code_path)
    {
        $this->container['branch_code_path'] = $branch_code_path;

        return $this;
    }

    /**
     * Gets date_format
     * @return string
     */
    public function getDateFormat()
    {
        return $this->container['date_format'];
    }

    /**
     * Sets date_format
     * @param string $date_format Set a user's date formatting, eg: yyyy-mm-dd
     * @return $this
     */
    public function setDateFormat($date_format)
    {
        $this->container['date_format'] = $date_format;

        return $this;
    }

    /**
     * Gets branch_name
     * @return string
     */
    public function getBranchName()
    {
        return $this->container['branch_name'];
    }

    /**
     * Sets branch_name
     * @param string $branch_name Identify a branch by name. If none or multiple branches are found, an error will be shown
     * @return $this
     */
    public function setBranchName($branch_name)
    {
        $this->container['branch_name'] = $branch_name;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email Set a user's e-mail address
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets username
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     * @param string $username The unique username for a user
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets field_xxx
     * @return string
     */
    public function getFieldXxx()
    {
        return $this->container['field_xxx'];
    }

    /**
     * Sets field_xxx
     * @param string $field_xxx Multiple additional fields may be added. Simply replace &quot;xxx&quot; with the right field ID (do not use the &quot;human&quot; additional field name
     * @return $this
     */
    public function setFieldXxx($field_xxx)
    {
        $this->container['field_xxx'] = $field_xxx;

        return $this;
    }

    /**
     * Gets level
     * @return string
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     * @param string $level The user's permissions. This will be either &quot;user&quot; or &quot;poweruser&quot;. If omitted, defaults to &quot;user&quot;
     * @return $this
     */
    public function setLevel($level)
    {
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets active
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     * @param bool $active Is a user active (true) or suspended (false)
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets branch_code
     * @return string
     */
    public function getBranchCode()
    {
        return $this->container['branch_code'];
    }

    /**
     * Sets branch_code
     * @param string $branch_code Identify a branch by its code. If not found, an error will be shown
     * @return $this
     */
    public function setBranchCode($branch_code)
    {
        $this->container['branch_code'] = $branch_code;

        return $this;
    }

    /**
     * Gets expiration_date
     * @return string
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     * @param string $expiration_date End the validity of a user account to a certain date. Must be in YYYY-MM-DD format: Eg: 2018-12-31
     * @return $this
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets firstname
     * @return string
     */
    public function getFirstname()
    {
        return $this->container['firstname'];
    }

    /**
     * Sets firstname
     * @param string $firstname User's first name
     * @return $this
     */
    public function setFirstname($firstname)
    {
        $this->container['firstname'] = $firstname;

        return $this;
    }

    /**
     * Gets language
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     * @param string $language Set the platform language for the user
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


