<?php
/**
 * SkillReportsListCalibrationUsersItems
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * SkillReportsListCalibrationUsersItems Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SkillReportsListCalibrationUsersItems implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SkillReportsListCalibrationUsersItems';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'manager_request_id' => 'int',
        'email' => 'string',
        'mmi' => 'float',
        'user_name' => 'string',
        'status' => 'string',
        'user_id' => 'int',
        'role_id' => 'int',
        'role_name' => 'string',
        'actions' => 'int',
        'user_request_id' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'manager_request_id' => 'manager_request_id',
        'email' => 'email',
        'mmi' => 'mmi',
        'user_name' => 'user_name',
        'status' => 'status',
        'user_id' => 'user_id',
        'role_id' => 'role_id',
        'role_name' => 'role_name',
        'actions' => 'actions',
        'user_request_id' => 'user_request_id'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'manager_request_id' => 'setManagerRequestId',
        'email' => 'setEmail',
        'mmi' => 'setMmi',
        'user_name' => 'setUserName',
        'status' => 'setStatus',
        'user_id' => 'setUserId',
        'role_id' => 'setRoleId',
        'role_name' => 'setRoleName',
        'actions' => 'setActions',
        'user_request_id' => 'setUserRequestId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'manager_request_id' => 'getManagerRequestId',
        'email' => 'getEmail',
        'mmi' => 'getMmi',
        'user_name' => 'getUserName',
        'status' => 'getStatus',
        'user_id' => 'getUserId',
        'role_id' => 'getRoleId',
        'role_name' => 'getRoleName',
        'actions' => 'getActions',
        'user_request_id' => 'getUserRequestId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['manager_request_id'] = isset($data['manager_request_id']) ? $data['manager_request_id'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['mmi'] = isset($data['mmi']) ? $data['mmi'] : null;
        $this->container['user_name'] = isset($data['user_name']) ? $data['user_name'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['role_id'] = isset($data['role_id']) ? $data['role_id'] : null;
        $this->container['role_name'] = isset($data['role_name']) ? $data['role_name'] : null;
        $this->container['actions'] = isset($data['actions']) ? $data['actions'] : null;
        $this->container['user_request_id'] = isset($data['user_request_id']) ? $data['user_request_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['manager_request_id'] === null) {
            $invalid_properties[] = "'manager_request_id' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalid_properties[] = "'email' can't be null";
        }
        if ($this->container['mmi'] === null) {
            $invalid_properties[] = "'mmi' can't be null";
        }
        if ($this->container['user_name'] === null) {
            $invalid_properties[] = "'user_name' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalid_properties[] = "'status' can't be null";
        }
        if ($this->container['user_id'] === null) {
            $invalid_properties[] = "'user_id' can't be null";
        }
        if ($this->container['role_id'] === null) {
            $invalid_properties[] = "'role_id' can't be null";
        }
        if ($this->container['role_name'] === null) {
            $invalid_properties[] = "'role_name' can't be null";
        }
        if ($this->container['actions'] === null) {
            $invalid_properties[] = "'actions' can't be null";
        }
        if ($this->container['user_request_id'] === null) {
            $invalid_properties[] = "'user_request_id' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['manager_request_id'] === null) {
            return false;
        }
        if ($this->container['email'] === null) {
            return false;
        }
        if ($this->container['mmi'] === null) {
            return false;
        }
        if ($this->container['user_name'] === null) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        if ($this->container['user_id'] === null) {
            return false;
        }
        if ($this->container['role_id'] === null) {
            return false;
        }
        if ($this->container['role_name'] === null) {
            return false;
        }
        if ($this->container['actions'] === null) {
            return false;
        }
        if ($this->container['user_request_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets manager_request_id
     * @return int
     */
    public function getManagerRequestId()
    {
        return $this->container['manager_request_id'];
    }

    /**
     * Sets manager_request_id
     * @param int $manager_request_id Manager request id
     * @return $this
     */
    public function setManagerRequestId($manager_request_id)
    {
        $this->container['manager_request_id'] = $manager_request_id;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email E-mail of the user
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets mmi
     * @return float
     */
    public function getMmi()
    {
        return $this->container['mmi'];
    }

    /**
     * Sets mmi
     * @param float $mmi Calculated MMI
     * @return $this
     */
    public function setMmi($mmi)
    {
        $this->container['mmi'] = $mmi;

        return $this;
    }

    /**
     * Gets user_name
     * @return string
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     * @param string $user_name Name of the user
     * @return $this
     */
    public function setUserName($user_name)
    {
        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status Status: 'no data' , 'in progress', 'disaligned', 'slighty disaliged' or 'aligned'
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets user_id
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     * @param int $user_id The ID of the user
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets role_id
     * @return int
     */
    public function getRoleId()
    {
        return $this->container['role_id'];
    }

    /**
     * Sets role_id
     * @param int $role_id The ID of the role
     * @return $this
     */
    public function setRoleId($role_id)
    {
        $this->container['role_id'] = $role_id;

        return $this;
    }

    /**
     * Gets role_name
     * @return string
     */
    public function getRoleName()
    {
        return $this->container['role_name'];
    }

    /**
     * Sets role_name
     * @param string $role_name The name of the role
     * @return $this
     */
    public function setRoleName($role_name)
    {
        $this->container['role_name'] = $role_name;

        return $this;
    }

    /**
     * Gets actions
     * @return int
     */
    public function getActions()
    {
        return $this->container['actions'];
    }

    /**
     * Sets actions
     * @param int $actions List with available actions
     * @return $this
     */
    public function setActions($actions)
    {
        $this->container['actions'] = $actions;

        return $this;
    }

    /**
     * Gets user_request_id
     * @return int
     */
    public function getUserRequestId()
    {
        return $this->container['user_request_id'];
    }

    /**
     * Sets user_request_id
     * @param int $user_request_id User request id
     * @return $this
     */
    public function setUserRequestId($user_request_id)
    {
        $this->container['user_request_id'] = $user_request_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


