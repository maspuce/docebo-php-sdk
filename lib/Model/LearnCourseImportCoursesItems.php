<?php
/**
 * LearnCourseImportCoursesItems
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * LearnCourseImportCoursesItems Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class LearnCourseImportCoursesItems implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'LearnCourseImportCoursesItems';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'course_language' => 'string',
        'course_description' => 'string',
        'user_enroll_end' => 'string',
        'user_enroll_begin' => 'string',
        'course_validity_begin' => 'string',
        'course_credits' => 'float',
        'course_category' => 'string',
        'course_for_sale' => 'float',
        'course_difficulty' => 'string',
        'course_published' => 'string',
        'xxx' => 'string',
        'course_code' => 'string',
        'course_validity_end' => 'string',
        'course_type' => 'string',
        'course_price' => 'float',
        'user_enroll' => 'float',
        'course_cover' => 'string',
        'course_name' => 'string',
        'course_max_subscriptions' => 'float',
        'course_avg_time' => 'string',
        'course_status' => 'float'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'course_language' => 'course_language',
        'course_description' => 'course_description',
        'user_enroll_end' => 'user_enroll_end',
        'user_enroll_begin' => 'user_enroll_begin',
        'course_validity_begin' => 'course_validity_begin',
        'course_credits' => 'course_credits',
        'course_category' => 'course_category',
        'course_for_sale' => 'course_for_sale',
        'course_difficulty' => 'course_difficulty',
        'course_published' => 'course_published',
        'xxx' => 'xxx',
        'course_code' => 'course_code',
        'course_validity_end' => 'course_validity_end',
        'course_type' => 'course_type',
        'course_price' => 'course_price',
        'user_enroll' => 'user_enroll',
        'course_cover' => 'course_cover',
        'course_name' => 'course_name',
        'course_max_subscriptions' => 'course_max_subscriptions',
        'course_avg_time' => 'course_avg_time',
        'course_status' => 'course_status'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'course_language' => 'setCourseLanguage',
        'course_description' => 'setCourseDescription',
        'user_enroll_end' => 'setUserEnrollEnd',
        'user_enroll_begin' => 'setUserEnrollBegin',
        'course_validity_begin' => 'setCourseValidityBegin',
        'course_credits' => 'setCourseCredits',
        'course_category' => 'setCourseCategory',
        'course_for_sale' => 'setCourseForSale',
        'course_difficulty' => 'setCourseDifficulty',
        'course_published' => 'setCoursePublished',
        'xxx' => 'setXxx',
        'course_code' => 'setCourseCode',
        'course_validity_end' => 'setCourseValidityEnd',
        'course_type' => 'setCourseType',
        'course_price' => 'setCoursePrice',
        'user_enroll' => 'setUserEnroll',
        'course_cover' => 'setCourseCover',
        'course_name' => 'setCourseName',
        'course_max_subscriptions' => 'setCourseMaxSubscriptions',
        'course_avg_time' => 'setCourseAvgTime',
        'course_status' => 'setCourseStatus'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'course_language' => 'getCourseLanguage',
        'course_description' => 'getCourseDescription',
        'user_enroll_end' => 'getUserEnrollEnd',
        'user_enroll_begin' => 'getUserEnrollBegin',
        'course_validity_begin' => 'getCourseValidityBegin',
        'course_credits' => 'getCourseCredits',
        'course_category' => 'getCourseCategory',
        'course_for_sale' => 'getCourseForSale',
        'course_difficulty' => 'getCourseDifficulty',
        'course_published' => 'getCoursePublished',
        'xxx' => 'getXxx',
        'course_code' => 'getCourseCode',
        'course_validity_end' => 'getCourseValidityEnd',
        'course_type' => 'getCourseType',
        'course_price' => 'getCoursePrice',
        'user_enroll' => 'getUserEnroll',
        'course_cover' => 'getCourseCover',
        'course_name' => 'getCourseName',
        'course_max_subscriptions' => 'getCourseMaxSubscriptions',
        'course_avg_time' => 'getCourseAvgTime',
        'course_status' => 'getCourseStatus'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['course_language'] = isset($data['course_language']) ? $data['course_language'] : null;
        $this->container['course_description'] = isset($data['course_description']) ? $data['course_description'] : null;
        $this->container['user_enroll_end'] = isset($data['user_enroll_end']) ? $data['user_enroll_end'] : null;
        $this->container['user_enroll_begin'] = isset($data['user_enroll_begin']) ? $data['user_enroll_begin'] : null;
        $this->container['course_validity_begin'] = isset($data['course_validity_begin']) ? $data['course_validity_begin'] : null;
        $this->container['course_credits'] = isset($data['course_credits']) ? $data['course_credits'] : null;
        $this->container['course_category'] = isset($data['course_category']) ? $data['course_category'] : null;
        $this->container['course_for_sale'] = isset($data['course_for_sale']) ? $data['course_for_sale'] : null;
        $this->container['course_difficulty'] = isset($data['course_difficulty']) ? $data['course_difficulty'] : null;
        $this->container['course_published'] = isset($data['course_published']) ? $data['course_published'] : null;
        $this->container['xxx'] = isset($data['xxx']) ? $data['xxx'] : null;
        $this->container['course_code'] = isset($data['course_code']) ? $data['course_code'] : null;
        $this->container['course_validity_end'] = isset($data['course_validity_end']) ? $data['course_validity_end'] : null;
        $this->container['course_type'] = isset($data['course_type']) ? $data['course_type'] : null;
        $this->container['course_price'] = isset($data['course_price']) ? $data['course_price'] : null;
        $this->container['user_enroll'] = isset($data['user_enroll']) ? $data['user_enroll'] : null;
        $this->container['course_cover'] = isset($data['course_cover']) ? $data['course_cover'] : null;
        $this->container['course_name'] = isset($data['course_name']) ? $data['course_name'] : null;
        $this->container['course_max_subscriptions'] = isset($data['course_max_subscriptions']) ? $data['course_max_subscriptions'] : null;
        $this->container['course_avg_time'] = isset($data['course_avg_time']) ? $data['course_avg_time'] : null;
        $this->container['course_status'] = isset($data['course_status']) ? $data['course_status'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['course_type'] === null) {
            $invalid_properties[] = "'course_type' can't be null";
        }
        if ($this->container['course_name'] === null) {
            $invalid_properties[] = "'course_name' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['course_type'] === null) {
            return false;
        }
        if ($this->container['course_name'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets course_language
     * @return string
     */
    public function getCourseLanguage()
    {
        return $this->container['course_language'];
    }

    /**
     * Sets course_language
     * @param string $course_language The language of the course
     * @return $this
     */
    public function setCourseLanguage($course_language)
    {
        $this->container['course_language'] = $course_language;

        return $this;
    }

    /**
     * Gets course_description
     * @return string
     */
    public function getCourseDescription()
    {
        return $this->container['course_description'];
    }

    /**
     * Sets course_description
     * @param string $course_description The description of the course
     * @return $this
     */
    public function setCourseDescription($course_description)
    {
        $this->container['course_description'] = $course_description;

        return $this;
    }

    /**
     * Gets user_enroll_end
     * @return string
     */
    public function getUserEnrollEnd()
    {
        return $this->container['user_enroll_end'];
    }

    /**
     * Sets user_enroll_end
     * @param string $user_enroll_end The end of the date period during which self enrollment is allowed. Format yyyy-mm-dd
     * @return $this
     */
    public function setUserEnrollEnd($user_enroll_end)
    {
        $this->container['user_enroll_end'] = $user_enroll_end;

        return $this;
    }

    /**
     * Gets user_enroll_begin
     * @return string
     */
    public function getUserEnrollBegin()
    {
        return $this->container['user_enroll_begin'];
    }

    /**
     * Sets user_enroll_begin
     * @param string $user_enroll_begin The start of the date period during which self enrollment is allowed. Format yyyy-mm-dd
     * @return $this
     */
    public function setUserEnrollBegin($user_enroll_begin)
    {
        $this->container['user_enroll_begin'] = $user_enroll_begin;

        return $this;
    }

    /**
     * Gets course_validity_begin
     * @return string
     */
    public function getCourseValidityBegin()
    {
        return $this->container['course_validity_begin'];
    }

    /**
     * Sets course_validity_begin
     * @param string $course_validity_begin The start of the date period during which the course is valid. Format yyyy-mm-dd
     * @return $this
     */
    public function setCourseValidityBegin($course_validity_begin)
    {
        $this->container['course_validity_begin'] = $course_validity_begin;

        return $this;
    }

    /**
     * Gets course_credits
     * @return float
     */
    public function getCourseCredits()
    {
        return $this->container['course_credits'];
    }

    /**
     * Sets course_credits
     * @param float $course_credits The credits assigned to the course multiplied by 100. eg. 250 indicates 2.5 credits
     * @return $this
     */
    public function setCourseCredits($course_credits)
    {
        $this->container['course_credits'] = $course_credits;

        return $this;
    }

    /**
     * Gets course_category
     * @return string
     */
    public function getCourseCategory()
    {
        return $this->container['course_category'];
    }

    /**
     * Sets course_category
     * @param string $course_category The code of the category of the course
     * @return $this
     */
    public function setCourseCategory($course_category)
    {
        $this->container['course_category'] = $course_category;

        return $this;
    }

    /**
     * Gets course_for_sale
     * @return float
     */
    public function getCourseForSale()
    {
        return $this->container['course_for_sale'];
    }

    /**
     * Sets course_for_sale
     * @param float $course_for_sale Either 0 or 1, indicates whether an elearning course is for sale
     * @return $this
     */
    public function setCourseForSale($course_for_sale)
    {
        $this->container['course_for_sale'] = $course_for_sale;

        return $this;
    }

    /**
     * Gets course_difficulty
     * @return string
     */
    public function getCourseDifficulty()
    {
        return $this->container['course_difficulty'];
    }

    /**
     * Sets course_difficulty
     * @param string $course_difficulty Takes one of the following values 'veryeasy', 'easy', 'medium', 'difficult', 'verydifficult'
     * @return $this
     */
    public function setCourseDifficulty($course_difficulty)
    {
        $this->container['course_difficulty'] = $course_difficulty;

        return $this;
    }

    /**
     * Gets course_published
     * @return string
     */
    public function getCoursePublished()
    {
        return $this->container['course_published'];
    }

    /**
     * Sets course_published
     * @param string $course_published Takes one of two values 'published' or 'unpublished'
     * @return $this
     */
    public function setCoursePublished($course_published)
    {
        $this->container['course_published'] = $course_published;

        return $this;
    }

    /**
     * Gets xxx
     * @return string
     */
    public function getXxx()
    {
        return $this->container['xxx'];
    }

    /**
     * Sets xxx
     * @param string $xxx Multiple additional fields may be added. Simply replace &quot;xxx&quot; with the right field name
     * @return $this
     */
    public function setXxx($xxx)
    {
        $this->container['xxx'] = $xxx;

        return $this;
    }

    /**
     * Gets course_code
     * @return string
     */
    public function getCourseCode()
    {
        return $this->container['course_code'];
    }

    /**
     * Sets course_code
     * @param string $course_code The code of the course
     * @return $this
     */
    public function setCourseCode($course_code)
    {
        $this->container['course_code'] = $course_code;

        return $this;
    }

    /**
     * Gets course_validity_end
     * @return string
     */
    public function getCourseValidityEnd()
    {
        return $this->container['course_validity_end'];
    }

    /**
     * Sets course_validity_end
     * @param string $course_validity_end The end of the date period during which the course is valid. Format yyyy-mm-dd
     * @return $this
     */
    public function setCourseValidityEnd($course_validity_end)
    {
        $this->container['course_validity_end'] = $course_validity_end;

        return $this;
    }

    /**
     * Gets course_type
     * @return string
     */
    public function getCourseType()
    {
        return $this->container['course_type'];
    }

    /**
     * Sets course_type
     * @param string $course_type The type of the course (elearning, webinar, classroom)
     * @return $this
     */
    public function setCourseType($course_type)
    {
        $this->container['course_type'] = $course_type;

        return $this;
    }

    /**
     * Gets course_price
     * @return float
     */
    public function getCoursePrice()
    {
        return $this->container['course_price'];
    }

    /**
     * Sets course_price
     * @param float $course_price The price of the course in cents of its currency. eg: 100 means the course costs 1
     * @return $this
     */
    public function setCoursePrice($course_price)
    {
        $this->container['course_price'] = $course_price;

        return $this;
    }

    /**
     * Gets user_enroll
     * @return float
     */
    public function getUserEnroll()
    {
        return $this->container['user_enroll'];
    }

    /**
     * Sets user_enroll
     * @param float $user_enroll Either 0 or 1, indicates whether to allow self enrollment of the course
     * @return $this
     */
    public function setUserEnroll($user_enroll)
    {
        $this->container['user_enroll'] = $user_enroll;

        return $this;
    }

    /**
     * Gets course_cover
     * @return string
     */
    public function getCourseCover()
    {
        return $this->container['course_cover'];
    }

    /**
     * Sets course_cover
     * @param string $course_cover Course thumbnail encoded in the base64 format.
     * @return $this
     */
    public function setCourseCover($course_cover)
    {
        $this->container['course_cover'] = $course_cover;

        return $this;
    }

    /**
     * Gets course_name
     * @return string
     */
    public function getCourseName()
    {
        return $this->container['course_name'];
    }

    /**
     * Sets course_name
     * @param string $course_name The name of the course
     * @return $this
     */
    public function setCourseName($course_name)
    {
        $this->container['course_name'] = $course_name;

        return $this;
    }

    /**
     * Gets course_max_subscriptions
     * @return float
     */
    public function getCourseMaxSubscriptions()
    {
        return $this->container['course_max_subscriptions'];
    }

    /**
     * Sets course_max_subscriptions
     * @param float $course_max_subscriptions The total number of subscriptions allowed in the course
     * @return $this
     */
    public function setCourseMaxSubscriptions($course_max_subscriptions)
    {
        $this->container['course_max_subscriptions'] = $course_max_subscriptions;

        return $this;
    }

    /**
     * Gets course_avg_time
     * @return string
     */
    public function getCourseAvgTime()
    {
        return $this->container['course_avg_time'];
    }

    /**
     * Sets course_avg_time
     * @param string $course_avg_time The average time of the course. Format HH:MM:SS
     * @return $this
     */
    public function setCourseAvgTime($course_avg_time)
    {
        $this->container['course_avg_time'] = $course_avg_time;

        return $this;
    }

    /**
     * Gets course_status
     * @return float
     */
    public function getCourseStatus()
    {
        return $this->container['course_status'];
    }

    /**
     * Sets course_status
     * @param float $course_status The status of the course. Takes one of the following values 'In preparation', 'Available', 'Effective'
     * @return $this
     */
    public function setCourseStatus($course_status)
    {
        $this->container['course_status'] = $course_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


