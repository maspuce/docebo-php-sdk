<?php
/**
 * LearnSubscriptionplanBatchItems
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * LearnSubscriptionplanBatchItems Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class LearnSubscriptionplanBatchItems implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'LearnSubscriptionplanBatchItems';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bundle_code' => 'string',
        'code' => 'string',
        'validity_period' => 'int',
        'price' => 'string',
        'availability' => 'int',
        'renewal_type' => 'string',
        'validity_units' => 'string',
        'enforce_limit' => 'bool',
        'name' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'bundle_code' => 'bundle_code',
        'code' => 'code',
        'validity_period' => 'validity_period',
        'price' => 'price',
        'availability' => 'availability',
        'renewal_type' => 'renewal_type',
        'validity_units' => 'validity_units',
        'enforce_limit' => 'enforce_limit',
        'name' => 'name'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'bundle_code' => 'setBundleCode',
        'code' => 'setCode',
        'validity_period' => 'setValidityPeriod',
        'price' => 'setPrice',
        'availability' => 'setAvailability',
        'renewal_type' => 'setRenewalType',
        'validity_units' => 'setValidityUnits',
        'enforce_limit' => 'setEnforceLimit',
        'name' => 'setName'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'bundle_code' => 'getBundleCode',
        'code' => 'getCode',
        'validity_period' => 'getValidityPeriod',
        'price' => 'getPrice',
        'availability' => 'getAvailability',
        'renewal_type' => 'getRenewalType',
        'validity_units' => 'getValidityUnits',
        'enforce_limit' => 'getEnforceLimit',
        'name' => 'getName'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bundle_code'] = isset($data['bundle_code']) ? $data['bundle_code'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['validity_period'] = isset($data['validity_period']) ? $data['validity_period'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['availability'] = isset($data['availability']) ? $data['availability'] : null;
        $this->container['renewal_type'] = isset($data['renewal_type']) ? $data['renewal_type'] : null;
        $this->container['validity_units'] = isset($data['validity_units']) ? $data['validity_units'] : null;
        $this->container['enforce_limit'] = isset($data['enforce_limit']) ? $data['enforce_limit'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['bundle_code'] === null) {
            $invalid_properties[] = "'bundle_code' can't be null";
        }
        if ($this->container['code'] === null) {
            $invalid_properties[] = "'code' can't be null";
        }
        if ($this->container['validity_period'] === null) {
            $invalid_properties[] = "'validity_period' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalid_properties[] = "'price' can't be null";
        }
        if ($this->container['availability'] === null) {
            $invalid_properties[] = "'availability' can't be null";
        }
        if ($this->container['renewal_type'] === null) {
            $invalid_properties[] = "'renewal_type' can't be null";
        }
        if ($this->container['validity_units'] === null) {
            $invalid_properties[] = "'validity_units' can't be null";
        }
        if ($this->container['enforce_limit'] === null) {
            $invalid_properties[] = "'enforce_limit' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['bundle_code'] === null) {
            return false;
        }
        if ($this->container['code'] === null) {
            return false;
        }
        if ($this->container['validity_period'] === null) {
            return false;
        }
        if ($this->container['price'] === null) {
            return false;
        }
        if ($this->container['availability'] === null) {
            return false;
        }
        if ($this->container['renewal_type'] === null) {
            return false;
        }
        if ($this->container['validity_units'] === null) {
            return false;
        }
        if ($this->container['enforce_limit'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets bundle_code
     * @return string
     */
    public function getBundleCode()
    {
        return $this->container['bundle_code'];
    }

    /**
     * Sets bundle_code
     * @param string $bundle_code Subscription bundle code
     * @return $this
     */
    public function setBundleCode($bundle_code)
    {
        $this->container['bundle_code'] = $bundle_code;

        return $this;
    }

    /**
     * Gets code
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     * @param string $code Subscription plan code
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets validity_period
     * @return int
     */
    public function getValidityPeriod()
    {
        return $this->container['validity_period'];
    }

    /**
     * Sets validity_period
     * @param int $validity_period Subscription plan validity period
     * @return $this
     */
    public function setValidityPeriod($validity_period)
    {
        $this->container['validity_period'] = $validity_period;

        return $this;
    }

    /**
     * Gets price
     * @return string
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     * @param string $price Subscription plan price
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets availability
     * @return int
     */
    public function getAvailability()
    {
        return $this->container['availability'];
    }

    /**
     * Sets availability
     * @param int $availability Subscription plan availability
     * @return $this
     */
    public function setAvailability($availability)
    {
        $this->container['availability'] = $availability;

        return $this;
    }

    /**
     * Gets renewal_type
     * @return string
     */
    public function getRenewalType()
    {
        return $this->container['renewal_type'];
    }

    /**
     * Sets renewal_type
     * @param string $renewal_type Possible values: 'none', 'manual', 'automatic'
     * @return $this
     */
    public function setRenewalType($renewal_type)
    {
        $this->container['renewal_type'] = $renewal_type;

        return $this;
    }

    /**
     * Gets validity_units
     * @return string
     */
    public function getValidityUnits()
    {
        return $this->container['validity_units'];
    }

    /**
     * Sets validity_units
     * @param string $validity_units Possible values: 'day', 'month', 'year'
     * @return $this
     */
    public function setValidityUnits($validity_units)
    {
        $this->container['validity_units'] = $validity_units;

        return $this;
    }

    /**
     * Gets enforce_limit
     * @return bool
     */
    public function getEnforceLimit()
    {
        return $this->container['enforce_limit'];
    }

    /**
     * Sets enforce_limit
     * @param bool $enforce_limit Enforce limit
     * @return $this
     */
    public function setEnforceLimit($enforce_limit)
    {
        $this->container['enforce_limit'] = $enforce_limit;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Subscription plan name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


