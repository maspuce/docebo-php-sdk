<?php
/**
 * ManageUserSessionCatalogSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ManageUserSessionCatalogSettings Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ManageUserSessionCatalogSettings implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ManageUserSessionCatalogSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'on_catalogue_empty' => 'bool',
        'catalog_external' => 'bool',
        'catalog_type' => 'string',
        'catalog_use_categories_tree' => 'bool',
        'show_course_details_dedicated_page' => 'bool',
        'catalog_external_selected_catalogs' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'on_catalogue_empty' => 'on_catalogue_empty',
        'catalog_external' => 'catalog_external',
        'catalog_type' => 'catalog_type',
        'catalog_use_categories_tree' => 'catalog_use_categories_tree',
        'show_course_details_dedicated_page' => 'show_course_details_dedicated_page',
        'catalog_external_selected_catalogs' => 'catalog_external_selected_catalogs'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'on_catalogue_empty' => 'setOnCatalogueEmpty',
        'catalog_external' => 'setCatalogExternal',
        'catalog_type' => 'setCatalogType',
        'catalog_use_categories_tree' => 'setCatalogUseCategoriesTree',
        'show_course_details_dedicated_page' => 'setShowCourseDetailsDedicatedPage',
        'catalog_external_selected_catalogs' => 'setCatalogExternalSelectedCatalogs'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'on_catalogue_empty' => 'getOnCatalogueEmpty',
        'catalog_external' => 'getCatalogExternal',
        'catalog_type' => 'getCatalogType',
        'catalog_use_categories_tree' => 'getCatalogUseCategoriesTree',
        'show_course_details_dedicated_page' => 'getShowCourseDetailsDedicatedPage',
        'catalog_external_selected_catalogs' => 'getCatalogExternalSelectedCatalogs'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['on_catalogue_empty'] = isset($data['on_catalogue_empty']) ? $data['on_catalogue_empty'] : null;
        $this->container['catalog_external'] = isset($data['catalog_external']) ? $data['catalog_external'] : null;
        $this->container['catalog_type'] = isset($data['catalog_type']) ? $data['catalog_type'] : null;
        $this->container['catalog_use_categories_tree'] = isset($data['catalog_use_categories_tree']) ? $data['catalog_use_categories_tree'] : null;
        $this->container['show_course_details_dedicated_page'] = isset($data['show_course_details_dedicated_page']) ? $data['show_course_details_dedicated_page'] : null;
        $this->container['catalog_external_selected_catalogs'] = isset($data['catalog_external_selected_catalogs']) ? $data['catalog_external_selected_catalogs'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['catalog_use_categories_tree'] === null) {
            $invalid_properties[] = "'catalog_use_categories_tree' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['catalog_use_categories_tree'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets on_catalogue_empty
     * @return bool
     */
    public function getOnCatalogueEmpty()
    {
        return $this->container['on_catalogue_empty'];
    }

    /**
     * Sets on_catalogue_empty
     * @param bool $on_catalogue_empty 
     * @return $this
     */
    public function setOnCatalogueEmpty($on_catalogue_empty)
    {
        $this->container['on_catalogue_empty'] = $on_catalogue_empty;

        return $this;
    }

    /**
     * Gets catalog_external
     * @return bool
     */
    public function getCatalogExternal()
    {
        return $this->container['catalog_external'];
    }

    /**
     * Sets catalog_external
     * @param bool $catalog_external Show/hide catalogue for authenticated users
     * @return $this
     */
    public function setCatalogExternal($catalog_external)
    {
        $this->container['catalog_external'] = $catalog_external;

        return $this;
    }

    /**
     * Gets catalog_type
     * @return string
     */
    public function getCatalogType()
    {
        return $this->container['catalog_type'];
    }

    /**
     * Sets catalog_type
     * @param string $catalog_type 
     * @return $this
     */
    public function setCatalogType($catalog_type)
    {
        $this->container['catalog_type'] = $catalog_type;

        return $this;
    }

    /**
     * Gets catalog_use_categories_tree
     * @return bool
     */
    public function getCatalogUseCategoriesTree()
    {
        return $this->container['catalog_use_categories_tree'];
    }

    /**
     * Sets catalog_use_categories_tree
     * @param bool $catalog_use_categories_tree 
     * @return $this
     */
    public function setCatalogUseCategoriesTree($catalog_use_categories_tree)
    {
        $this->container['catalog_use_categories_tree'] = $catalog_use_categories_tree;

        return $this;
    }

    /**
     * Gets show_course_details_dedicated_page
     * @return bool
     */
    public function getShowCourseDetailsDedicatedPage()
    {
        return $this->container['show_course_details_dedicated_page'];
    }

    /**
     * Sets show_course_details_dedicated_page
     * @param bool $show_course_details_dedicated_page 
     * @return $this
     */
    public function setShowCourseDetailsDedicatedPage($show_course_details_dedicated_page)
    {
        $this->container['show_course_details_dedicated_page'] = $show_course_details_dedicated_page;

        return $this;
    }

    /**
     * Gets catalog_external_selected_catalogs
     * @return string
     */
    public function getCatalogExternalSelectedCatalogs()
    {
        return $this->container['catalog_external_selected_catalogs'];
    }

    /**
     * Sets catalog_external_selected_catalogs
     * @param string $catalog_external_selected_catalogs List of catalogues for authenticated users
     * @return $this
     */
    public function setCatalogExternalSelectedCatalogs($catalog_external_selected_catalogs)
    {
        $this->container['catalog_external_selected_catalogs'] = $catalog_external_selected_catalogs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


