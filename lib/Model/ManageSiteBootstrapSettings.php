<?php
/**
 * ManageSiteBootstrapSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ManageSiteBootstrapSettings Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ManageSiteBootstrapSettings implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ManageSiteBootstrapSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'timezone' => 'string',
        'show_first_name_first' => 'bool',
        'currency_settings' => '\Swagger\Client\Model\ManageSiteBootstrapCurrencySettings',
        'dateformat_locale' => 'string',
        'user_logout_redirect' => 'bool',
        'allow_user_dateformat_override' => 'bool',
        'registration_settings' => '\Swagger\Client\Model\ManageSiteBootstrapRegistrationSettings',
        'allow_only_password_change' => 'bool',
        'timezone_allow_user_override' => 'bool',
        'user_logout_redirect_url' => 'string',
        'hide_signin_form' => 'bool'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'timezone' => 'timezone',
        'show_first_name_first' => 'show_first_name_first',
        'currency_settings' => 'currency_settings',
        'dateformat_locale' => 'dateformat_locale',
        'user_logout_redirect' => 'user_logout_redirect',
        'allow_user_dateformat_override' => 'allow_user_dateformat_override',
        'registration_settings' => 'registration_settings',
        'allow_only_password_change' => 'allow_only_password_change',
        'timezone_allow_user_override' => 'timezone_allow_user_override',
        'user_logout_redirect_url' => 'user_logout_redirect_url',
        'hide_signin_form' => 'hide_signin_form'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'timezone' => 'setTimezone',
        'show_first_name_first' => 'setShowFirstNameFirst',
        'currency_settings' => 'setCurrencySettings',
        'dateformat_locale' => 'setDateformatLocale',
        'user_logout_redirect' => 'setUserLogoutRedirect',
        'allow_user_dateformat_override' => 'setAllowUserDateformatOverride',
        'registration_settings' => 'setRegistrationSettings',
        'allow_only_password_change' => 'setAllowOnlyPasswordChange',
        'timezone_allow_user_override' => 'setTimezoneAllowUserOverride',
        'user_logout_redirect_url' => 'setUserLogoutRedirectUrl',
        'hide_signin_form' => 'setHideSigninForm'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'timezone' => 'getTimezone',
        'show_first_name_first' => 'getShowFirstNameFirst',
        'currency_settings' => 'getCurrencySettings',
        'dateformat_locale' => 'getDateformatLocale',
        'user_logout_redirect' => 'getUserLogoutRedirect',
        'allow_user_dateformat_override' => 'getAllowUserDateformatOverride',
        'registration_settings' => 'getRegistrationSettings',
        'allow_only_password_change' => 'getAllowOnlyPasswordChange',
        'timezone_allow_user_override' => 'getTimezoneAllowUserOverride',
        'user_logout_redirect_url' => 'getUserLogoutRedirectUrl',
        'hide_signin_form' => 'getHideSigninForm'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
        $this->container['show_first_name_first'] = isset($data['show_first_name_first']) ? $data['show_first_name_first'] : null;
        $this->container['currency_settings'] = isset($data['currency_settings']) ? $data['currency_settings'] : null;
        $this->container['dateformat_locale'] = isset($data['dateformat_locale']) ? $data['dateformat_locale'] : null;
        $this->container['user_logout_redirect'] = isset($data['user_logout_redirect']) ? $data['user_logout_redirect'] : null;
        $this->container['allow_user_dateformat_override'] = isset($data['allow_user_dateformat_override']) ? $data['allow_user_dateformat_override'] : null;
        $this->container['registration_settings'] = isset($data['registration_settings']) ? $data['registration_settings'] : null;
        $this->container['allow_only_password_change'] = isset($data['allow_only_password_change']) ? $data['allow_only_password_change'] : null;
        $this->container['timezone_allow_user_override'] = isset($data['timezone_allow_user_override']) ? $data['timezone_allow_user_override'] : null;
        $this->container['user_logout_redirect_url'] = isset($data['user_logout_redirect_url']) ? $data['user_logout_redirect_url'] : null;
        $this->container['hide_signin_form'] = isset($data['hide_signin_form']) ? $data['hide_signin_form'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['currency_settings'] === null) {
            $invalid_properties[] = "'currency_settings' can't be null";
        }
        if ($this->container['allow_user_dateformat_override'] === null) {
            $invalid_properties[] = "'allow_user_dateformat_override' can't be null";
        }
        if ($this->container['allow_only_password_change'] === null) {
            $invalid_properties[] = "'allow_only_password_change' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['currency_settings'] === null) {
            return false;
        }
        if ($this->container['allow_user_dateformat_override'] === null) {
            return false;
        }
        if ($this->container['allow_only_password_change'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets timezone
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     * @param string $timezone 
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets show_first_name_first
     * @return bool
     */
    public function getShowFirstNameFirst()
    {
        return $this->container['show_first_name_first'];
    }

    /**
     * Sets show_first_name_first
     * @param bool $show_first_name_first 
     * @return $this
     */
    public function setShowFirstNameFirst($show_first_name_first)
    {
        $this->container['show_first_name_first'] = $show_first_name_first;

        return $this;
    }

    /**
     * Gets currency_settings
     * @return \Swagger\Client\Model\ManageSiteBootstrapCurrencySettings
     */
    public function getCurrencySettings()
    {
        return $this->container['currency_settings'];
    }

    /**
     * Sets currency_settings
     * @param \Swagger\Client\Model\ManageSiteBootstrapCurrencySettings $currency_settings 
     * @return $this
     */
    public function setCurrencySettings($currency_settings)
    {
        $this->container['currency_settings'] = $currency_settings;

        return $this;
    }

    /**
     * Gets dateformat_locale
     * @return string
     */
    public function getDateformatLocale()
    {
        return $this->container['dateformat_locale'];
    }

    /**
     * Sets dateformat_locale
     * @param string $dateformat_locale 
     * @return $this
     */
    public function setDateformatLocale($dateformat_locale)
    {
        $this->container['dateformat_locale'] = $dateformat_locale;

        return $this;
    }

    /**
     * Gets user_logout_redirect
     * @return bool
     */
    public function getUserLogoutRedirect()
    {
        return $this->container['user_logout_redirect'];
    }

    /**
     * Sets user_logout_redirect
     * @param bool $user_logout_redirect Indicates whether user should be redirected after login to custom url. Default = false
     * @return $this
     */
    public function setUserLogoutRedirect($user_logout_redirect)
    {
        $this->container['user_logout_redirect'] = $user_logout_redirect;

        return $this;
    }

    /**
     * Gets allow_user_dateformat_override
     * @return bool
     */
    public function getAllowUserDateformatOverride()
    {
        return $this->container['allow_user_dateformat_override'];
    }

    /**
     * Sets allow_user_dateformat_override
     * @param bool $allow_user_dateformat_override 
     * @return $this
     */
    public function setAllowUserDateformatOverride($allow_user_dateformat_override)
    {
        $this->container['allow_user_dateformat_override'] = $allow_user_dateformat_override;

        return $this;
    }

    /**
     * Gets registration_settings
     * @return \Swagger\Client\Model\ManageSiteBootstrapRegistrationSettings
     */
    public function getRegistrationSettings()
    {
        return $this->container['registration_settings'];
    }

    /**
     * Sets registration_settings
     * @param \Swagger\Client\Model\ManageSiteBootstrapRegistrationSettings $registration_settings 
     * @return $this
     */
    public function setRegistrationSettings($registration_settings)
    {
        $this->container['registration_settings'] = $registration_settings;

        return $this;
    }

    /**
     * Gets allow_only_password_change
     * @return bool
     */
    public function getAllowOnlyPasswordChange()
    {
        return $this->container['allow_only_password_change'];
    }

    /**
     * Sets allow_only_password_change
     * @param bool $allow_only_password_change Whether or not users can only change their password of their profile (and nothing else)
     * @return $this
     */
    public function setAllowOnlyPasswordChange($allow_only_password_change)
    {
        $this->container['allow_only_password_change'] = $allow_only_password_change;

        return $this;
    }

    /**
     * Gets timezone_allow_user_override
     * @return bool
     */
    public function getTimezoneAllowUserOverride()
    {
        return $this->container['timezone_allow_user_override'];
    }

    /**
     * Sets timezone_allow_user_override
     * @param bool $timezone_allow_user_override 
     * @return $this
     */
    public function setTimezoneAllowUserOverride($timezone_allow_user_override)
    {
        $this->container['timezone_allow_user_override'] = $timezone_allow_user_override;

        return $this;
    }

    /**
     * Gets user_logout_redirect_url
     * @return string
     */
    public function getUserLogoutRedirectUrl()
    {
        return $this->container['user_logout_redirect_url'];
    }

    /**
     * Sets user_logout_redirect_url
     * @param string $user_logout_redirect_url The url for redirecting user on logout
     * @return $this
     */
    public function setUserLogoutRedirectUrl($user_logout_redirect_url)
    {
        $this->container['user_logout_redirect_url'] = $user_logout_redirect_url;

        return $this;
    }

    /**
     * Gets hide_signin_form
     * @return bool
     */
    public function getHideSigninForm()
    {
        return $this->container['hide_signin_form'];
    }

    /**
     * Sets hide_signin_form
     * @param bool $hide_signin_form Indicates whether username/password login is to be hidden. Default = false
     * @return $this
     */
    public function setHideSigninForm($hide_signin_form)
    {
        $this->container['hide_signin_form'] = $hide_signin_form;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


