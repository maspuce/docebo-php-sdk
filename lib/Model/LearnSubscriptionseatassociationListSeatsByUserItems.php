<?php
/**
 * LearnSubscriptionseatassociationListSeatsByUserItems
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * LearnSubscriptionseatassociationListSeatsByUserItems Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class LearnSubscriptionseatassociationListSeatsByUserItems implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'LearnSubscriptionseatassociationListSeatsByUserItems';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'seat_end_date' => '\DateTime',
        'status' => 'int',
        'user_id' => 'int',
        'record_id' => 'int',
        'assignment_date' => '\DateTime',
        'record_name' => 'string',
        'mode' => 'int',
        'id' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'seat_end_date' => 'seat_end_date',
        'status' => 'status',
        'user_id' => 'user_id',
        'record_id' => 'record_id',
        'assignment_date' => 'assignment_date',
        'record_name' => 'record_name',
        'mode' => 'mode',
        'id' => 'id'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'seat_end_date' => 'setSeatEndDate',
        'status' => 'setStatus',
        'user_id' => 'setUserId',
        'record_id' => 'setRecordId',
        'assignment_date' => 'setAssignmentDate',
        'record_name' => 'setRecordName',
        'mode' => 'setMode',
        'id' => 'setId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'seat_end_date' => 'getSeatEndDate',
        'status' => 'getStatus',
        'user_id' => 'getUserId',
        'record_id' => 'getRecordId',
        'assignment_date' => 'getAssignmentDate',
        'record_name' => 'getRecordName',
        'mode' => 'getMode',
        'id' => 'getId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['seat_end_date'] = isset($data['seat_end_date']) ? $data['seat_end_date'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['record_id'] = isset($data['record_id']) ? $data['record_id'] : null;
        $this->container['assignment_date'] = isset($data['assignment_date']) ? $data['assignment_date'] : null;
        $this->container['record_name'] = isset($data['record_name']) ? $data['record_name'] : null;
        $this->container['mode'] = isset($data['mode']) ? $data['mode'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['seat_end_date'] === null) {
            $invalid_properties[] = "'seat_end_date' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalid_properties[] = "'status' can't be null";
        }
        if ($this->container['user_id'] === null) {
            $invalid_properties[] = "'user_id' can't be null";
        }
        if ($this->container['record_id'] === null) {
            $invalid_properties[] = "'record_id' can't be null";
        }
        if ($this->container['assignment_date'] === null) {
            $invalid_properties[] = "'assignment_date' can't be null";
        }
        if ($this->container['record_name'] === null) {
            $invalid_properties[] = "'record_name' can't be null";
        }
        if ($this->container['mode'] === null) {
            $invalid_properties[] = "'mode' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['seat_end_date'] === null) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        if ($this->container['user_id'] === null) {
            return false;
        }
        if ($this->container['record_id'] === null) {
            return false;
        }
        if ($this->container['assignment_date'] === null) {
            return false;
        }
        if ($this->container['record_name'] === null) {
            return false;
        }
        if ($this->container['mode'] === null) {
            return false;
        }
        if ($this->container['id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets seat_end_date
     * @return \DateTime
     */
    public function getSeatEndDate()
    {
        return $this->container['seat_end_date'];
    }

    /**
     * Sets seat_end_date
     * @param \DateTime $seat_end_date Subscription seat association seat end date
     * @return $this
     */
    public function setSeatEndDate($seat_end_date)
    {
        $this->container['seat_end_date'] = $seat_end_date;

        return $this;
    }

    /**
     * Gets status
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param int $status Subscription seat association status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets user_id
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     * @param int $user_id Subscription seat association user ID
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets record_id
     * @return int
     */
    public function getRecordId()
    {
        return $this->container['record_id'];
    }

    /**
     * Sets record_id
     * @param int $record_id Subscription seat association record ID
     * @return $this
     */
    public function setRecordId($record_id)
    {
        $this->container['record_id'] = $record_id;

        return $this;
    }

    /**
     * Gets assignment_date
     * @return \DateTime
     */
    public function getAssignmentDate()
    {
        return $this->container['assignment_date'];
    }

    /**
     * Sets assignment_date
     * @param \DateTime $assignment_date Subscription seat association seat assignment date
     * @return $this
     */
    public function setAssignmentDate($assignment_date)
    {
        $this->container['assignment_date'] = $assignment_date;

        return $this;
    }

    /**
     * Gets record_name
     * @return string
     */
    public function getRecordName()
    {
        return $this->container['record_name'];
    }

    /**
     * Sets record_name
     * @param string $record_name Subscription seat association record name
     * @return $this
     */
    public function setRecordName($record_name)
    {
        $this->container['record_name'] = $record_name;

        return $this;
    }

    /**
     * Gets mode
     * @return int
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     * @param int $mode Subscription seat association mode
     * @return $this
     */
    public function setMode($mode)
    {
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Subscription seat association ID
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


