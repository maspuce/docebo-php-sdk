<?php
/**
 * SkillReportsListCalibrationItems
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * SkillReportsListCalibrationItems Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SkillReportsListCalibrationItems implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SkillReportsListCalibrationItems';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'manager_email' => 'string',
        'manager_id' => 'int',
        'requested_users' => 'int',
        'role_id' => 'int',
        'status' => 'string',
        'role_name' => 'string',
        'manager_name' => 'string',
        'manager_initials' => 'string',
        'manager_avatar' => 'string',
        'mmi' => 'double',
        'subordinates_roles' => '\Swagger\Client\Model\SkillReportsListCalibrationSubordinatesRoles[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'manager_email' => 'manager_email',
        'manager_id' => 'manager_id',
        'requested_users' => 'requested_users',
        'role_id' => 'role_id',
        'status' => 'status',
        'role_name' => 'role_name',
        'manager_name' => 'manager_name',
        'manager_initials' => 'manager_initials',
        'manager_avatar' => 'manager_avatar',
        'mmi' => 'mmi',
        'subordinates_roles' => 'subordinates_roles'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'manager_email' => 'setManagerEmail',
        'manager_id' => 'setManagerId',
        'requested_users' => 'setRequestedUsers',
        'role_id' => 'setRoleId',
        'status' => 'setStatus',
        'role_name' => 'setRoleName',
        'manager_name' => 'setManagerName',
        'manager_initials' => 'setManagerInitials',
        'manager_avatar' => 'setManagerAvatar',
        'mmi' => 'setMmi',
        'subordinates_roles' => 'setSubordinatesRoles'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'manager_email' => 'getManagerEmail',
        'manager_id' => 'getManagerId',
        'requested_users' => 'getRequestedUsers',
        'role_id' => 'getRoleId',
        'status' => 'getStatus',
        'role_name' => 'getRoleName',
        'manager_name' => 'getManagerName',
        'manager_initials' => 'getManagerInitials',
        'manager_avatar' => 'getManagerAvatar',
        'mmi' => 'getMmi',
        'subordinates_roles' => 'getSubordinatesRoles'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['manager_email'] = isset($data['manager_email']) ? $data['manager_email'] : null;
        $this->container['manager_id'] = isset($data['manager_id']) ? $data['manager_id'] : null;
        $this->container['requested_users'] = isset($data['requested_users']) ? $data['requested_users'] : null;
        $this->container['role_id'] = isset($data['role_id']) ? $data['role_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['role_name'] = isset($data['role_name']) ? $data['role_name'] : null;
        $this->container['manager_name'] = isset($data['manager_name']) ? $data['manager_name'] : null;
        $this->container['manager_initials'] = isset($data['manager_initials']) ? $data['manager_initials'] : null;
        $this->container['manager_avatar'] = isset($data['manager_avatar']) ? $data['manager_avatar'] : null;
        $this->container['mmi'] = isset($data['mmi']) ? $data['mmi'] : null;
        $this->container['subordinates_roles'] = isset($data['subordinates_roles']) ? $data['subordinates_roles'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['manager_email'] === null) {
            $invalid_properties[] = "'manager_email' can't be null";
        }
        if ($this->container['manager_id'] === null) {
            $invalid_properties[] = "'manager_id' can't be null";
        }
        if ($this->container['requested_users'] === null) {
            $invalid_properties[] = "'requested_users' can't be null";
        }
        if ($this->container['role_id'] === null) {
            $invalid_properties[] = "'role_id' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalid_properties[] = "'status' can't be null";
        }
        if ($this->container['role_name'] === null) {
            $invalid_properties[] = "'role_name' can't be null";
        }
        if ($this->container['manager_name'] === null) {
            $invalid_properties[] = "'manager_name' can't be null";
        }
        if ($this->container['manager_initials'] === null) {
            $invalid_properties[] = "'manager_initials' can't be null";
        }
        if ($this->container['manager_avatar'] === null) {
            $invalid_properties[] = "'manager_avatar' can't be null";
        }
        if ($this->container['mmi'] === null) {
            $invalid_properties[] = "'mmi' can't be null";
        }
        if ($this->container['subordinates_roles'] === null) {
            $invalid_properties[] = "'subordinates_roles' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['manager_email'] === null) {
            return false;
        }
        if ($this->container['manager_id'] === null) {
            return false;
        }
        if ($this->container['requested_users'] === null) {
            return false;
        }
        if ($this->container['role_id'] === null) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        if ($this->container['role_name'] === null) {
            return false;
        }
        if ($this->container['manager_name'] === null) {
            return false;
        }
        if ($this->container['manager_initials'] === null) {
            return false;
        }
        if ($this->container['manager_avatar'] === null) {
            return false;
        }
        if ($this->container['mmi'] === null) {
            return false;
        }
        if ($this->container['subordinates_roles'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets manager_email
     * @return string
     */
    public function getManagerEmail()
    {
        return $this->container['manager_email'];
    }

    /**
     * Sets manager_email
     * @param string $manager_email Manager e-mail address
     * @return $this
     */
    public function setManagerEmail($manager_email)
    {
        $this->container['manager_email'] = $manager_email;

        return $this;
    }

    /**
     * Gets manager_id
     * @return int
     */
    public function getManagerId()
    {
        return $this->container['manager_id'];
    }

    /**
     * Sets manager_id
     * @param int $manager_id The ID of the manager
     * @return $this
     */
    public function setManagerId($manager_id)
    {
        $this->container['manager_id'] = $manager_id;

        return $this;
    }

    /**
     * Gets requested_users
     * @return int
     */
    public function getRequestedUsers()
    {
        return $this->container['requested_users'];
    }

    /**
     * Sets requested_users
     * @param int $requested_users How many requested users are there
     * @return $this
     */
    public function setRequestedUsers($requested_users)
    {
        $this->container['requested_users'] = $requested_users;

        return $this;
    }

    /**
     * Gets role_id
     * @return int
     */
    public function getRoleId()
    {
        return $this->container['role_id'];
    }

    /**
     * Sets role_id
     * @param int $role_id The ID of the role
     * @return $this
     */
    public function setRoleId($role_id)
    {
        $this->container['role_id'] = $role_id;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status Status: 'no data' , 'accepted', 'misalignment' or 'alignment'
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets role_name
     * @return string
     */
    public function getRoleName()
    {
        return $this->container['role_name'];
    }

    /**
     * Sets role_name
     * @param string $role_name The name of the role
     * @return $this
     */
    public function setRoleName($role_name)
    {
        $this->container['role_name'] = $role_name;

        return $this;
    }

    /**
     * Gets manager_name
     * @return string
     */
    public function getManagerName()
    {
        return $this->container['manager_name'];
    }

    /**
     * Sets manager_name
     * @param string $manager_name Name of the manager
     * @return $this
     */
    public function setManagerName($manager_name)
    {
        $this->container['manager_name'] = $manager_name;

        return $this;
    }

    /**
     * Gets manager_initials
     * @return string
     */
    public function getManagerInitials()
    {
        return $this->container['manager_initials'];
    }

    /**
     * Sets manager_initials
     * @param string $manager_initials Manager initials
     * @return $this
     */
    public function setManagerInitials($manager_initials)
    {
        $this->container['manager_initials'] = $manager_initials;

        return $this;
    }

    /**
     * Gets manager_avatar
     * @return string
     */
    public function getManagerAvatar()
    {
        return $this->container['manager_avatar'];
    }

    /**
     * Sets manager_avatar
     * @param string $manager_avatar Manager avatar
     * @return $this
     */
    public function setManagerAvatar($manager_avatar)
    {
        $this->container['manager_avatar'] = $manager_avatar;

        return $this;
    }

    /**
     * Gets mmi
     * @return double
     */
    public function getMmi()
    {
        return $this->container['mmi'];
    }

    /**
     * Sets mmi
     * @param double $mmi Manager Misalignment Index
     * @return $this
     */
    public function setMmi($mmi)
    {
        $this->container['mmi'] = $mmi;

        return $this;
    }

    /**
     * Gets subordinates_roles
     * @return \Swagger\Client\Model\SkillReportsListCalibrationSubordinatesRoles[]
     */
    public function getSubordinatesRoles()
    {
        return $this->container['subordinates_roles'];
    }

    /**
     * Sets subordinates_roles
     * @param \Swagger\Client\Model\SkillReportsListCalibrationSubordinatesRoles[] $subordinates_roles Subordinates roles
     * @return $this
     */
    public function setSubordinatesRoles($subordinates_roles)
    {
        $this->container['subordinates_roles'] = $subordinates_roles;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


