<?php
/**
 * ManageSiteBootstrapBilling
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ManageSiteBootstrapBilling Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ManageSiteBootstrapBilling implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ManageSiteBootstrapBilling';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'active_users' => 'int',
        'demo_platform' => 'bool',
        'is_saas' => 'bool',
        'is_trial' => 'bool',
        'bought_users' => 'int',
        'is_trial_expired' => 'bool',
        'trial_remaining_days' => 'int',
        'enable_user_billing' => 'bool',
        'is_platform_expired' => 'bool',
        'in_grace_period' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'active_users' => 'active_users',
        'demo_platform' => 'demo_platform',
        'is_saas' => 'is_saas',
        'is_trial' => 'is_trial',
        'bought_users' => 'bought_users',
        'is_trial_expired' => 'is_trial_expired',
        'trial_remaining_days' => 'trial_remaining_days',
        'enable_user_billing' => 'enable_user_billing',
        'is_platform_expired' => 'is_platform_expired',
        'in_grace_period' => 'in_grace_period'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'active_users' => 'setActiveUsers',
        'demo_platform' => 'setDemoPlatform',
        'is_saas' => 'setIsSaas',
        'is_trial' => 'setIsTrial',
        'bought_users' => 'setBoughtUsers',
        'is_trial_expired' => 'setIsTrialExpired',
        'trial_remaining_days' => 'setTrialRemainingDays',
        'enable_user_billing' => 'setEnableUserBilling',
        'is_platform_expired' => 'setIsPlatformExpired',
        'in_grace_period' => 'setInGracePeriod'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'active_users' => 'getActiveUsers',
        'demo_platform' => 'getDemoPlatform',
        'is_saas' => 'getIsSaas',
        'is_trial' => 'getIsTrial',
        'bought_users' => 'getBoughtUsers',
        'is_trial_expired' => 'getIsTrialExpired',
        'trial_remaining_days' => 'getTrialRemainingDays',
        'enable_user_billing' => 'getEnableUserBilling',
        'is_platform_expired' => 'getIsPlatformExpired',
        'in_grace_period' => 'getInGracePeriod'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active_users'] = isset($data['active_users']) ? $data['active_users'] : null;
        $this->container['demo_platform'] = isset($data['demo_platform']) ? $data['demo_platform'] : null;
        $this->container['is_saas'] = isset($data['is_saas']) ? $data['is_saas'] : null;
        $this->container['is_trial'] = isset($data['is_trial']) ? $data['is_trial'] : null;
        $this->container['bought_users'] = isset($data['bought_users']) ? $data['bought_users'] : null;
        $this->container['is_trial_expired'] = isset($data['is_trial_expired']) ? $data['is_trial_expired'] : null;
        $this->container['trial_remaining_days'] = isset($data['trial_remaining_days']) ? $data['trial_remaining_days'] : null;
        $this->container['enable_user_billing'] = isset($data['enable_user_billing']) ? $data['enable_user_billing'] : null;
        $this->container['is_platform_expired'] = isset($data['is_platform_expired']) ? $data['is_platform_expired'] : null;
        $this->container['in_grace_period'] = isset($data['in_grace_period']) ? $data['in_grace_period'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['is_platform_expired'] === null) {
            $invalid_properties[] = "'is_platform_expired' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['is_platform_expired'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets active_users
     * @return int
     */
    public function getActiveUsers()
    {
        return $this->container['active_users'];
    }

    /**
     * Sets active_users
     * @param int $active_users Number of active users in the platform
     * @return $this
     */
    public function setActiveUsers($active_users)
    {
        $this->container['active_users'] = $active_users;

        return $this;
    }

    /**
     * Gets demo_platform
     * @return bool
     */
    public function getDemoPlatform()
    {
        return $this->container['demo_platform'];
    }

    /**
     * Sets demo_platform
     * @param bool $demo_platform If it is demo platform
     * @return $this
     */
    public function setDemoPlatform($demo_platform)
    {
        $this->container['demo_platform'] = $demo_platform;

        return $this;
    }

    /**
     * Gets is_saas
     * @return bool
     */
    public function getIsSaas()
    {
        return $this->container['is_saas'];
    }

    /**
     * Sets is_saas
     * @param bool $is_saas If the LMS is SAAS
     * @return $this
     */
    public function setIsSaas($is_saas)
    {
        $this->container['is_saas'] = $is_saas;

        return $this;
    }

    /**
     * Gets is_trial
     * @return bool
     */
    public function getIsTrial()
    {
        return $this->container['is_trial'];
    }

    /**
     * Sets is_trial
     * @param bool $is_trial If the LMS is in trial period
     * @return $this
     */
    public function setIsTrial($is_trial)
    {
        $this->container['is_trial'] = $is_trial;

        return $this;
    }

    /**
     * Gets bought_users
     * @return int
     */
    public function getBoughtUsers()
    {
        return $this->container['bought_users'];
    }

    /**
     * Sets bought_users
     * @param int $bought_users Number of bought users in the platform
     * @return $this
     */
    public function setBoughtUsers($bought_users)
    {
        $this->container['bought_users'] = $bought_users;

        return $this;
    }

    /**
     * Gets is_trial_expired
     * @return bool
     */
    public function getIsTrialExpired()
    {
        return $this->container['is_trial_expired'];
    }

    /**
     * Sets is_trial_expired
     * @param bool $is_trial_expired If the trial period is expired
     * @return $this
     */
    public function setIsTrialExpired($is_trial_expired)
    {
        $this->container['is_trial_expired'] = $is_trial_expired;

        return $this;
    }

    /**
     * Gets trial_remaining_days
     * @return int
     */
    public function getTrialRemainingDays()
    {
        return $this->container['trial_remaining_days'];
    }

    /**
     * Sets trial_remaining_days
     * @param int $trial_remaining_days Days until trial period is valid
     * @return $this
     */
    public function setTrialRemainingDays($trial_remaining_days)
    {
        $this->container['trial_remaining_days'] = $trial_remaining_days;

        return $this;
    }

    /**
     * Gets enable_user_billing
     * @return bool
     */
    public function getEnableUserBilling()
    {
        return $this->container['enable_user_billing'];
    }

    /**
     * Sets enable_user_billing
     * @param bool $enable_user_billing Enable option to buy more users
     * @return $this
     */
    public function setEnableUserBilling($enable_user_billing)
    {
        $this->container['enable_user_billing'] = $enable_user_billing;

        return $this;
    }

    /**
     * Gets is_platform_expired
     * @return bool
     */
    public function getIsPlatformExpired()
    {
        return $this->container['is_platform_expired'];
    }

    /**
     * Sets is_platform_expired
     * @param bool $is_platform_expired If the LMS subscription is expired
     * @return $this
     */
    public function setIsPlatformExpired($is_platform_expired)
    {
        $this->container['is_platform_expired'] = $is_platform_expired;

        return $this;
    }

    /**
     * Gets in_grace_period
     * @return int
     */
    public function getInGracePeriod()
    {
        return $this->container['in_grace_period'];
    }

    /**
     * Sets in_grace_period
     * @param int $in_grace_period 
     * @return $this
     */
    public function setInGracePeriod($in_grace_period)
    {
        $this->container['in_grace_period'] = $in_grace_period;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


