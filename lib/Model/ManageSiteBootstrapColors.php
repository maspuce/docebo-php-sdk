<?php
/**
 * ManageSiteBootstrapColors
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ManageSiteBootstrapColors Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ManageSiteBootstrapColors implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ManageSiteBootstrapColors';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'secondary_color' => 'string',
        'warning_color' => 'string',
        'main_color' => 'string',
        'main_text_color' => 'string',
        'background_color' => 'string',
        'borders_color' => 'string',
        'action_color' => 'string',
        'error_color' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'secondary_color' => 'secondaryColor',
        'warning_color' => 'warningColor',
        'main_color' => 'mainColor',
        'main_text_color' => 'mainTextColor',
        'background_color' => 'backgroundColor',
        'borders_color' => 'bordersColor',
        'action_color' => 'actionColor',
        'error_color' => 'errorColor'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'secondary_color' => 'setSecondaryColor',
        'warning_color' => 'setWarningColor',
        'main_color' => 'setMainColor',
        'main_text_color' => 'setMainTextColor',
        'background_color' => 'setBackgroundColor',
        'borders_color' => 'setBordersColor',
        'action_color' => 'setActionColor',
        'error_color' => 'setErrorColor'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'secondary_color' => 'getSecondaryColor',
        'warning_color' => 'getWarningColor',
        'main_color' => 'getMainColor',
        'main_text_color' => 'getMainTextColor',
        'background_color' => 'getBackgroundColor',
        'borders_color' => 'getBordersColor',
        'action_color' => 'getActionColor',
        'error_color' => 'getErrorColor'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['secondary_color'] = isset($data['secondary_color']) ? $data['secondary_color'] : null;
        $this->container['warning_color'] = isset($data['warning_color']) ? $data['warning_color'] : null;
        $this->container['main_color'] = isset($data['main_color']) ? $data['main_color'] : null;
        $this->container['main_text_color'] = isset($data['main_text_color']) ? $data['main_text_color'] : null;
        $this->container['background_color'] = isset($data['background_color']) ? $data['background_color'] : null;
        $this->container['borders_color'] = isset($data['borders_color']) ? $data['borders_color'] : null;
        $this->container['action_color'] = isset($data['action_color']) ? $data['action_color'] : null;
        $this->container['error_color'] = isset($data['error_color']) ? $data['error_color'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['secondary_color'] === null) {
            $invalid_properties[] = "'secondary_color' can't be null";
        }
        if ($this->container['warning_color'] === null) {
            $invalid_properties[] = "'warning_color' can't be null";
        }
        if ($this->container['main_color'] === null) {
            $invalid_properties[] = "'main_color' can't be null";
        }
        if ($this->container['main_text_color'] === null) {
            $invalid_properties[] = "'main_text_color' can't be null";
        }
        if ($this->container['background_color'] === null) {
            $invalid_properties[] = "'background_color' can't be null";
        }
        if ($this->container['borders_color'] === null) {
            $invalid_properties[] = "'borders_color' can't be null";
        }
        if ($this->container['action_color'] === null) {
            $invalid_properties[] = "'action_color' can't be null";
        }
        if ($this->container['error_color'] === null) {
            $invalid_properties[] = "'error_color' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['secondary_color'] === null) {
            return false;
        }
        if ($this->container['warning_color'] === null) {
            return false;
        }
        if ($this->container['main_color'] === null) {
            return false;
        }
        if ($this->container['main_text_color'] === null) {
            return false;
        }
        if ($this->container['background_color'] === null) {
            return false;
        }
        if ($this->container['borders_color'] === null) {
            return false;
        }
        if ($this->container['action_color'] === null) {
            return false;
        }
        if ($this->container['error_color'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets secondary_color
     * @return string
     */
    public function getSecondaryColor()
    {
        return $this->container['secondary_color'];
    }

    /**
     * Sets secondary_color
     * @param string $secondary_color Secondary color
     * @return $this
     */
    public function setSecondaryColor($secondary_color)
    {
        $this->container['secondary_color'] = $secondary_color;

        return $this;
    }

    /**
     * Gets warning_color
     * @return string
     */
    public function getWarningColor()
    {
        return $this->container['warning_color'];
    }

    /**
     * Sets warning_color
     * @param string $warning_color Warnings color
     * @return $this
     */
    public function setWarningColor($warning_color)
    {
        $this->container['warning_color'] = $warning_color;

        return $this;
    }

    /**
     * Gets main_color
     * @return string
     */
    public function getMainColor()
    {
        return $this->container['main_color'];
    }

    /**
     * Sets main_color
     * @param string $main_color Main color
     * @return $this
     */
    public function setMainColor($main_color)
    {
        $this->container['main_color'] = $main_color;

        return $this;
    }

    /**
     * Gets main_text_color
     * @return string
     */
    public function getMainTextColor()
    {
        return $this->container['main_text_color'];
    }

    /**
     * Sets main_text_color
     * @param string $main_text_color Main text color
     * @return $this
     */
    public function setMainTextColor($main_text_color)
    {
        $this->container['main_text_color'] = $main_text_color;

        return $this;
    }

    /**
     * Gets background_color
     * @return string
     */
    public function getBackgroundColor()
    {
        return $this->container['background_color'];
    }

    /**
     * Sets background_color
     * @param string $background_color Background and hover items color
     * @return $this
     */
    public function setBackgroundColor($background_color)
    {
        $this->container['background_color'] = $background_color;

        return $this;
    }

    /**
     * Gets borders_color
     * @return string
     */
    public function getBordersColor()
    {
        return $this->container['borders_color'];
    }

    /**
     * Sets borders_color
     * @param string $borders_color Borders and lines color
     * @return $this
     */
    public function setBordersColor($borders_color)
    {
        $this->container['borders_color'] = $borders_color;

        return $this;
    }

    /**
     * Gets action_color
     * @return string
     */
    public function getActionColor()
    {
        return $this->container['action_color'];
    }

    /**
     * Sets action_color
     * @param string $action_color Confirmations color
     * @return $this
     */
    public function setActionColor($action_color)
    {
        $this->container['action_color'] = $action_color;

        return $this;
    }

    /**
     * Gets error_color
     * @return string
     */
    public function getErrorColor()
    {
        return $this->container['error_color'];
    }

    /**
     * Sets error_color
     * @param string $error_color Errors color
     * @return $this
     */
    public function setErrorColor($error_color)
    {
        $this->container['error_color'] = $error_color;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


