<?php
/**
 * LearnCourseSessionsData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * LearnCourseSessionsData Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class LearnCourseSessionsData implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'LearnCourseSessionsData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'current_location' => 'int',
        'is_enrolled' => 'bool',
        'sessions' => '\Swagger\Client\Model\LearnCourseSessionsSessions[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'current_location' => 'current_location',
        'is_enrolled' => 'is_enrolled',
        'sessions' => 'sessions'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'current_location' => 'setCurrentLocation',
        'is_enrolled' => 'setIsEnrolled',
        'sessions' => 'setSessions'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'current_location' => 'getCurrentLocation',
        'is_enrolled' => 'getIsEnrolled',
        'sessions' => 'getSessions'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['current_location'] = isset($data['current_location']) ? $data['current_location'] : null;
        $this->container['is_enrolled'] = isset($data['is_enrolled']) ? $data['is_enrolled'] : null;
        $this->container['sessions'] = isset($data['sessions']) ? $data['sessions'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['current_location'] === null) {
            $invalid_properties[] = "'current_location' can't be null";
        }
        if ($this->container['is_enrolled'] === null) {
            $invalid_properties[] = "'is_enrolled' can't be null";
        }
        if ($this->container['sessions'] === null) {
            $invalid_properties[] = "'sessions' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['current_location'] === null) {
            return false;
        }
        if ($this->container['is_enrolled'] === null) {
            return false;
        }
        if ($this->container['sessions'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets current_location
     * @return int
     */
    public function getCurrentLocation()
    {
        return $this->container['current_location'];
    }

    /**
     * Sets current_location
     * @param int $current_location The location to be displayed when viewing the session. If there are different locations for the different dates, then this returns -1
     * @return $this
     */
    public function setCurrentLocation($current_location)
    {
        $this->container['current_location'] = $current_location;

        return $this;
    }

    /**
     * Gets is_enrolled
     * @return bool
     */
    public function getIsEnrolled()
    {
        return $this->container['is_enrolled'];
    }

    /**
     * Sets is_enrolled
     * @param bool $is_enrolled If the user is enrolled in this session
     * @return $this
     */
    public function setIsEnrolled($is_enrolled)
    {
        $this->container['is_enrolled'] = $is_enrolled;

        return $this;
    }

    /**
     * Gets sessions
     * @return \Swagger\Client\Model\LearnCourseSessionsSessions[]
     */
    public function getSessions()
    {
        return $this->container['sessions'];
    }

    /**
     * Sets sessions
     * @param \Swagger\Client\Model\LearnCourseSessionsSessions[] $sessions Array of course sessions. Indexed by the unique ID of the session
     * @return $this
     */
    public function setSessions($sessions)
    {
        $this->container['sessions'] = $sessions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


