<?php
/**
 * SkillEvaluationGetManagerSummaryData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * SkillEvaluationGetManagerSummaryData Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SkillEvaluationGetManagerSummaryData implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SkillEvaluationGetManagerSummaryData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'due_date' => '\DateTime',
        'skills' => '\Swagger\Client\Model\SkillEvaluationGetManagerSummarySkills',
        'request_id' => 'int',
        'role_description' => 'string',
        'role_title' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'due_date' => 'due_date',
        'skills' => 'skills',
        'request_id' => 'request_id',
        'role_description' => 'role_description',
        'role_title' => 'role_title'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'due_date' => 'setDueDate',
        'skills' => 'setSkills',
        'request_id' => 'setRequestId',
        'role_description' => 'setRoleDescription',
        'role_title' => 'setRoleTitle'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'due_date' => 'getDueDate',
        'skills' => 'getSkills',
        'request_id' => 'getRequestId',
        'role_description' => 'getRoleDescription',
        'role_title' => 'getRoleTitle'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['skills'] = isset($data['skills']) ? $data['skills'] : null;
        $this->container['request_id'] = isset($data['request_id']) ? $data['request_id'] : null;
        $this->container['role_description'] = isset($data['role_description']) ? $data['role_description'] : null;
        $this->container['role_title'] = isset($data['role_title']) ? $data['role_title'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['due_date'] === null) {
            $invalid_properties[] = "'due_date' can't be null";
        }
        if ($this->container['skills'] === null) {
            $invalid_properties[] = "'skills' can't be null";
        }
        if ($this->container['request_id'] === null) {
            $invalid_properties[] = "'request_id' can't be null";
        }
        if ($this->container['role_description'] === null) {
            $invalid_properties[] = "'role_description' can't be null";
        }
        if ($this->container['role_title'] === null) {
            $invalid_properties[] = "'role_title' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['due_date'] === null) {
            return false;
        }
        if ($this->container['skills'] === null) {
            return false;
        }
        if ($this->container['request_id'] === null) {
            return false;
        }
        if ($this->container['role_description'] === null) {
            return false;
        }
        if ($this->container['role_title'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets due_date
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     * @param \DateTime $due_date The due date for the evaluation
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets skills
     * @return \Swagger\Client\Model\SkillEvaluationGetManagerSummarySkills
     */
    public function getSkills()
    {
        return $this->container['skills'];
    }

    /**
     * Sets skills
     * @param \Swagger\Client\Model\SkillEvaluationGetManagerSummarySkills $skills Array of skills assigned to the role
     * @return $this
     */
    public function setSkills($skills)
    {
        $this->container['skills'] = $skills;

        return $this;
    }

    /**
     * Gets request_id
     * @return int
     */
    public function getRequestId()
    {
        return $this->container['request_id'];
    }

    /**
     * Sets request_id
     * @param int $request_id The ID of the request for the manager evaluation
     * @return $this
     */
    public function setRequestId($request_id)
    {
        $this->container['request_id'] = $request_id;

        return $this;
    }

    /**
     * Gets role_description
     * @return string
     */
    public function getRoleDescription()
    {
        return $this->container['role_description'];
    }

    /**
     * Sets role_description
     * @param string $role_description The description of a role on selected language
     * @return $this
     */
    public function setRoleDescription($role_description)
    {
        $this->container['role_description'] = $role_description;

        return $this;
    }

    /**
     * Gets role_title
     * @return string
     */
    public function getRoleTitle()
    {
        return $this->container['role_title'];
    }

    /**
     * Sets role_title
     * @param string $role_title The name of a role on selected language (default language is returned if no translation)
     * @return $this
     */
    public function setRoleTitle($role_title)
    {
        $this->container['role_title'] = $role_title;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


