<?php
/**
 * ManageSiteBootstrapData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ManageSiteBootstrapData Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ManageSiteBootstrapData implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ManageSiteBootstrapData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'branding_elements' => '\Swagger\Client\Model\ManageSiteBootstrapBrandingElements',
        'catalog_settings' => '\Swagger\Client\Model\ManageSiteBootstrapCatalogSettings',
        'active_theme' => 'string',
        'theme' => 'string',
        'platform_version' => 'string',
        'default_platform_language' => 'string',
        'settings' => '\Swagger\Client\Model\ManageSiteBootstrapSettings',
        'active_plugins' => '\Swagger\Client\Model\ManageSiteBootstrapActivePlugins[]',
        'active_languages' => '\Swagger\Client\Model\ManageSiteBootstrapActiveLanguages[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'branding_elements' => 'branding_elements',
        'catalog_settings' => 'catalog_settings',
        'active_theme' => 'active_theme',
        'theme' => 'theme',
        'platform_version' => 'platform_version',
        'default_platform_language' => 'default_platform_language',
        'settings' => 'settings',
        'active_plugins' => 'active_plugins',
        'active_languages' => 'active_languages'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'branding_elements' => 'setBrandingElements',
        'catalog_settings' => 'setCatalogSettings',
        'active_theme' => 'setActiveTheme',
        'theme' => 'setTheme',
        'platform_version' => 'setPlatformVersion',
        'default_platform_language' => 'setDefaultPlatformLanguage',
        'settings' => 'setSettings',
        'active_plugins' => 'setActivePlugins',
        'active_languages' => 'setActiveLanguages'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'branding_elements' => 'getBrandingElements',
        'catalog_settings' => 'getCatalogSettings',
        'active_theme' => 'getActiveTheme',
        'theme' => 'getTheme',
        'platform_version' => 'getPlatformVersion',
        'default_platform_language' => 'getDefaultPlatformLanguage',
        'settings' => 'getSettings',
        'active_plugins' => 'getActivePlugins',
        'active_languages' => 'getActiveLanguages'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['branding_elements'] = isset($data['branding_elements']) ? $data['branding_elements'] : null;
        $this->container['catalog_settings'] = isset($data['catalog_settings']) ? $data['catalog_settings'] : null;
        $this->container['active_theme'] = isset($data['active_theme']) ? $data['active_theme'] : null;
        $this->container['theme'] = isset($data['theme']) ? $data['theme'] : null;
        $this->container['platform_version'] = isset($data['platform_version']) ? $data['platform_version'] : null;
        $this->container['default_platform_language'] = isset($data['default_platform_language']) ? $data['default_platform_language'] : null;
        $this->container['settings'] = isset($data['settings']) ? $data['settings'] : null;
        $this->container['active_plugins'] = isset($data['active_plugins']) ? $data['active_plugins'] : null;
        $this->container['active_languages'] = isset($data['active_languages']) ? $data['active_languages'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['active_theme'] === null) {
            $invalid_properties[] = "'active_theme' can't be null";
        }
        if ($this->container['theme'] === null) {
            $invalid_properties[] = "'theme' can't be null";
        }
        if ($this->container['platform_version'] === null) {
            $invalid_properties[] = "'platform_version' can't be null";
        }
        if ($this->container['default_platform_language'] === null) {
            $invalid_properties[] = "'default_platform_language' can't be null";
        }
        if ($this->container['active_plugins'] === null) {
            $invalid_properties[] = "'active_plugins' can't be null";
        }
        if ($this->container['active_languages'] === null) {
            $invalid_properties[] = "'active_languages' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['active_theme'] === null) {
            return false;
        }
        if ($this->container['theme'] === null) {
            return false;
        }
        if ($this->container['platform_version'] === null) {
            return false;
        }
        if ($this->container['default_platform_language'] === null) {
            return false;
        }
        if ($this->container['active_plugins'] === null) {
            return false;
        }
        if ($this->container['active_languages'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets branding_elements
     * @return \Swagger\Client\Model\ManageSiteBootstrapBrandingElements
     */
    public function getBrandingElements()
    {
        return $this->container['branding_elements'];
    }

    /**
     * Sets branding_elements
     * @param \Swagger\Client\Model\ManageSiteBootstrapBrandingElements $branding_elements Main branding elements of current LMS
     * @return $this
     */
    public function setBrandingElements($branding_elements)
    {
        $this->container['branding_elements'] = $branding_elements;

        return $this;
    }

    /**
     * Gets catalog_settings
     * @return \Swagger\Client\Model\ManageSiteBootstrapCatalogSettings
     */
    public function getCatalogSettings()
    {
        return $this->container['catalog_settings'];
    }

    /**
     * Sets catalog_settings
     * @param \Swagger\Client\Model\ManageSiteBootstrapCatalogSettings $catalog_settings 
     * @return $this
     */
    public function setCatalogSettings($catalog_settings)
    {
        $this->container['catalog_settings'] = $catalog_settings;

        return $this;
    }

    /**
     * Gets active_theme
     * @return string
     */
    public function getActiveTheme()
    {
        return $this->container['active_theme'];
    }

    /**
     * Sets active_theme
     * @param string $active_theme The current active theme assigned to requested main domain or multidomain client. It can be different from &quot;theme&quot; when previewing themes.
     * @return $this
     */
    public function setActiveTheme($active_theme)
    {
        $this->container['active_theme'] = $active_theme;

        return $this;
    }

    /**
     * Gets theme
     * @return string
     */
    public function getTheme()
    {
        return $this->container['theme'];
    }

    /**
     * Sets theme
     * @param string $theme The current theme being loaded for the requested main domain or multidomain client
     * @return $this
     */
    public function setTheme($theme)
    {
        $this->container['theme'] = $theme;

        return $this;
    }

    /**
     * Gets platform_version
     * @return string
     */
    public function getPlatformVersion()
    {
        return $this->container['platform_version'];
    }

    /**
     * Sets platform_version
     * @param string $platform_version Platform current version from core_setting =&gt; core_version
     * @return $this
     */
    public function setPlatformVersion($platform_version)
    {
        $this->container['platform_version'] = $platform_version;

        return $this;
    }

    /**
     * Gets default_platform_language
     * @return string
     */
    public function getDefaultPlatformLanguage()
    {
        return $this->container['default_platform_language'];
    }

    /**
     * Sets default_platform_language
     * @param string $default_platform_language Default platform language in short format - bg, en etc.
     * @return $this
     */
    public function setDefaultPlatformLanguage($default_platform_language)
    {
        $this->container['default_platform_language'] = $default_platform_language;

        return $this;
    }

    /**
     * Gets settings
     * @return \Swagger\Client\Model\ManageSiteBootstrapSettings
     */
    public function getSettings()
    {
        return $this->container['settings'];
    }

    /**
     * Sets settings
     * @param \Swagger\Client\Model\ManageSiteBootstrapSettings $settings 
     * @return $this
     */
    public function setSettings($settings)
    {
        $this->container['settings'] = $settings;

        return $this;
    }

    /**
     * Gets active_plugins
     * @return \Swagger\Client\Model\ManageSiteBootstrapActivePlugins[]
     */
    public function getActivePlugins()
    {
        return $this->container['active_plugins'];
    }

    /**
     * Sets active_plugins
     * @param \Swagger\Client\Model\ManageSiteBootstrapActivePlugins[] $active_plugins Array with active plugins
     * @return $this
     */
    public function setActivePlugins($active_plugins)
    {
        $this->container['active_plugins'] = $active_plugins;

        return $this;
    }

    /**
     * Gets active_languages
     * @return \Swagger\Client\Model\ManageSiteBootstrapActiveLanguages[]
     */
    public function getActiveLanguages()
    {
        return $this->container['active_languages'];
    }

    /**
     * Sets active_languages
     * @param \Swagger\Client\Model\ManageSiteBootstrapActiveLanguages[] $active_languages Array with active languages
     * @return $this
     */
    public function setActiveLanguages($active_languages)
    {
        $this->container['active_languages'] = $active_languages;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


