<?php
/**
 * SkillRoleListSimulatorData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * SkillRoleListSimulatorData Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SkillRoleListSimulatorData implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SkillRoleListSimulatorData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'manager' => '\Swagger\Client\Model\SkillRoleListSimulatorManager[]',
        'high_threshold' => 'int',
        'self' => '\Swagger\Client\Model\SkillRoleListSimulatorSelf[]',
        'manager_weight' => 'float',
        'peer_weight' => 'float',
        'peer' => '\Swagger\Client\Model\SkillRoleListSimulatorPeer[]',
        'low_threshold' => 'int',
        'self_weight' => 'float'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'manager' => 'manager',
        'high_threshold' => 'high_threshold',
        'self' => 'self',
        'manager_weight' => 'manager_weight',
        'peer_weight' => 'peer_weight',
        'peer' => 'peer',
        'low_threshold' => 'low_threshold',
        'self_weight' => 'self_weight'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'manager' => 'setManager',
        'high_threshold' => 'setHighThreshold',
        'self' => 'setSelf',
        'manager_weight' => 'setManagerWeight',
        'peer_weight' => 'setPeerWeight',
        'peer' => 'setPeer',
        'low_threshold' => 'setLowThreshold',
        'self_weight' => 'setSelfWeight'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'manager' => 'getManager',
        'high_threshold' => 'getHighThreshold',
        'self' => 'getSelf',
        'manager_weight' => 'getManagerWeight',
        'peer_weight' => 'getPeerWeight',
        'peer' => 'getPeer',
        'low_threshold' => 'getLowThreshold',
        'self_weight' => 'getSelfWeight'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['manager'] = isset($data['manager']) ? $data['manager'] : null;
        $this->container['high_threshold'] = isset($data['high_threshold']) ? $data['high_threshold'] : null;
        $this->container['self'] = isset($data['self']) ? $data['self'] : null;
        $this->container['manager_weight'] = isset($data['manager_weight']) ? $data['manager_weight'] : null;
        $this->container['peer_weight'] = isset($data['peer_weight']) ? $data['peer_weight'] : null;
        $this->container['peer'] = isset($data['peer']) ? $data['peer'] : null;
        $this->container['low_threshold'] = isset($data['low_threshold']) ? $data['low_threshold'] : null;
        $this->container['self_weight'] = isset($data['self_weight']) ? $data['self_weight'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['manager'] === null) {
            $invalid_properties[] = "'manager' can't be null";
        }
        if ($this->container['high_threshold'] === null) {
            $invalid_properties[] = "'high_threshold' can't be null";
        }
        if ($this->container['self'] === null) {
            $invalid_properties[] = "'self' can't be null";
        }
        if ($this->container['manager_weight'] === null) {
            $invalid_properties[] = "'manager_weight' can't be null";
        }
        if ($this->container['peer_weight'] === null) {
            $invalid_properties[] = "'peer_weight' can't be null";
        }
        if ($this->container['low_threshold'] === null) {
            $invalid_properties[] = "'low_threshold' can't be null";
        }
        if ($this->container['self_weight'] === null) {
            $invalid_properties[] = "'self_weight' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['manager'] === null) {
            return false;
        }
        if ($this->container['high_threshold'] === null) {
            return false;
        }
        if ($this->container['self'] === null) {
            return false;
        }
        if ($this->container['manager_weight'] === null) {
            return false;
        }
        if ($this->container['peer_weight'] === null) {
            return false;
        }
        if ($this->container['low_threshold'] === null) {
            return false;
        }
        if ($this->container['self_weight'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets manager
     * @return \Swagger\Client\Model\SkillRoleListSimulatorManager[]
     */
    public function getManager()
    {
        return $this->container['manager'];
    }

    /**
     * Sets manager
     * @param \Swagger\Client\Model\SkillRoleListSimulatorManager[] $manager Array with ratings for manager evaluations
     * @return $this
     */
    public function setManager($manager)
    {
        $this->container['manager'] = $manager;

        return $this;
    }

    /**
     * Gets high_threshold
     * @return int
     */
    public function getHighThreshold()
    {
        return $this->container['high_threshold'];
    }

    /**
     * Sets high_threshold
     * @param int $high_threshold Expertise Threshold
     * @return $this
     */
    public function setHighThreshold($high_threshold)
    {
        $this->container['high_threshold'] = $high_threshold;

        return $this;
    }

    /**
     * Gets self
     * @return \Swagger\Client\Model\SkillRoleListSimulatorSelf[]
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     * @param \Swagger\Client\Model\SkillRoleListSimulatorSelf[] $self Array with ratings for self evaluations
     * @return $this
     */
    public function setSelf($self)
    {
        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets manager_weight
     * @return float
     */
    public function getManagerWeight()
    {
        return $this->container['manager_weight'];
    }

    /**
     * Sets manager_weight
     * @param float $manager_weight Manager evaluation weight for gap analisys
     * @return $this
     */
    public function setManagerWeight($manager_weight)
    {
        $this->container['manager_weight'] = $manager_weight;

        return $this;
    }

    /**
     * Gets peer_weight
     * @return float
     */
    public function getPeerWeight()
    {
        return $this->container['peer_weight'];
    }

    /**
     * Sets peer_weight
     * @param float $peer_weight Peer evaluation weight for gap analisys
     * @return $this
     */
    public function setPeerWeight($peer_weight)
    {
        $this->container['peer_weight'] = $peer_weight;

        return $this;
    }

    /**
     * Gets peer
     * @return \Swagger\Client\Model\SkillRoleListSimulatorPeer[]
     */
    public function getPeer()
    {
        return $this->container['peer'];
    }

    /**
     * Sets peer
     * @param \Swagger\Client\Model\SkillRoleListSimulatorPeer[] $peer Array with ratings for peer evaluations
     * @return $this
     */
    public function setPeer($peer)
    {
        $this->container['peer'] = $peer;

        return $this;
    }

    /**
     * Gets low_threshold
     * @return int
     */
    public function getLowThreshold()
    {
        return $this->container['low_threshold'];
    }

    /**
     * Sets low_threshold
     * @param int $low_threshold Gap Threshold
     * @return $this
     */
    public function setLowThreshold($low_threshold)
    {
        $this->container['low_threshold'] = $low_threshold;

        return $this;
    }

    /**
     * Gets self_weight
     * @return float
     */
    public function getSelfWeight()
    {
        return $this->container['self_weight'];
    }

    /**
     * Sets self_weight
     * @param float $self_weight Self evaluation weight for gap analisys
     * @return $this
     */
    public function setSelfWeight($self_weight)
    {
        $this->container['self_weight'] = $self_weight;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


