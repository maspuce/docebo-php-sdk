<?php
/**
 * SkillReportsListRoleUsersItems
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * SkillReportsListRoleUsersItems Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SkillReportsListRoleUsersItems implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SkillReportsListRoleUsersItems';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'managed_by' => 'string',
        'user_rating' => 'double',
        'user_id' => 'int',
        'user_rating_name' => 'string',
        'user_role_days' => 'int',
        'last_name' => 'string',
        'avatar' => 'string',
        'first_name' => 'string',
        'user_email' => 'string',
        'role_id' => 'int',
        'role_name' => 'string',
        'login_name' => 'string',
        'username' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'managed_by' => 'managed_by',
        'user_rating' => 'user_rating',
        'user_id' => 'user_id',
        'user_rating_name' => 'user_rating_name',
        'user_role_days' => 'user_role_days',
        'last_name' => 'last_name',
        'avatar' => 'avatar',
        'first_name' => 'first_name',
        'user_email' => 'user_email',
        'role_id' => 'role_id',
        'role_name' => 'role_name',
        'login_name' => 'login_name',
        'username' => 'username'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'managed_by' => 'setManagedBy',
        'user_rating' => 'setUserRating',
        'user_id' => 'setUserId',
        'user_rating_name' => 'setUserRatingName',
        'user_role_days' => 'setUserRoleDays',
        'last_name' => 'setLastName',
        'avatar' => 'setAvatar',
        'first_name' => 'setFirstName',
        'user_email' => 'setUserEmail',
        'role_id' => 'setRoleId',
        'role_name' => 'setRoleName',
        'login_name' => 'setLoginName',
        'username' => 'setUsername'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'managed_by' => 'getManagedBy',
        'user_rating' => 'getUserRating',
        'user_id' => 'getUserId',
        'user_rating_name' => 'getUserRatingName',
        'user_role_days' => 'getUserRoleDays',
        'last_name' => 'getLastName',
        'avatar' => 'getAvatar',
        'first_name' => 'getFirstName',
        'user_email' => 'getUserEmail',
        'role_id' => 'getRoleId',
        'role_name' => 'getRoleName',
        'login_name' => 'getLoginName',
        'username' => 'getUsername'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['managed_by'] = isset($data['managed_by']) ? $data['managed_by'] : null;
        $this->container['user_rating'] = isset($data['user_rating']) ? $data['user_rating'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['user_rating_name'] = isset($data['user_rating_name']) ? $data['user_rating_name'] : null;
        $this->container['user_role_days'] = isset($data['user_role_days']) ? $data['user_role_days'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['avatar'] = isset($data['avatar']) ? $data['avatar'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['user_email'] = isset($data['user_email']) ? $data['user_email'] : null;
        $this->container['role_id'] = isset($data['role_id']) ? $data['role_id'] : null;
        $this->container['role_name'] = isset($data['role_name']) ? $data['role_name'] : null;
        $this->container['login_name'] = isset($data['login_name']) ? $data['login_name'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['managed_by'] === null) {
            $invalid_properties[] = "'managed_by' can't be null";
        }
        if ($this->container['user_rating'] === null) {
            $invalid_properties[] = "'user_rating' can't be null";
        }
        if ($this->container['user_id'] === null) {
            $invalid_properties[] = "'user_id' can't be null";
        }
        if ($this->container['user_rating_name'] === null) {
            $invalid_properties[] = "'user_rating_name' can't be null";
        }
        if ($this->container['user_role_days'] === null) {
            $invalid_properties[] = "'user_role_days' can't be null";
        }
        if ($this->container['last_name'] === null) {
            $invalid_properties[] = "'last_name' can't be null";
        }
        if ($this->container['avatar'] === null) {
            $invalid_properties[] = "'avatar' can't be null";
        }
        if ($this->container['first_name'] === null) {
            $invalid_properties[] = "'first_name' can't be null";
        }
        if ($this->container['user_email'] === null) {
            $invalid_properties[] = "'user_email' can't be null";
        }
        if ($this->container['role_id'] === null) {
            $invalid_properties[] = "'role_id' can't be null";
        }
        if ($this->container['role_name'] === null) {
            $invalid_properties[] = "'role_name' can't be null";
        }
        if ($this->container['login_name'] === null) {
            $invalid_properties[] = "'login_name' can't be null";
        }
        if ($this->container['username'] === null) {
            $invalid_properties[] = "'username' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['managed_by'] === null) {
            return false;
        }
        if ($this->container['user_rating'] === null) {
            return false;
        }
        if ($this->container['user_id'] === null) {
            return false;
        }
        if ($this->container['user_rating_name'] === null) {
            return false;
        }
        if ($this->container['user_role_days'] === null) {
            return false;
        }
        if ($this->container['last_name'] === null) {
            return false;
        }
        if ($this->container['avatar'] === null) {
            return false;
        }
        if ($this->container['first_name'] === null) {
            return false;
        }
        if ($this->container['user_email'] === null) {
            return false;
        }
        if ($this->container['role_id'] === null) {
            return false;
        }
        if ($this->container['role_name'] === null) {
            return false;
        }
        if ($this->container['login_name'] === null) {
            return false;
        }
        if ($this->container['username'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets managed_by
     * @return string
     */
    public function getManagedBy()
    {
        return $this->container['managed_by'];
    }

    /**
     * Sets managed_by
     * @param string $managed_by The user manager
     * @return $this
     */
    public function setManagedBy($managed_by)
    {
        $this->container['managed_by'] = $managed_by;

        return $this;
    }

    /**
     * Gets user_rating
     * @return double
     */
    public function getUserRating()
    {
        return $this->container['user_rating'];
    }

    /**
     * Sets user_rating
     * @param double $user_rating The gap status from the last evaluation
     * @return $this
     */
    public function setUserRating($user_rating)
    {
        $this->container['user_rating'] = $user_rating;

        return $this;
    }

    /**
     * Gets user_id
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     * @param int $user_id ID of the user
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets user_rating_name
     * @return string
     */
    public function getUserRatingName()
    {
        return $this->container['user_rating_name'];
    }

    /**
     * Sets user_rating_name
     * @param string $user_rating_name The gap status name from the last evaluation
     * @return $this
     */
    public function setUserRatingName($user_rating_name)
    {
        $this->container['user_rating_name'] = $user_rating_name;

        return $this;
    }

    /**
     * Gets user_role_days
     * @return int
     */
    public function getUserRoleDays()
    {
        return $this->container['user_role_days'];
    }

    /**
     * Sets user_role_days
     * @param int $user_role_days Number of the days in role
     * @return $this
     */
    public function setUserRoleDays($user_role_days)
    {
        $this->container['user_role_days'] = $user_role_days;

        return $this;
    }

    /**
     * Gets last_name
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     * @param string $last_name The last name of the user
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets avatar
     * @return string
     */
    public function getAvatar()
    {
        return $this->container['avatar'];
    }

    /**
     * Sets avatar
     * @param string $avatar The user profile picture.
     * @return $this
     */
    public function setAvatar($avatar)
    {
        $this->container['avatar'] = $avatar;

        return $this;
    }

    /**
     * Gets first_name
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     * @param string $first_name The first  name of the user
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets user_email
     * @return string
     */
    public function getUserEmail()
    {
        return $this->container['user_email'];
    }

    /**
     * Sets user_email
     * @param string $user_email The user email
     * @return $this
     */
    public function setUserEmail($user_email)
    {
        $this->container['user_email'] = $user_email;

        return $this;
    }

    /**
     * Gets role_id
     * @return int
     */
    public function getRoleId()
    {
        return $this->container['role_id'];
    }

    /**
     * Sets role_id
     * @param int $role_id The role ID of the user
     * @return $this
     */
    public function setRoleId($role_id)
    {
        $this->container['role_id'] = $role_id;

        return $this;
    }

    /**
     * Gets role_name
     * @return string
     */
    public function getRoleName()
    {
        return $this->container['role_name'];
    }

    /**
     * Sets role_name
     * @param string $role_name Translated role name of the user
     * @return $this
     */
    public function setRoleName($role_name)
    {
        $this->container['role_name'] = $role_name;

        return $this;
    }

    /**
     * Gets login_name
     * @return string
     */
    public function getLoginName()
    {
        return $this->container['login_name'];
    }

    /**
     * Sets login_name
     * @param string $login_name The user name in the system
     * @return $this
     */
    public function setLoginName($login_name)
    {
        $this->container['login_name'] = $login_name;

        return $this;
    }

    /**
     * Gets username
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     * @param string $username The full name of the user
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


