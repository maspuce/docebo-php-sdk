<?php
/**
 * ManageUserCreateSchema
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ManageUserCreateSchema Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ManageUserCreateSchema implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ManageUserCreateSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'manager' => 'int',
        'timezone' => 'string',
        'password' => 'string',
        'lastname' => 'string',
        'privacy' => 'string',
        'expiration' => '\DateTime',
        'language' => 'string',
        'select_orgchart' => '\Swagger\Client\Model\ManageUserCreateSelectOrgchart[]',
        'date_format' => 'string',
        'valid' => 'int',
        'email_status' => 'int',
        'email' => 'string',
        'employees' => '\Swagger\Client\Model\ManageUserCreateEmployees[]',
        'level' => 'int',
        'userid' => 'string',
        'role' => 'int',
        'firstname' => 'string',
        'force_change' => 'int',
        'additional_fields' => '\Swagger\Client\Model\ManageUserCreateAdditionalFields[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'manager' => 'manager',
        'timezone' => 'timezone',
        'password' => 'password',
        'lastname' => 'lastname',
        'privacy' => 'privacy',
        'expiration' => 'expiration',
        'language' => 'language',
        'select_orgchart' => 'select_orgchart',
        'date_format' => 'date_format',
        'valid' => 'valid',
        'email_status' => 'email_status',
        'email' => 'email',
        'employees' => 'employees',
        'level' => 'level',
        'userid' => 'userid',
        'role' => 'role',
        'firstname' => 'firstname',
        'force_change' => 'force_change',
        'additional_fields' => 'additional_fields'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'manager' => 'setManager',
        'timezone' => 'setTimezone',
        'password' => 'setPassword',
        'lastname' => 'setLastname',
        'privacy' => 'setPrivacy',
        'expiration' => 'setExpiration',
        'language' => 'setLanguage',
        'select_orgchart' => 'setSelectOrgchart',
        'date_format' => 'setDateFormat',
        'valid' => 'setValid',
        'email_status' => 'setEmailStatus',
        'email' => 'setEmail',
        'employees' => 'setEmployees',
        'level' => 'setLevel',
        'userid' => 'setUserid',
        'role' => 'setRole',
        'firstname' => 'setFirstname',
        'force_change' => 'setForceChange',
        'additional_fields' => 'setAdditionalFields'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'manager' => 'getManager',
        'timezone' => 'getTimezone',
        'password' => 'getPassword',
        'lastname' => 'getLastname',
        'privacy' => 'getPrivacy',
        'expiration' => 'getExpiration',
        'language' => 'getLanguage',
        'select_orgchart' => 'getSelectOrgchart',
        'date_format' => 'getDateFormat',
        'valid' => 'getValid',
        'email_status' => 'getEmailStatus',
        'email' => 'getEmail',
        'employees' => 'getEmployees',
        'level' => 'getLevel',
        'userid' => 'getUserid',
        'role' => 'getRole',
        'firstname' => 'getFirstname',
        'force_change' => 'getForceChange',
        'additional_fields' => 'getAdditionalFields'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['manager'] = isset($data['manager']) ? $data['manager'] : null;
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['lastname'] = isset($data['lastname']) ? $data['lastname'] : null;
        $this->container['privacy'] = isset($data['privacy']) ? $data['privacy'] : null;
        $this->container['expiration'] = isset($data['expiration']) ? $data['expiration'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['select_orgchart'] = isset($data['select_orgchart']) ? $data['select_orgchart'] : null;
        $this->container['date_format'] = isset($data['date_format']) ? $data['date_format'] : null;
        $this->container['valid'] = isset($data['valid']) ? $data['valid'] : null;
        $this->container['email_status'] = isset($data['email_status']) ? $data['email_status'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['employees'] = isset($data['employees']) ? $data['employees'] : null;
        $this->container['level'] = isset($data['level']) ? $data['level'] : null;
        $this->container['userid'] = isset($data['userid']) ? $data['userid'] : null;
        $this->container['role'] = isset($data['role']) ? $data['role'] : null;
        $this->container['firstname'] = isset($data['firstname']) ? $data['firstname'] : null;
        $this->container['force_change'] = isset($data['force_change']) ? $data['force_change'] : null;
        $this->container['additional_fields'] = isset($data['additional_fields']) ? $data['additional_fields'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['password'] === null) {
            $invalid_properties[] = "'password' can't be null";
        }
        if ($this->container['userid'] === null) {
            $invalid_properties[] = "'userid' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['password'] === null) {
            return false;
        }
        if ($this->container['userid'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets manager
     * @return int
     */
    public function getManager()
    {
        return $this->container['manager'];
    }

    /**
     * Sets manager
     * @param int $manager The ID of the manager of the user
     * @return $this
     */
    public function setManager($manager)
    {
        $this->container['manager'] = $manager;

        return $this;
    }

    /**
     * Gets timezone
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     * @param string $timezone Timezone
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets password
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     * @param string $password 
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets lastname
     * @return string
     */
    public function getLastname()
    {
        return $this->container['lastname'];
    }

    /**
     * Sets lastname
     * @param string $lastname Required ONLY if checked &quot;First Name and Last Name are required in order to register&quot; in &quot;Advanced Settings&quot;
     * @return $this
     */
    public function setLastname($lastname)
    {
        $this->container['lastname'] = $lastname;

        return $this;
    }

    /**
     * Gets privacy
     * @return string
     */
    public function getPrivacy()
    {
        return $this->container['privacy'];
    }

    /**
     * Sets privacy
     * @param string $privacy Required ONLY if checked &quot;Privacy policy MUST be accepted&quot; in &quot;Advanced Settings&quot;
     * @return $this
     */
    public function setPrivacy($privacy)
    {
        $this->container['privacy'] = $privacy;

        return $this;
    }

    /**
     * Gets expiration
     * @return \DateTime
     */
    public function getExpiration()
    {
        return $this->container['expiration'];
    }

    /**
     * Sets expiration
     * @param \DateTime $expiration Expiration date
     * @return $this
     */
    public function setExpiration($expiration)
    {
        $this->container['expiration'] = $expiration;

        return $this;
    }

    /**
     * Gets language
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     * @param string $language Selected language (browser code)
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets select_orgchart
     * @return \Swagger\Client\Model\ManageUserCreateSelectOrgchart[]
     */
    public function getSelectOrgchart()
    {
        return $this->container['select_orgchart'];
    }

    /**
     * Sets select_orgchart
     * @param \Swagger\Client\Model\ManageUserCreateSelectOrgchart[] $select_orgchart Array of branch Ids with the selected state
     * @return $this
     */
    public function setSelectOrgchart($select_orgchart)
    {
        $this->container['select_orgchart'] = $select_orgchart;

        return $this;
    }

    /**
     * Gets date_format
     * @return string
     */
    public function getDateFormat()
    {
        return $this->container['date_format'];
    }

    /**
     * Sets date_format
     * @param string $date_format Date format - en, it, bg ...
     * @return $this
     */
    public function setDateFormat($date_format)
    {
        $this->container['date_format'] = $date_format;

        return $this;
    }

    /**
     * Gets valid
     * @return int
     */
    public function getValid()
    {
        return $this->container['valid'];
    }

    /**
     * Sets valid
     * @param int $valid Is user active. Options: 0 - not active, 1 - active. Default: 1 (active)
     * @return $this
     */
    public function setValid($valid)
    {
        $this->container['valid'] = $valid;

        return $this;
    }

    /**
     * Gets email_status
     * @return int
     */
    public function getEmailStatus()
    {
        return $this->container['email_status'];
    }

    /**
     * Sets email_status
     * @param int $email_status Email status - 0-unverified, 1-verified
     * @return $this
     */
    public function setEmailStatus($email_status)
    {
        $this->container['email_status'] = $email_status;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email User's email. If the user calling the API is a super admin, the email is optional. In all other cases it's required.
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets employees
     * @return \Swagger\Client\Model\ManageUserCreateEmployees[]
     */
    public function getEmployees()
    {
        return $this->container['employees'];
    }

    /**
     * Sets employees
     * @param \Swagger\Client\Model\ManageUserCreateEmployees[] $employees Array of employees IDs
     * @return $this
     */
    public function setEmployees($employees)
    {
        $this->container['employees'] = $employees;

        return $this;
    }

    /**
     * Gets level
     * @return int
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     * @param int $level User level
     * @return $this
     */
    public function setLevel($level)
    {
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets userid
     * @return string
     */
    public function getUserid()
    {
        return $this->container['userid'];
    }

    /**
     * Sets userid
     * @param string $userid the Username to register
     * @return $this
     */
    public function setUserid($userid)
    {
        $this->container['userid'] = $userid;

        return $this;
    }

    /**
     * Gets role
     * @return int
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     * @param int $role The company user role ID
     * @return $this
     */
    public function setRole($role)
    {
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets firstname
     * @return string
     */
    public function getFirstname()
    {
        return $this->container['firstname'];
    }

    /**
     * Sets firstname
     * @param string $firstname Required ONLY if checked &quot;First Name and Last Name are required in order to register&quot; in &quot;Advanced Settings&quot;
     * @return $this
     */
    public function setFirstname($firstname)
    {
        $this->container['firstname'] = $firstname;

        return $this;
    }

    /**
     * Gets force_change
     * @return int
     */
    public function getForceChange()
    {
        return $this->container['force_change'];
    }

    /**
     * Sets force_change
     * @param int $force_change Force change password (0 or 1)
     * @return $this
     */
    public function setForceChange($force_change)
    {
        $this->container['force_change'] = $force_change;

        return $this;
    }

    /**
     * Gets additional_fields
     * @return \Swagger\Client\Model\ManageUserCreateAdditionalFields[]
     */
    public function getAdditionalFields()
    {
        return $this->container['additional_fields'];
    }

    /**
     * Sets additional_fields
     * @param \Swagger\Client\Model\ManageUserCreateAdditionalFields[] $additional_fields [array, required] Success or failure
     * @return $this
     */
    public function setAdditionalFields($additional_fields)
    {
        $this->container['additional_fields'] = $additional_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


