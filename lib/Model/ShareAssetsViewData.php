<?php
/**
 * ShareAssetsViewData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ShareAssetsViewData Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ShareAssetsViewData implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ShareAssetsViewData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'thumbnail' => '\Swagger\Client\Model\ShareAssetsViewThumbnail',
        'title' => 'string',
        'date_created' => 'string',
        'expert_reviews' => 'null[]',
        'kind' => '\Swagger\Client\Model\ShareAssetsViewKind',
        'tags' => '\Swagger\Client\Model\ShareAssetsViewTags',
        'id' => 'int',
        'owner' => '\Swagger\Client\Model\ShareAssetsViewOwner',
        'playlist' => '\Swagger\Client\Model\ShareAssetsViewPlaylist',
        'channels' => '\Swagger\Client\Model\ShareAssetsViewChannels',
        'player' => '\Swagger\Client\Model\ShareAssetsViewPlayer',
        'info' => '\Swagger\Client\Model\ShareAssetsViewInfo',
        'description' => 'string',
        'rating' => '\Swagger\Client\Model\ShareAssetsViewRating'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'thumbnail' => 'thumbnail',
        'title' => 'title',
        'date_created' => 'date_created',
        'expert_reviews' => 'expert_reviews',
        'kind' => 'kind',
        'tags' => 'tags',
        'id' => 'id',
        'owner' => 'owner',
        'playlist' => 'playlist',
        'channels' => 'channels',
        'player' => 'player',
        'info' => 'info',
        'description' => 'description',
        'rating' => 'rating'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'thumbnail' => 'setThumbnail',
        'title' => 'setTitle',
        'date_created' => 'setDateCreated',
        'expert_reviews' => 'setExpertReviews',
        'kind' => 'setKind',
        'tags' => 'setTags',
        'id' => 'setId',
        'owner' => 'setOwner',
        'playlist' => 'setPlaylist',
        'channels' => 'setChannels',
        'player' => 'setPlayer',
        'info' => 'setInfo',
        'description' => 'setDescription',
        'rating' => 'setRating'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'thumbnail' => 'getThumbnail',
        'title' => 'getTitle',
        'date_created' => 'getDateCreated',
        'expert_reviews' => 'getExpertReviews',
        'kind' => 'getKind',
        'tags' => 'getTags',
        'id' => 'getId',
        'owner' => 'getOwner',
        'playlist' => 'getPlaylist',
        'channels' => 'getChannels',
        'player' => 'getPlayer',
        'info' => 'getInfo',
        'description' => 'getDescription',
        'rating' => 'getRating'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['thumbnail'] = isset($data['thumbnail']) ? $data['thumbnail'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
        $this->container['expert_reviews'] = isset($data['expert_reviews']) ? $data['expert_reviews'] : null;
        $this->container['kind'] = isset($data['kind']) ? $data['kind'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['playlist'] = isset($data['playlist']) ? $data['playlist'] : null;
        $this->container['channels'] = isset($data['channels']) ? $data['channels'] : null;
        $this->container['player'] = isset($data['player']) ? $data['player'] : null;
        $this->container['info'] = isset($data['info']) ? $data['info'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['rating'] = isset($data['rating']) ? $data['rating'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['thumbnail'] === null) {
            $invalid_properties[] = "'thumbnail' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalid_properties[] = "'title' can't be null";
        }
        if ($this->container['date_created'] === null) {
            $invalid_properties[] = "'date_created' can't be null";
        }
        if ($this->container['expert_reviews'] === null) {
            $invalid_properties[] = "'expert_reviews' can't be null";
        }
        if ($this->container['kind'] === null) {
            $invalid_properties[] = "'kind' can't be null";
        }
        if ($this->container['tags'] === null) {
            $invalid_properties[] = "'tags' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['owner'] === null) {
            $invalid_properties[] = "'owner' can't be null";
        }
        if ($this->container['playlist'] === null) {
            $invalid_properties[] = "'playlist' can't be null";
        }
        if ($this->container['channels'] === null) {
            $invalid_properties[] = "'channels' can't be null";
        }
        if ($this->container['player'] === null) {
            $invalid_properties[] = "'player' can't be null";
        }
        if ($this->container['info'] === null) {
            $invalid_properties[] = "'info' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalid_properties[] = "'description' can't be null";
        }
        if ($this->container['rating'] === null) {
            $invalid_properties[] = "'rating' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['thumbnail'] === null) {
            return false;
        }
        if ($this->container['title'] === null) {
            return false;
        }
        if ($this->container['date_created'] === null) {
            return false;
        }
        if ($this->container['expert_reviews'] === null) {
            return false;
        }
        if ($this->container['kind'] === null) {
            return false;
        }
        if ($this->container['tags'] === null) {
            return false;
        }
        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['owner'] === null) {
            return false;
        }
        if ($this->container['playlist'] === null) {
            return false;
        }
        if ($this->container['channels'] === null) {
            return false;
        }
        if ($this->container['player'] === null) {
            return false;
        }
        if ($this->container['info'] === null) {
            return false;
        }
        if ($this->container['description'] === null) {
            return false;
        }
        if ($this->container['rating'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets thumbnail
     * @return \Swagger\Client\Model\ShareAssetsViewThumbnail
     */
    public function getThumbnail()
    {
        return $this->container['thumbnail'];
    }

    /**
     * Sets thumbnail
     * @param \Swagger\Client\Model\ShareAssetsViewThumbnail $thumbnail Return thumbnail of asset object
     * @return $this
     */
    public function setThumbnail($thumbnail)
    {
        $this->container['thumbnail'] = $thumbnail;

        return $this;
    }

    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     * @param string $title Asset title
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets date_created
     * @return string
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     * @param string $date_created Asset date of creation
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets expert_reviews
     * @return null[]
     */
    public function getExpertReviews()
    {
        return $this->container['expert_reviews'];
    }

    /**
     * Sets expert_reviews
     * @param null[] $expert_reviews Array of asset expert reviews
     * @return $this
     */
    public function setExpertReviews($expert_reviews)
    {
        $this->container['expert_reviews'] = $expert_reviews;

        return $this;
    }

    /**
     * Gets kind
     * @return \Swagger\Client\Model\ShareAssetsViewKind
     */
    public function getKind()
    {
        return $this->container['kind'];
    }

    /**
     * Sets kind
     * @param \Swagger\Client\Model\ShareAssetsViewKind $kind Return type of asset object
     * @return $this
     */
    public function setKind($kind)
    {
        $this->container['kind'] = $kind;

        return $this;
    }

    /**
     * Gets tags
     * @return \Swagger\Client\Model\ShareAssetsViewTags
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     * @param \Swagger\Client\Model\ShareAssetsViewTags $tags Array of asset playlists
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id ID of the asset
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets owner
     * @return \Swagger\Client\Model\ShareAssetsViewOwner
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     * @param \Swagger\Client\Model\ShareAssetsViewOwner $owner Return owner of asset object
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets playlist
     * @return \Swagger\Client\Model\ShareAssetsViewPlaylist
     */
    public function getPlaylist()
    {
        return $this->container['playlist'];
    }

    /**
     * Sets playlist
     * @param \Swagger\Client\Model\ShareAssetsViewPlaylist $playlist Return asset playlist
     * @return $this
     */
    public function setPlaylist($playlist)
    {
        $this->container['playlist'] = $playlist;

        return $this;
    }

    /**
     * Gets channels
     * @return \Swagger\Client\Model\ShareAssetsViewChannels
     */
    public function getChannels()
    {
        return $this->container['channels'];
    }

    /**
     * Sets channels
     * @param \Swagger\Client\Model\ShareAssetsViewChannels $channels Array of asset channels
     * @return $this
     */
    public function setChannels($channels)
    {
        $this->container['channels'] = $channels;

        return $this;
    }

    /**
     * Gets player
     * @return \Swagger\Client\Model\ShareAssetsViewPlayer
     */
    public function getPlayer()
    {
        return $this->container['player'];
    }

    /**
     * Sets player
     * @param \Swagger\Client\Model\ShareAssetsViewPlayer $player Array of asset player
     * @return $this
     */
    public function setPlayer($player)
    {
        $this->container['player'] = $player;

        return $this;
    }

    /**
     * Gets info
     * @return \Swagger\Client\Model\ShareAssetsViewInfo
     */
    public function getInfo()
    {
        return $this->container['info'];
    }

    /**
     * Sets info
     * @param \Swagger\Client\Model\ShareAssetsViewInfo $info Return asset information object
     * @return $this
     */
    public function setInfo($info)
    {
        $this->container['info'] = $info;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description Asset description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets rating
     * @return \Swagger\Client\Model\ShareAssetsViewRating
     */
    public function getRating()
    {
        return $this->container['rating'];
    }

    /**
     * Sets rating
     * @param \Swagger\Client\Model\ShareAssetsViewRating $rating Array of asset rating
     * @return $this
     */
    public function setRating($rating)
    {
        $this->container['rating'] = $rating;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


