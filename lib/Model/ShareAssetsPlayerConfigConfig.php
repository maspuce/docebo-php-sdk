<?php
/**
 * ShareAssetsPlayerConfigConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ShareAssetsPlayerConfigConfig Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ShareAssetsPlayerConfigConfig implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ShareAssetsPlayerConfigConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'total_pages' => 'int',
        'spent_time' => '\Swagger\Client\Model\ShareAssetsPlayerConfigSpentTime',
        'embed' => 'bool',
        'brand' => 'bool',
        'autoplay' => 'bool',
        'splash' => 'bool',
        'key' => 'string',
        'fullscreen' => 'bool',
        'keyboard' => 'bool',
        'bookmark' => 'int',
        'tracking' => '\Swagger\Client\Model\ShareAssetsPlayerConfigTracking',
        'tooltips' => '\Swagger\Client\Model\ShareAssetsPlayerConfigTooltips',
        'wmode' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'total_pages' => 'total_pages',
        'spent_time' => 'spent_time',
        'embed' => 'embed',
        'brand' => 'brand',
        'autoplay' => 'autoplay',
        'splash' => 'splash',
        'key' => 'key',
        'fullscreen' => 'fullscreen',
        'keyboard' => 'keyboard',
        'bookmark' => 'bookmark',
        'tracking' => 'tracking',
        'tooltips' => 'tooltips',
        'wmode' => 'wmode'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'total_pages' => 'setTotalPages',
        'spent_time' => 'setSpentTime',
        'embed' => 'setEmbed',
        'brand' => 'setBrand',
        'autoplay' => 'setAutoplay',
        'splash' => 'setSplash',
        'key' => 'setKey',
        'fullscreen' => 'setFullscreen',
        'keyboard' => 'setKeyboard',
        'bookmark' => 'setBookmark',
        'tracking' => 'setTracking',
        'tooltips' => 'setTooltips',
        'wmode' => 'setWmode'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'total_pages' => 'getTotalPages',
        'spent_time' => 'getSpentTime',
        'embed' => 'getEmbed',
        'brand' => 'getBrand',
        'autoplay' => 'getAutoplay',
        'splash' => 'getSplash',
        'key' => 'getKey',
        'fullscreen' => 'getFullscreen',
        'keyboard' => 'getKeyboard',
        'bookmark' => 'getBookmark',
        'tracking' => 'getTracking',
        'tooltips' => 'getTooltips',
        'wmode' => 'getWmode'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['total_pages'] = isset($data['total_pages']) ? $data['total_pages'] : null;
        $this->container['spent_time'] = isset($data['spent_time']) ? $data['spent_time'] : null;
        $this->container['embed'] = isset($data['embed']) ? $data['embed'] : null;
        $this->container['brand'] = isset($data['brand']) ? $data['brand'] : null;
        $this->container['autoplay'] = isset($data['autoplay']) ? $data['autoplay'] : null;
        $this->container['splash'] = isset($data['splash']) ? $data['splash'] : null;
        $this->container['key'] = isset($data['key']) ? $data['key'] : null;
        $this->container['fullscreen'] = isset($data['fullscreen']) ? $data['fullscreen'] : null;
        $this->container['keyboard'] = isset($data['keyboard']) ? $data['keyboard'] : null;
        $this->container['bookmark'] = isset($data['bookmark']) ? $data['bookmark'] : null;
        $this->container['tracking'] = isset($data['tracking']) ? $data['tracking'] : null;
        $this->container['tooltips'] = isset($data['tooltips']) ? $data['tooltips'] : null;
        $this->container['wmode'] = isset($data['wmode']) ? $data['wmode'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['total_pages'] === null) {
            $invalid_properties[] = "'total_pages' can't be null";
        }
        if ($this->container['spent_time'] === null) {
            $invalid_properties[] = "'spent_time' can't be null";
        }
        if ($this->container['tracking'] === null) {
            $invalid_properties[] = "'tracking' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['total_pages'] === null) {
            return false;
        }
        if ($this->container['spent_time'] === null) {
            return false;
        }
        if ($this->container['tracking'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets total_pages
     * @return int
     */
    public function getTotalPages()
    {
        return $this->container['total_pages'];
    }

    /**
     * Sets total_pages
     * @param int $total_pages Player total pages
     * @return $this
     */
    public function setTotalPages($total_pages)
    {
        $this->container['total_pages'] = $total_pages;

        return $this;
    }

    /**
     * Gets spent_time
     * @return \Swagger\Client\Model\ShareAssetsPlayerConfigSpentTime
     */
    public function getSpentTime()
    {
        return $this->container['spent_time'];
    }

    /**
     * Sets spent_time
     * @param \Swagger\Client\Model\ShareAssetsPlayerConfigSpentTime $spent_time Player spend time
     * @return $this
     */
    public function setSpentTime($spent_time)
    {
        $this->container['spent_time'] = $spent_time;

        return $this;
    }

    /**
     * Gets embed
     * @return bool
     */
    public function getEmbed()
    {
        return $this->container['embed'];
    }

    /**
     * Sets embed
     * @param bool $embed Player embed
     * @return $this
     */
    public function setEmbed($embed)
    {
        $this->container['embed'] = $embed;

        return $this;
    }

    /**
     * Gets brand
     * @return bool
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     * @param bool $brand Player brand
     * @return $this
     */
    public function setBrand($brand)
    {
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets autoplay
     * @return bool
     */
    public function getAutoplay()
    {
        return $this->container['autoplay'];
    }

    /**
     * Sets autoplay
     * @param bool $autoplay Player autoplay
     * @return $this
     */
    public function setAutoplay($autoplay)
    {
        $this->container['autoplay'] = $autoplay;

        return $this;
    }

    /**
     * Gets splash
     * @return bool
     */
    public function getSplash()
    {
        return $this->container['splash'];
    }

    /**
     * Sets splash
     * @param bool $splash Player splash
     * @return $this
     */
    public function setSplash($splash)
    {
        $this->container['splash'] = $splash;

        return $this;
    }

    /**
     * Gets key
     * @return string
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     * @param string $key Player key
     * @return $this
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets fullscreen
     * @return bool
     */
    public function getFullscreen()
    {
        return $this->container['fullscreen'];
    }

    /**
     * Sets fullscreen
     * @param bool $fullscreen Player fullscreen
     * @return $this
     */
    public function setFullscreen($fullscreen)
    {
        $this->container['fullscreen'] = $fullscreen;

        return $this;
    }

    /**
     * Gets keyboard
     * @return bool
     */
    public function getKeyboard()
    {
        return $this->container['keyboard'];
    }

    /**
     * Sets keyboard
     * @param bool $keyboard Player keyboard
     * @return $this
     */
    public function setKeyboard($keyboard)
    {
        $this->container['keyboard'] = $keyboard;

        return $this;
    }

    /**
     * Gets bookmark
     * @return int
     */
    public function getBookmark()
    {
        return $this->container['bookmark'];
    }

    /**
     * Sets bookmark
     * @param int $bookmark Player bookmark
     * @return $this
     */
    public function setBookmark($bookmark)
    {
        $this->container['bookmark'] = $bookmark;

        return $this;
    }

    /**
     * Gets tracking
     * @return \Swagger\Client\Model\ShareAssetsPlayerConfigTracking
     */
    public function getTracking()
    {
        return $this->container['tracking'];
    }

    /**
     * Sets tracking
     * @param \Swagger\Client\Model\ShareAssetsPlayerConfigTracking $tracking Player tracking
     * @return $this
     */
    public function setTracking($tracking)
    {
        $this->container['tracking'] = $tracking;

        return $this;
    }

    /**
     * Gets tooltips
     * @return \Swagger\Client\Model\ShareAssetsPlayerConfigTooltips
     */
    public function getTooltips()
    {
        return $this->container['tooltips'];
    }

    /**
     * Sets tooltips
     * @param \Swagger\Client\Model\ShareAssetsPlayerConfigTooltips $tooltips Player tooltips
     * @return $this
     */
    public function setTooltips($tooltips)
    {
        $this->container['tooltips'] = $tooltips;

        return $this;
    }

    /**
     * Gets wmode
     * @return string
     */
    public function getWmode()
    {
        return $this->container['wmode'];
    }

    /**
     * Sets wmode
     * @param string $wmode Player wmode
     * @return $this
     */
    public function setWmode($wmode)
    {
        $this->container['wmode'] = $wmode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


