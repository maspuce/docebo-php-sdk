<?php
/**
 * ManageUserListTransactionsItems
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ManageUserListTransactionsItems Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ManageUserListTransactionsItems implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ManageUserListTransactionsItems';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id_trans' => 'int',
        'discount' => 'int',
        'payment_currency' => 'string',
        'total_paid' => 'int',
        'date_creation' => 'string',
        'id_user' => 'int',
        'subtotal' => 'int',
        'date_activated' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id_trans' => 'id_trans',
        'discount' => 'discount',
        'payment_currency' => 'payment_currency',
        'total_paid' => 'total_paid',
        'date_creation' => 'date_creation',
        'id_user' => 'id_user',
        'subtotal' => 'subtotal',
        'date_activated' => 'date_activated'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id_trans' => 'setIdTrans',
        'discount' => 'setDiscount',
        'payment_currency' => 'setPaymentCurrency',
        'total_paid' => 'setTotalPaid',
        'date_creation' => 'setDateCreation',
        'id_user' => 'setIdUser',
        'subtotal' => 'setSubtotal',
        'date_activated' => 'setDateActivated'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id_trans' => 'getIdTrans',
        'discount' => 'getDiscount',
        'payment_currency' => 'getPaymentCurrency',
        'total_paid' => 'getTotalPaid',
        'date_creation' => 'getDateCreation',
        'id_user' => 'getIdUser',
        'subtotal' => 'getSubtotal',
        'date_activated' => 'getDateActivated'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id_trans'] = isset($data['id_trans']) ? $data['id_trans'] : null;
        $this->container['discount'] = isset($data['discount']) ? $data['discount'] : null;
        $this->container['payment_currency'] = isset($data['payment_currency']) ? $data['payment_currency'] : null;
        $this->container['total_paid'] = isset($data['total_paid']) ? $data['total_paid'] : null;
        $this->container['date_creation'] = isset($data['date_creation']) ? $data['date_creation'] : null;
        $this->container['id_user'] = isset($data['id_user']) ? $data['id_user'] : null;
        $this->container['subtotal'] = isset($data['subtotal']) ? $data['subtotal'] : null;
        $this->container['date_activated'] = isset($data['date_activated']) ? $data['date_activated'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['id_trans'] === null) {
            $invalid_properties[] = "'id_trans' can't be null";
        }
        if ($this->container['discount'] === null) {
            $invalid_properties[] = "'discount' can't be null";
        }
        if ($this->container['payment_currency'] === null) {
            $invalid_properties[] = "'payment_currency' can't be null";
        }
        if ($this->container['total_paid'] === null) {
            $invalid_properties[] = "'total_paid' can't be null";
        }
        if ($this->container['date_creation'] === null) {
            $invalid_properties[] = "'date_creation' can't be null";
        }
        if ($this->container['id_user'] === null) {
            $invalid_properties[] = "'id_user' can't be null";
        }
        if ($this->container['subtotal'] === null) {
            $invalid_properties[] = "'subtotal' can't be null";
        }
        if ($this->container['date_activated'] === null) {
            $invalid_properties[] = "'date_activated' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id_trans'] === null) {
            return false;
        }
        if ($this->container['discount'] === null) {
            return false;
        }
        if ($this->container['payment_currency'] === null) {
            return false;
        }
        if ($this->container['total_paid'] === null) {
            return false;
        }
        if ($this->container['date_creation'] === null) {
            return false;
        }
        if ($this->container['id_user'] === null) {
            return false;
        }
        if ($this->container['subtotal'] === null) {
            return false;
        }
        if ($this->container['date_activated'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id_trans
     * @return int
     */
    public function getIdTrans()
    {
        return $this->container['id_trans'];
    }

    /**
     * Sets id_trans
     * @param int $id_trans ID of the transaction
     * @return $this
     */
    public function setIdTrans($id_trans)
    {
        $this->container['id_trans'] = $id_trans;

        return $this;
    }

    /**
     * Gets discount
     * @return int
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     * @param int $discount Transaction discount
     * @return $this
     */
    public function setDiscount($discount)
    {
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets payment_currency
     * @return string
     */
    public function getPaymentCurrency()
    {
        return $this->container['payment_currency'];
    }

    /**
     * Sets payment_currency
     * @param string $payment_currency Transaction payment currency
     * @return $this
     */
    public function setPaymentCurrency($payment_currency)
    {
        $this->container['payment_currency'] = $payment_currency;

        return $this;
    }

    /**
     * Gets total_paid
     * @return int
     */
    public function getTotalPaid()
    {
        return $this->container['total_paid'];
    }

    /**
     * Sets total_paid
     * @param int $total_paid Transaction total paid value
     * @return $this
     */
    public function setTotalPaid($total_paid)
    {
        $this->container['total_paid'] = $total_paid;

        return $this;
    }

    /**
     * Gets date_creation
     * @return string
     */
    public function getDateCreation()
    {
        return $this->container['date_creation'];
    }

    /**
     * Sets date_creation
     * @param string $date_creation Date of creation of the transaction
     * @return $this
     */
    public function setDateCreation($date_creation)
    {
        $this->container['date_creation'] = $date_creation;

        return $this;
    }

    /**
     * Gets id_user
     * @return int
     */
    public function getIdUser()
    {
        return $this->container['id_user'];
    }

    /**
     * Sets id_user
     * @param int $id_user ID of the user for this transaction
     * @return $this
     */
    public function setIdUser($id_user)
    {
        $this->container['id_user'] = $id_user;

        return $this;
    }

    /**
     * Gets subtotal
     * @return int
     */
    public function getSubtotal()
    {
        return $this->container['subtotal'];
    }

    /**
     * Sets subtotal
     * @param int $subtotal Transaction subtotal
     * @return $this
     */
    public function setSubtotal($subtotal)
    {
        $this->container['subtotal'] = $subtotal;

        return $this;
    }

    /**
     * Gets date_activated
     * @return string
     */
    public function getDateActivated()
    {
        return $this->container['date_activated'];
    }

    /**
     * Sets date_activated
     * @param string $date_activated Date of activation of the transaction
     * @return $this
     */
    public function setDateActivated($date_activated)
    {
        $this->container['date_activated'] = $date_activated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


