<?php
/**
 * LearnEnrollmentViewRecords
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * LearnEnrollmentViewRecords Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class LearnEnrollmentViewRecords implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'LearnEnrollmentViewRecords';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'lang_code' => 'string',
        'type' => 'int',
        'id' => 'int',
        'score' => 'int',
        'course_complete_date' => '\DateTime',
        'course_code' => 'string',
        'enrollment_fields' => '\Swagger\Client\Model\LearnEnrollmentViewEnrollmentFields[]',
        'status' => 'int',
        'enroll_begin_date' => '\DateTime',
        'name' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'lang_code' => 'lang_code',
        'type' => 'type',
        'id' => 'id',
        'score' => 'score',
        'course_complete_date' => 'course_complete_date',
        'course_code' => 'course_code',
        'enrollment_fields' => 'enrollment_fields',
        'status' => 'status',
        'enroll_begin_date' => 'enroll_begin_date',
        'name' => 'name'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'lang_code' => 'setLangCode',
        'type' => 'setType',
        'id' => 'setId',
        'score' => 'setScore',
        'course_complete_date' => 'setCourseCompleteDate',
        'course_code' => 'setCourseCode',
        'enrollment_fields' => 'setEnrollmentFields',
        'status' => 'setStatus',
        'enroll_begin_date' => 'setEnrollBeginDate',
        'name' => 'setName'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'lang_code' => 'getLangCode',
        'type' => 'getType',
        'id' => 'getId',
        'score' => 'getScore',
        'course_complete_date' => 'getCourseCompleteDate',
        'course_code' => 'getCourseCode',
        'enrollment_fields' => 'getEnrollmentFields',
        'status' => 'getStatus',
        'enroll_begin_date' => 'getEnrollBeginDate',
        'name' => 'getName'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['lang_code'] = isset($data['lang_code']) ? $data['lang_code'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['score'] = isset($data['score']) ? $data['score'] : null;
        $this->container['course_complete_date'] = isset($data['course_complete_date']) ? $data['course_complete_date'] : null;
        $this->container['course_code'] = isset($data['course_code']) ? $data['course_code'] : null;
        $this->container['enrollment_fields'] = isset($data['enrollment_fields']) ? $data['enrollment_fields'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['enroll_begin_date'] = isset($data['enroll_begin_date']) ? $data['enroll_begin_date'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['lang_code'] === null) {
            $invalid_properties[] = "'lang_code' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['score'] === null) {
            $invalid_properties[] = "'score' can't be null";
        }
        if ($this->container['course_complete_date'] === null) {
            $invalid_properties[] = "'course_complete_date' can't be null";
        }
        if ($this->container['course_code'] === null) {
            $invalid_properties[] = "'course_code' can't be null";
        }
        if ($this->container['enrollment_fields'] === null) {
            $invalid_properties[] = "'enrollment_fields' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalid_properties[] = "'status' can't be null";
        }
        if ($this->container['enroll_begin_date'] === null) {
            $invalid_properties[] = "'enroll_begin_date' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['lang_code'] === null) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['score'] === null) {
            return false;
        }
        if ($this->container['course_complete_date'] === null) {
            return false;
        }
        if ($this->container['course_code'] === null) {
            return false;
        }
        if ($this->container['enrollment_fields'] === null) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        if ($this->container['enroll_begin_date'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets lang_code
     * @return string
     */
    public function getLangCode()
    {
        return $this->container['lang_code'];
    }

    /**
     * Sets lang_code
     * @param string $lang_code Language code
     * @return $this
     */
    public function setLangCode($lang_code)
    {
        $this->container['lang_code'] = $lang_code;

        return $this;
    }

    /**
     * Gets type
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param int $type Type of course
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Course ID
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets score
     * @return int
     */
    public function getScore()
    {
        return $this->container['score'];
    }

    /**
     * Sets score
     * @param int $score Score of user
     * @return $this
     */
    public function setScore($score)
    {
        $this->container['score'] = $score;

        return $this;
    }

    /**
     * Gets course_complete_date
     * @return \DateTime
     */
    public function getCourseCompleteDate()
    {
        return $this->container['course_complete_date'];
    }

    /**
     * Sets course_complete_date
     * @param \DateTime $course_complete_date Date when user complete this course
     * @return $this
     */
    public function setCourseCompleteDate($course_complete_date)
    {
        $this->container['course_complete_date'] = $course_complete_date;

        return $this;
    }

    /**
     * Gets course_code
     * @return string
     */
    public function getCourseCode()
    {
        return $this->container['course_code'];
    }

    /**
     * Sets course_code
     * @param string $course_code Code of course
     * @return $this
     */
    public function setCourseCode($course_code)
    {
        $this->container['course_code'] = $course_code;

        return $this;
    }

    /**
     * Gets enrollment_fields
     * @return \Swagger\Client\Model\LearnEnrollmentViewEnrollmentFields[]
     */
    public function getEnrollmentFields()
    {
        return $this->container['enrollment_fields'];
    }

    /**
     * Sets enrollment_fields
     * @param \Swagger\Client\Model\LearnEnrollmentViewEnrollmentFields[] $enrollment_fields Array of additional enrollment fields
     * @return $this
     */
    public function setEnrollmentFields($enrollment_fields)
    {
        $this->container['enrollment_fields'] = $enrollment_fields;

        return $this;
    }

    /**
     * Gets status
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param int $status Course-user status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets enroll_begin_date
     * @return \DateTime
     */
    public function getEnrollBeginDate()
    {
        return $this->container['enroll_begin_date'];
    }

    /**
     * Sets enroll_begin_date
     * @param \DateTime $enroll_begin_date Date of user enrollment
     * @return $this
     */
    public function setEnrollBeginDate($enroll_begin_date)
    {
        $this->container['enroll_begin_date'] = $enroll_begin_date;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Course name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


