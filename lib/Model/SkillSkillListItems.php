<?php
/**
 * SkillSkillListItems
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * SkillSkillListItems Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SkillSkillListItems implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SkillSkillListItems';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'assigned' => 'int',
        'associated_content' => 'int',
        'active' => 'int',
        'title' => 'string',
        'roles' => '\Swagger\Client\Model\SkillSkillListRoles[]',
        'skill_id' => 'int',
        'description' => 'string',
        'areas' => '\Swagger\Client\Model\SkillSkillListAreas[]',
        'strategic' => 'int',
        'actions' => 'string[]',
        'predefined_uid' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'assigned' => 'assigned',
        'associated_content' => 'associated_content',
        'active' => 'active',
        'title' => 'title',
        'roles' => 'roles',
        'skill_id' => 'skill_id',
        'description' => 'description',
        'areas' => 'areas',
        'strategic' => 'strategic',
        'actions' => 'actions',
        'predefined_uid' => 'predefinedUID'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'assigned' => 'setAssigned',
        'associated_content' => 'setAssociatedContent',
        'active' => 'setActive',
        'title' => 'setTitle',
        'roles' => 'setRoles',
        'skill_id' => 'setSkillId',
        'description' => 'setDescription',
        'areas' => 'setAreas',
        'strategic' => 'setStrategic',
        'actions' => 'setActions',
        'predefined_uid' => 'setPredefinedUid'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'assigned' => 'getAssigned',
        'associated_content' => 'getAssociatedContent',
        'active' => 'getActive',
        'title' => 'getTitle',
        'roles' => 'getRoles',
        'skill_id' => 'getSkillId',
        'description' => 'getDescription',
        'areas' => 'getAreas',
        'strategic' => 'getStrategic',
        'actions' => 'getActions',
        'predefined_uid' => 'getPredefinedUid'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['assigned'] = isset($data['assigned']) ? $data['assigned'] : null;
        $this->container['associated_content'] = isset($data['associated_content']) ? $data['associated_content'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['roles'] = isset($data['roles']) ? $data['roles'] : null;
        $this->container['skill_id'] = isset($data['skill_id']) ? $data['skill_id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['areas'] = isset($data['areas']) ? $data['areas'] : null;
        $this->container['strategic'] = isset($data['strategic']) ? $data['strategic'] : null;
        $this->container['actions'] = isset($data['actions']) ? $data['actions'] : null;
        $this->container['predefined_uid'] = isset($data['predefined_uid']) ? $data['predefined_uid'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['associated_content'] === null) {
            $invalid_properties[] = "'associated_content' can't be null";
        }
        if ($this->container['active'] === null) {
            $invalid_properties[] = "'active' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalid_properties[] = "'title' can't be null";
        }
        if ($this->container['roles'] === null) {
            $invalid_properties[] = "'roles' can't be null";
        }
        if ($this->container['skill_id'] === null) {
            $invalid_properties[] = "'skill_id' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalid_properties[] = "'description' can't be null";
        }
        if ($this->container['areas'] === null) {
            $invalid_properties[] = "'areas' can't be null";
        }
        if ($this->container['strategic'] === null) {
            $invalid_properties[] = "'strategic' can't be null";
        }
        if ($this->container['actions'] === null) {
            $invalid_properties[] = "'actions' can't be null";
        }
        if ($this->container['predefined_uid'] === null) {
            $invalid_properties[] = "'predefined_uid' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['associated_content'] === null) {
            return false;
        }
        if ($this->container['active'] === null) {
            return false;
        }
        if ($this->container['title'] === null) {
            return false;
        }
        if ($this->container['roles'] === null) {
            return false;
        }
        if ($this->container['skill_id'] === null) {
            return false;
        }
        if ($this->container['description'] === null) {
            return false;
        }
        if ($this->container['areas'] === null) {
            return false;
        }
        if ($this->container['strategic'] === null) {
            return false;
        }
        if ($this->container['actions'] === null) {
            return false;
        }
        if ($this->container['predefined_uid'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets assigned
     * @return int
     */
    public function getAssigned()
    {
        return $this->container['assigned'];
    }

    /**
     * Sets assigned
     * @param int $assigned 1 if skill is assigned to the given role otherwise 0
     * @return $this
     */
    public function setAssigned($assigned)
    {
        $this->container['assigned'] = $assigned;

        return $this;
    }

    /**
     * Gets associated_content
     * @return int
     */
    public function getAssociatedContent()
    {
        return $this->container['associated_content'];
    }

    /**
     * Sets associated_content
     * @param int $associated_content Associated to this skill content count
     * @return $this
     */
    public function setAssociatedContent($associated_content)
    {
        $this->container['associated_content'] = $associated_content;

        return $this;
    }

    /**
     * Gets active
     * @return int
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     * @param int $active whatever skill is active or not('active' -&gt; [1], 'inactive' -&gt; [0])
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     * @param string $title Skill title in the selected language
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets roles
     * @return \Swagger\Client\Model\SkillSkillListRoles[]
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     * @param \Swagger\Client\Model\SkillSkillListRoles[] $roles List of roles, that skill is assigned to
     * @return $this
     */
    public function setRoles($roles)
    {
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets skill_id
     * @return int
     */
    public function getSkillId()
    {
        return $this->container['skill_id'];
    }

    /**
     * Sets skill_id
     * @param int $skill_id ID of the skill
     * @return $this
     */
    public function setSkillId($skill_id)
    {
        $this->container['skill_id'] = $skill_id;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description Skill description in the selected language
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets areas
     * @return \Swagger\Client\Model\SkillSkillListAreas[]
     */
    public function getAreas()
    {
        return $this->container['areas'];
    }

    /**
     * Sets areas
     * @param \Swagger\Client\Model\SkillSkillListAreas[] $areas List of areas, that skill is assigned to
     * @return $this
     */
    public function setAreas($areas)
    {
        $this->container['areas'] = $areas;

        return $this;
    }

    /**
     * Gets strategic
     * @return int
     */
    public function getStrategic()
    {
        return $this->container['strategic'];
    }

    /**
     * Sets strategic
     * @param int $strategic whatever skill is strategic or not('strategic' -&gt; [1], 'not strategic' -&gt; [0])
     * @return $this
     */
    public function setStrategic($strategic)
    {
        $this->container['strategic'] = $strategic;

        return $this;
    }

    /**
     * Gets actions
     * @return string[]
     */
    public function getActions()
    {
        return $this->container['actions'];
    }

    /**
     * Sets actions
     * @param string[] $actions Available actions, that could be performed on the skill
     * @return $this
     */
    public function setActions($actions)
    {
        $this->container['actions'] = $actions;

        return $this;
    }

    /**
     * Gets predefined_uid
     * @return string
     */
    public function getPredefinedUid()
    {
        return $this->container['predefined_uid'];
    }

    /**
     * Sets predefined_uid
     * @param string $predefined_uid Predefined ID of the skill(if the skill is predefined, otherwise it contains NULL)
     * @return $this
     */
    public function setPredefinedUid($predefined_uid)
    {
        $this->container['predefined_uid'] = $predefined_uid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


