<?php
/**
 * SkillEvaluationGetEvaluationHistoryData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * SkillEvaluationGetEvaluationHistoryData Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SkillEvaluationGetEvaluationHistoryData implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SkillEvaluationGetEvaluationHistoryData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'rating_id' => 'int',
        'skill_title' => 'string',
        'skill_id' => 'int',
        'evaluation_type' => 'string',
        'user_id' => 'int',
        'rater_id' => 'int',
        'skill_description' => 'string',
        'rating_title' => 'string',
        'evaluation_value' => 'string',
        'evaluation_id' => 'int',
        'evaluation_date' => '\DateTime'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'rating_id' => 'rating_id',
        'skill_title' => 'skill_title',
        'skill_id' => 'skill_id',
        'evaluation_type' => 'evaluation_type',
        'user_id' => 'user_id',
        'rater_id' => 'rater_id',
        'skill_description' => 'skill_description',
        'rating_title' => 'rating_title',
        'evaluation_value' => 'evaluation_value',
        'evaluation_id' => 'evaluation_id',
        'evaluation_date' => 'evaluation_date'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'rating_id' => 'setRatingId',
        'skill_title' => 'setSkillTitle',
        'skill_id' => 'setSkillId',
        'evaluation_type' => 'setEvaluationType',
        'user_id' => 'setUserId',
        'rater_id' => 'setRaterId',
        'skill_description' => 'setSkillDescription',
        'rating_title' => 'setRatingTitle',
        'evaluation_value' => 'setEvaluationValue',
        'evaluation_id' => 'setEvaluationId',
        'evaluation_date' => 'setEvaluationDate'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'rating_id' => 'getRatingId',
        'skill_title' => 'getSkillTitle',
        'skill_id' => 'getSkillId',
        'evaluation_type' => 'getEvaluationType',
        'user_id' => 'getUserId',
        'rater_id' => 'getRaterId',
        'skill_description' => 'getSkillDescription',
        'rating_title' => 'getRatingTitle',
        'evaluation_value' => 'getEvaluationValue',
        'evaluation_id' => 'getEvaluationId',
        'evaluation_date' => 'getEvaluationDate'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['rating_id'] = isset($data['rating_id']) ? $data['rating_id'] : null;
        $this->container['skill_title'] = isset($data['skill_title']) ? $data['skill_title'] : null;
        $this->container['skill_id'] = isset($data['skill_id']) ? $data['skill_id'] : null;
        $this->container['evaluation_type'] = isset($data['evaluation_type']) ? $data['evaluation_type'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['rater_id'] = isset($data['rater_id']) ? $data['rater_id'] : null;
        $this->container['skill_description'] = isset($data['skill_description']) ? $data['skill_description'] : null;
        $this->container['rating_title'] = isset($data['rating_title']) ? $data['rating_title'] : null;
        $this->container['evaluation_value'] = isset($data['evaluation_value']) ? $data['evaluation_value'] : null;
        $this->container['evaluation_id'] = isset($data['evaluation_id']) ? $data['evaluation_id'] : null;
        $this->container['evaluation_date'] = isset($data['evaluation_date']) ? $data['evaluation_date'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['rating_id'] === null) {
            $invalid_properties[] = "'rating_id' can't be null";
        }
        if ($this->container['skill_title'] === null) {
            $invalid_properties[] = "'skill_title' can't be null";
        }
        if ($this->container['skill_id'] === null) {
            $invalid_properties[] = "'skill_id' can't be null";
        }
        if ($this->container['evaluation_type'] === null) {
            $invalid_properties[] = "'evaluation_type' can't be null";
        }
        if ($this->container['user_id'] === null) {
            $invalid_properties[] = "'user_id' can't be null";
        }
        if ($this->container['rater_id'] === null) {
            $invalid_properties[] = "'rater_id' can't be null";
        }
        if ($this->container['skill_description'] === null) {
            $invalid_properties[] = "'skill_description' can't be null";
        }
        if ($this->container['rating_title'] === null) {
            $invalid_properties[] = "'rating_title' can't be null";
        }
        if ($this->container['evaluation_value'] === null) {
            $invalid_properties[] = "'evaluation_value' can't be null";
        }
        if ($this->container['evaluation_id'] === null) {
            $invalid_properties[] = "'evaluation_id' can't be null";
        }
        if ($this->container['evaluation_date'] === null) {
            $invalid_properties[] = "'evaluation_date' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['rating_id'] === null) {
            return false;
        }
        if ($this->container['skill_title'] === null) {
            return false;
        }
        if ($this->container['skill_id'] === null) {
            return false;
        }
        if ($this->container['evaluation_type'] === null) {
            return false;
        }
        if ($this->container['user_id'] === null) {
            return false;
        }
        if ($this->container['rater_id'] === null) {
            return false;
        }
        if ($this->container['skill_description'] === null) {
            return false;
        }
        if ($this->container['rating_title'] === null) {
            return false;
        }
        if ($this->container['evaluation_value'] === null) {
            return false;
        }
        if ($this->container['evaluation_id'] === null) {
            return false;
        }
        if ($this->container['evaluation_date'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets rating_id
     * @return int
     */
    public function getRatingId()
    {
        return $this->container['rating_id'];
    }

    /**
     * Sets rating_id
     * @param int $rating_id Rating ID
     * @return $this
     */
    public function setRatingId($rating_id)
    {
        $this->container['rating_id'] = $rating_id;

        return $this;
    }

    /**
     * Gets skill_title
     * @return string
     */
    public function getSkillTitle()
    {
        return $this->container['skill_title'];
    }

    /**
     * Sets skill_title
     * @param string $skill_title Skill title in the selected language
     * @return $this
     */
    public function setSkillTitle($skill_title)
    {
        $this->container['skill_title'] = $skill_title;

        return $this;
    }

    /**
     * Gets skill_id
     * @return int
     */
    public function getSkillId()
    {
        return $this->container['skill_id'];
    }

    /**
     * Sets skill_id
     * @param int $skill_id ID of the evaluated skill
     * @return $this
     */
    public function setSkillId($skill_id)
    {
        $this->container['skill_id'] = $skill_id;

        return $this;
    }

    /**
     * Gets evaluation_type
     * @return string
     */
    public function getEvaluationType()
    {
        return $this->container['evaluation_type'];
    }

    /**
     * Sets evaluation_type
     * @param string $evaluation_type Type of evaluation, options S,M (Self, Manager)
     * @return $this
     */
    public function setEvaluationType($evaluation_type)
    {
        $this->container['evaluation_type'] = $evaluation_type;

        return $this;
    }

    /**
     * Gets user_id
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     * @param int $user_id ID of the user that was evaluated
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets rater_id
     * @return int
     */
    public function getRaterId()
    {
        return $this->container['rater_id'];
    }

    /**
     * Sets rater_id
     * @param int $rater_id ID of the user that rated
     * @return $this
     */
    public function setRaterId($rater_id)
    {
        $this->container['rater_id'] = $rater_id;

        return $this;
    }

    /**
     * Gets skill_description
     * @return string
     */
    public function getSkillDescription()
    {
        return $this->container['skill_description'];
    }

    /**
     * Sets skill_description
     * @param string $skill_description Skill title description in the selected language
     * @return $this
     */
    public function setSkillDescription($skill_description)
    {
        $this->container['skill_description'] = $skill_description;

        return $this;
    }

    /**
     * Gets rating_title
     * @return string
     */
    public function getRatingTitle()
    {
        return $this->container['rating_title'];
    }

    /**
     * Sets rating_title
     * @param string $rating_title Rating title in the selected language
     * @return $this
     */
    public function setRatingTitle($rating_title)
    {
        $this->container['rating_title'] = $rating_title;

        return $this;
    }

    /**
     * Gets evaluation_value
     * @return string
     */
    public function getEvaluationValue()
    {
        return $this->container['evaluation_value'];
    }

    /**
     * Sets evaluation_value
     * @param string $evaluation_value Rating value
     * @return $this
     */
    public function setEvaluationValue($evaluation_value)
    {
        $this->container['evaluation_value'] = $evaluation_value;

        return $this;
    }

    /**
     * Gets evaluation_id
     * @return int
     */
    public function getEvaluationId()
    {
        return $this->container['evaluation_id'];
    }

    /**
     * Sets evaluation_id
     * @param int $evaluation_id ID of evaluation
     * @return $this
     */
    public function setEvaluationId($evaluation_id)
    {
        $this->container['evaluation_id'] = $evaluation_id;

        return $this;
    }

    /**
     * Gets evaluation_date
     * @return \DateTime
     */
    public function getEvaluationDate()
    {
        return $this->container['evaluation_date'];
    }

    /**
     * Sets evaluation_date
     * @param \DateTime $evaluation_date Date of evaluation
     * @return $this
     */
    public function setEvaluationDate($evaluation_date)
    {
        $this->container['evaluation_date'] = $evaluation_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


