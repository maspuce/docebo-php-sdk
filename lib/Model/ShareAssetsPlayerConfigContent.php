<?php
/**
 * ShareAssetsPlayerConfigContent
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ShareAssetsPlayerConfigContent Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ShareAssetsPlayerConfigContent implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ShareAssetsPlayerConfigContent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'thumbnails' => '\Swagger\Client\Model\ShareAssetsPlayerConfigThumbnails',
        'name_original' => 'string',
        'name_converted' => 'string',
        'link' => 'string',
        'sources' => '\Swagger\Client\Model\ShareAssetsPlayerConfigSources',
        'filesize' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'thumbnails' => 'thumbnails',
        'name_original' => 'name_original',
        'name_converted' => 'name_converted',
        'link' => 'link',
        'sources' => 'sources',
        'filesize' => 'filesize'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'thumbnails' => 'setThumbnails',
        'name_original' => 'setNameOriginal',
        'name_converted' => 'setNameConverted',
        'link' => 'setLink',
        'sources' => 'setSources',
        'filesize' => 'setFilesize'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'thumbnails' => 'getThumbnails',
        'name_original' => 'getNameOriginal',
        'name_converted' => 'getNameConverted',
        'link' => 'getLink',
        'sources' => 'getSources',
        'filesize' => 'getFilesize'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['thumbnails'] = isset($data['thumbnails']) ? $data['thumbnails'] : null;
        $this->container['name_original'] = isset($data['name_original']) ? $data['name_original'] : null;
        $this->container['name_converted'] = isset($data['name_converted']) ? $data['name_converted'] : null;
        $this->container['link'] = isset($data['link']) ? $data['link'] : null;
        $this->container['sources'] = isset($data['sources']) ? $data['sources'] : null;
        $this->container['filesize'] = isset($data['filesize']) ? $data['filesize'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['thumbnails'] === null) {
            $invalid_properties[] = "'thumbnails' can't be null";
        }
        if ($this->container['name_original'] === null) {
            $invalid_properties[] = "'name_original' can't be null";
        }
        if ($this->container['name_converted'] === null) {
            $invalid_properties[] = "'name_converted' can't be null";
        }
        if ($this->container['filesize'] === null) {
            $invalid_properties[] = "'filesize' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['thumbnails'] === null) {
            return false;
        }
        if ($this->container['name_original'] === null) {
            return false;
        }
        if ($this->container['name_converted'] === null) {
            return false;
        }
        if ($this->container['filesize'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets thumbnails
     * @return \Swagger\Client\Model\ShareAssetsPlayerConfigThumbnails
     */
    public function getThumbnails()
    {
        return $this->container['thumbnails'];
    }

    /**
     * Sets thumbnails
     * @param \Swagger\Client\Model\ShareAssetsPlayerConfigThumbnails $thumbnails Return thumbnail of player object
     * @return $this
     */
    public function setThumbnails($thumbnails)
    {
        $this->container['thumbnails'] = $thumbnails;

        return $this;
    }

    /**
     * Gets name_original
     * @return string
     */
    public function getNameOriginal()
    {
        return $this->container['name_original'];
    }

    /**
     * Sets name_original
     * @param string $name_original Player original name
     * @return $this
     */
    public function setNameOriginal($name_original)
    {
        $this->container['name_original'] = $name_original;

        return $this;
    }

    /**
     * Gets name_converted
     * @return string
     */
    public function getNameConverted()
    {
        return $this->container['name_converted'];
    }

    /**
     * Sets name_converted
     * @param string $name_converted Player converted name
     * @return $this
     */
    public function setNameConverted($name_converted)
    {
        $this->container['name_converted'] = $name_converted;

        return $this;
    }

    /**
     * Gets link
     * @return string
     */
    public function getLink()
    {
        return $this->container['link'];
    }

    /**
     * Sets link
     * @param string $link Player link
     * @return $this
     */
    public function setLink($link)
    {
        $this->container['link'] = $link;

        return $this;
    }

    /**
     * Gets sources
     * @return \Swagger\Client\Model\ShareAssetsPlayerConfigSources
     */
    public function getSources()
    {
        return $this->container['sources'];
    }

    /**
     * Sets sources
     * @param \Swagger\Client\Model\ShareAssetsPlayerConfigSources $sources Player sources
     * @return $this
     */
    public function setSources($sources)
    {
        $this->container['sources'] = $sources;

        return $this;
    }

    /**
     * Gets filesize
     * @return string
     */
    public function getFilesize()
    {
        return $this->container['filesize'];
    }

    /**
     * Sets filesize
     * @param string $filesize Player filesize
     * @return $this
     */
    public function setFilesize($filesize)
    {
        $this->container['filesize'] = $filesize;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


