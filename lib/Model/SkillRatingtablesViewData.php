<?php
/**
 * SkillRatingtablesViewData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * SkillRatingtablesViewData Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SkillRatingtablesViewData implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SkillRatingtablesViewData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'active' => 'int',
        'rating_scale_id' => 'int',
        'low_limit' => 'int',
        'translations' => '\Swagger\Client\Model\SkillRatingtablesViewTranslations',
        'editable' => 'int',
        'rating_points' => 'int',
        'high_limit' => 'int',
        'usage' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'active' => 'active',
        'rating_scale_id' => 'rating_scale_id',
        'low_limit' => 'low_limit',
        'translations' => 'translations',
        'editable' => 'editable',
        'rating_points' => 'rating_points',
        'high_limit' => 'high_limit',
        'usage' => 'usage'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'active' => 'setActive',
        'rating_scale_id' => 'setRatingScaleId',
        'low_limit' => 'setLowLimit',
        'translations' => 'setTranslations',
        'editable' => 'setEditable',
        'rating_points' => 'setRatingPoints',
        'high_limit' => 'setHighLimit',
        'usage' => 'setUsage'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'active' => 'getActive',
        'rating_scale_id' => 'getRatingScaleId',
        'low_limit' => 'getLowLimit',
        'translations' => 'getTranslations',
        'editable' => 'getEditable',
        'rating_points' => 'getRatingPoints',
        'high_limit' => 'getHighLimit',
        'usage' => 'getUsage'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['rating_scale_id'] = isset($data['rating_scale_id']) ? $data['rating_scale_id'] : null;
        $this->container['low_limit'] = isset($data['low_limit']) ? $data['low_limit'] : null;
        $this->container['translations'] = isset($data['translations']) ? $data['translations'] : null;
        $this->container['editable'] = isset($data['editable']) ? $data['editable'] : null;
        $this->container['rating_points'] = isset($data['rating_points']) ? $data['rating_points'] : null;
        $this->container['high_limit'] = isset($data['high_limit']) ? $data['high_limit'] : null;
        $this->container['usage'] = isset($data['usage']) ? $data['usage'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['active'] === null) {
            $invalid_properties[] = "'active' can't be null";
        }
        if ($this->container['rating_scale_id'] === null) {
            $invalid_properties[] = "'rating_scale_id' can't be null";
        }
        if ($this->container['low_limit'] === null) {
            $invalid_properties[] = "'low_limit' can't be null";
        }
        if ($this->container['translations'] === null) {
            $invalid_properties[] = "'translations' can't be null";
        }
        if ($this->container['editable'] === null) {
            $invalid_properties[] = "'editable' can't be null";
        }
        if ($this->container['rating_points'] === null) {
            $invalid_properties[] = "'rating_points' can't be null";
        }
        if ($this->container['high_limit'] === null) {
            $invalid_properties[] = "'high_limit' can't be null";
        }
        if ($this->container['usage'] === null) {
            $invalid_properties[] = "'usage' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['active'] === null) {
            return false;
        }
        if ($this->container['rating_scale_id'] === null) {
            return false;
        }
        if ($this->container['low_limit'] === null) {
            return false;
        }
        if ($this->container['translations'] === null) {
            return false;
        }
        if ($this->container['editable'] === null) {
            return false;
        }
        if ($this->container['rating_points'] === null) {
            return false;
        }
        if ($this->container['high_limit'] === null) {
            return false;
        }
        if ($this->container['usage'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets active
     * @return int
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     * @param int $active Rating scale status
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets rating_scale_id
     * @return int
     */
    public function getRatingScaleId()
    {
        return $this->container['rating_scale_id'];
    }

    /**
     * Sets rating_scale_id
     * @param int $rating_scale_id Rating Scale ID
     * @return $this
     */
    public function setRatingScaleId($rating_scale_id)
    {
        $this->container['rating_scale_id'] = $rating_scale_id;

        return $this;
    }

    /**
     * Gets low_limit
     * @return int
     */
    public function getLowLimit()
    {
        return $this->container['low_limit'];
    }

    /**
     * Sets low_limit
     * @param int $low_limit Low limit of the scale
     * @return $this
     */
    public function setLowLimit($low_limit)
    {
        $this->container['low_limit'] = $low_limit;

        return $this;
    }

    /**
     * Gets translations
     * @return \Swagger\Client\Model\SkillRatingtablesViewTranslations
     */
    public function getTranslations()
    {
        return $this->container['translations'];
    }

    /**
     * Sets translations
     * @param \Swagger\Client\Model\SkillRatingtablesViewTranslations $translations translations of the scale and ratings
     * @return $this
     */
    public function setTranslations($translations)
    {
        $this->container['translations'] = $translations;

        return $this;
    }

    /**
     * Gets editable
     * @return int
     */
    public function getEditable()
    {
        return $this->container['editable'];
    }

    /**
     * Sets editable
     * @param int $editable Is Rating scale editable - 0(no) or 1(yes)
     * @return $this
     */
    public function setEditable($editable)
    {
        $this->container['editable'] = $editable;

        return $this;
    }

    /**
     * Gets rating_points
     * @return int
     */
    public function getRatingPoints()
    {
        return $this->container['rating_points'];
    }

    /**
     * Sets rating_points
     * @param int $rating_points Count of the ratings assigned to the scale
     * @return $this
     */
    public function setRatingPoints($rating_points)
    {
        $this->container['rating_points'] = $rating_points;

        return $this;
    }

    /**
     * Gets high_limit
     * @return int
     */
    public function getHighLimit()
    {
        return $this->container['high_limit'];
    }

    /**
     * Sets high_limit
     * @param int $high_limit High limit of the scale
     * @return $this
     */
    public function setHighLimit($high_limit)
    {
        $this->container['high_limit'] = $high_limit;

        return $this;
    }

    /**
     * Gets usage
     * @return string
     */
    public function getUsage()
    {
        return $this->container['usage'];
    }

    /**
     * Sets usage
     * @param string $usage Rating scale target - 'evaluation', 'kpi', etc.
     * @return $this
     */
    public function setUsage($usage)
    {
        $this->container['usage'] = $usage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


